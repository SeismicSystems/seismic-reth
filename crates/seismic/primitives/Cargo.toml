[package]
name = "reth-seismic-primitives"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
homepage.workspace = true
repository.workspace = true
description = "OP primitive types"

[lints]
workspace = true

[dependencies]
# reth
reth-primitives-traits = { workspace = true, features = ["serde"] }
reth-codecs = { workspace = true, optional = true }
reth-zstd-compressors = { workspace = true, optional = true }
revm-context.workspace = true

# ethereum
alloy-evm.workspace = true
alloy-primitives = { workspace = true, features = ["serde"] }
alloy-consensus.workspace = true
alloy-rlp.workspace = true
alloy-eips = { workspace = true, features = ["k256"] }

# op
seismic-alloy-consensus.workspace = true
alloy-rpc-types-eth = { workspace = true, optional = true }
alloy-network = { workspace = true }
seismic-alloy-network = { workspace = true }
alloy-serde = { workspace = true, optional = true }
seismic-revm.workspace = true

# codec
bytes = { workspace = true, optional = true }
modular-bitfield = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
serde_with = { workspace = true, optional = true }

# misc
derive_more = { workspace = true, features = [
    "deref",
    "from",
    "into",
    "constructor",
] }
rand = { workspace = true, optional = true }
secp256k1 = { workspace = true, features = ["rand", "std", "global-context", "recovery"]}

# test
arbitrary = { workspace = true, features = ["derive"], optional = true }
proptest = { workspace = true, optional = true }

# test utils
alloy-signer-local.workspace = true
alloy-rpc-types.workspace = true
k256.workspace = true
enr = {workspace = true, features = ["rust-secp256k1"]}
alloy-dyn-abi.workspace = true
reth-enclave.workspace = true
seismic-alloy-rpc-types.workspace = true

[dev-dependencies]
arbitrary.workspace = true
proptest-arbitrary-interop.workspace = true
proptest.workspace = true
rand.workspace = true
reth-codecs = { workspace = true, features = ["test-utils"] }
rstest.workspace = true
serde_json.workspace = true
bincode.workspace = true

[features]
default = ["std", "serde", "reth-codec"]
std = [
    "reth-primitives-traits/std",
    "reth-codecs?/std",
    "alloy-consensus/std",
    "alloy-eips/std",
    "alloy-primitives/std",
    "serde?/std",
    "bytes?/std",
    "derive_more/std",
    "secp256k1/std",
    "alloy-rlp/std",
    "reth-zstd-compressors?/std",
    "seismic-alloy-consensus/std",
    "alloy-rpc-types-eth?/std",
    "alloy-serde?/std",
    "revm-context/std",
    "serde_json/std",
    "alloy-evm/std",
    "serde_with?/std",
]
alloy-compat = [
    "dep:alloy-serde",
    "dep:alloy-rpc-types-eth",
    "seismic-alloy-consensus/alloy-compat",
]
reth-codec = [
    "dep:reth-codecs",
    "std",
    "dep:proptest",
    "reth-primitives-traits/reth-codec",
    "reth-codecs?/op",
    "dep:bytes",
    "dep:modular-bitfield",
    "dep:reth-zstd-compressors",
]
serde = [
    "dep:serde",
    "reth-primitives-traits/serde",
    "alloy-primitives/serde",
    "alloy-consensus/serde",
    "alloy-eips/serde",
    "bytes?/serde",
    "reth-codecs?/serde",
    "seismic-alloy-consensus/serde",
    "rand?/serde",
    "secp256k1/serde",
    "alloy-rpc-types-eth?/serde",
    "revm-context/serde",
]
serde-bincode-compat = [
    "serde",
    "serde_with",
    "alloy-consensus/serde-bincode-compat",
    "alloy-eips/serde-bincode-compat",
    "seismic-alloy-consensus/serde-bincode-compat",
    "reth-primitives-traits/serde-bincode-compat",
]
arbitrary = [
    "std",
    "dep:arbitrary",
    # "dep:secp256k1",
    "secp256k1/rand",
    "reth-primitives-traits/arbitrary",
    "reth-codecs?/arbitrary",
    "seismic-alloy-consensus/arbitrary",
    "alloy-consensus/arbitrary",
    "alloy-eips/arbitrary",
    "alloy-primitives/arbitrary",
    "rand",
    "alloy-rpc-types-eth?/arbitrary",
    "alloy-serde?/arbitrary",
]
