diff --git a/.config/nextest.toml b/.config/nextest.toml
index e107857a3..d973c12ef 100644
--- a/.config/nextest.toml
+++ b/.config/nextest.toml
@@ -1,7 +1,8 @@
 [profile.default]
+default-filter = '!(test(providers::static_file::tests::test_header_truncation) or test(providers::static_file::tests::test_tx_based_truncation) or test(eth::core::tests))'
 retries = { backoff = "exponential", count = 2, delay = "2s", jitter = true }
-slow-timeout = { period = "30s", terminate-after = 4 }
+slow-timeout = { period = "200s", terminate-after = 4 }
 
 [[profile.default.overrides]]
-filter = "test(general_state_tests)"
+filter = 'test(general_state_tests)'
 slow-timeout = { period = "1m", terminate-after = 10 }
diff --git a/.github/CODEOWNERS b/.github/CODEOWNERS
index 5a1d1df72..82369287c 100644
--- a/.github/CODEOWNERS
+++ b/.github/CODEOWNERS
@@ -1,48 +1 @@
-*                           @gakonst
-bin/                        @onbjerg
-crates/blockchain-tree/     @rakita @rkrasiuk @mattsse @Rjected
-crates/blockchain-tree-api/ @rakita @rkrasiuk @mattsse @Rjected
-crates/chainspec/           @Rjected @joshieDo @mattsse @emhane
-crates/chain-state/         @fgimenez @mattsse @rkrasiuk
-crates/cli/                 @onbjerg @mattsse
-crates/config/              @onbjerg
-crates/consensus/           @rkrasiuk @mattsse @Rjected
-crates/engine               @rkrasiuk @mattsse @Rjected
-crates/e2e-test-utils/      @mattsse @Rjected
-crates/engine/              @rkrasiuk @mattsse @Rjected @fgimenez
-crates/errors/              @mattsse
-crates/ethereum/            @mattsse @Rjected
-crates/ethereum-forks/      @mattsse @Rjected
-crates/etl/                 @joshieDo @shekhirin
-crates/evm/                 @rakita @mattsse @Rjected
-crates/exex/                @onbjerg @shekhirin
-crates/fs-util/             @onbjerg @emhane
-crates/metrics/             @onbjerg
-crates/net/                 @emhane @mattsse @Rjected
-crates/net/downloaders/     @onbjerg @rkrasiuk @emhane
-crates/node/                @mattsse @Rjected @onbjerg @emhane @klkvr
-crates/optimism/            @mattsse @Rjected @fgimenez @emhane
-crates/payload/             @mattsse @Rjected
-crates/primitives/          @Rjected @emhane @mattsse @klkvr
-crates/primitives-traits/   @Rjected @joshieDo @emhane @mattsse @klkvr
-crates/prune/               @shekhirin @joshieDo
-crates/revm/                @mattsse @rakita
-crates/rpc/                 @mattsse @Rjected @emhane
-crates/stages/              @onbjerg @rkrasiuk @shekhirin
-crates/static-file/         @joshieDo @shekhirin
-crates/storage/codecs/      @joshieDo
-crates/storage/db/          @joshieDo @rakita
-crates/storage/db-api/      @joshieDo @rakita
-crates/storage/db-common/   @Rjected @onbjerg
-crates/storage/errors/      @rakita @onbjerg
-crates/storage/libmdbx-rs/  @rakita @shekhirin
-crates/storage/nippy-jar/   @joshieDo @shekhirin
-crates/storage/provider/    @rakita @joshieDo @shekhirin
-crates/storage/storage-api/ @joshieDo @rkrasiuk
-crates/tasks/               @mattsse
-crates/tokio-util/          @fgimenez @emhane
-crates/tracing/             @onbjerg
-crates/transaction-pool/    @mattsse
-crates/trie/                @rkrasiuk @Rjected @shekhirin
-etc/                        @Rjected @onbjerg @shekhirin
-.github/                    @onbjerg @gakonst @DaniPopes
+* @phexyz
diff --git a/.github/ISSUE_TEMPLATE/bug.yml b/.github/ISSUE_TEMPLATE/bug.yml
index b01d4518f..a86f05c33 100644
--- a/.github/ISSUE_TEMPLATE/bug.yml
+++ b/.github/ISSUE_TEMPLATE/bug.yml
@@ -121,7 +121,7 @@ body:
     id: terms
     attributes:
       label: Code of Conduct
-      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/paradigmxyz/reth/blob/main/CONTRIBUTING.md#code-of-conduct)
+      description: By submitting this issue, you agree to follow our [Code of Conduct](https://github.com/SeismicSystems/seismic-reth/blob/main/CONTRIBUTING.md#code-of-conduct)
       options:
         - label: I agree to follow the Code of Conduct
           required: true
diff --git a/.github/ISSUE_TEMPLATE/config.yml b/.github/ISSUE_TEMPLATE/config.yml
index cfefdb13a..0747827ec 100644
--- a/.github/ISSUE_TEMPLATE/config.yml
+++ b/.github/ISSUE_TEMPLATE/config.yml
@@ -1,5 +1,5 @@
 blank_issues_enabled: false
 contact_links:
   - name: GitHub Discussions
-    url: https://github.com/paradigmxyz/reth/discussions
+    url: https://github.com/SeismicSystems/seismic-reth/discussions
     about: Please ask and answer questions here to keep the issue tracker clean.
diff --git a/.github/assets/kurtosis_network_params.yaml b/.github/assets/kurtosis_network_params.yaml
index e8cc1b51d..9dfb5b4e6 100644
--- a/.github/assets/kurtosis_network_params.yaml
+++ b/.github/assets/kurtosis_network_params.yaml
@@ -2,6 +2,7 @@ participants:
   - el_type: geth
     cl_type: lighthouse
   - el_type: reth
+    # TODO: add for seismic
     el_image: "ghcr.io/paradigmxyz/reth:kurtosis-ci"
     cl_type: teku
 additional_services:
diff --git a/.github/assets/kurtosis_op_network_params.yaml b/.github/assets/kurtosis_op_network_params.yaml
index 0e1516cc8..dd746e766 100644
--- a/.github/assets/kurtosis_op_network_params.yaml
+++ b/.github/assets/kurtosis_op_network_params.yaml
@@ -8,6 +8,7 @@ optimism_package:
       - el_type: op-geth
         cl_type: op-node
       - el_type: op-reth
+        # TODO: add seismic
         el_image: "ghcr.io/paradigmxyz/op-reth:kurtosis-ci"
         cl_type: op-node
       batcher_params:
diff --git a/.github/workflows/book.yml b/.github/workflows/book.yml
index 56d5c4274..51d1a065e 100644
--- a/.github/workflows/book.yml
+++ b/.github/workflows/book.yml
@@ -4,11 +4,15 @@ name: book
 
 on:
   push:
-    branches: [main]
+    branches: [seismic]
   pull_request:
-    branches: [main]
+    branches: [seismic]
   merge_group:
 
+env:
+  CARGO_TERM_COLOR: always
+  CARGO_NET_GIT_FETCH_WITH_CLI: true
+
 jobs:
   test:
     runs-on: ubuntu-latest
@@ -58,6 +62,21 @@ jobs:
     steps:
       - uses: actions/checkout@v4
       - uses: dtolnay/rust-toolchain@nightly
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "book-test-cache"
+      - name: Install SSH Keys
+        uses: webfactory/ssh-agent@v0.9.0
+        with:
+          ssh-private-key: ${{ secrets.ACTIONS_MANTLE_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SFORGESTD_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SALLOYCORE_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SALLOY_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SREVM_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SREVMINSPECTORS_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_SRETH_SSH_ED25519 }}
+            ${{ secrets.ACTIONS_TEESERVICE_SSH_ED25519 }}
+
       - name: Install mdbook
         run: |
           mkdir mdbook
@@ -78,7 +97,7 @@ jobs:
         run: mdbook build
 
       - name: Build docs
-        run: cargo docs --exclude "example-*"
+        run: cargo doc --exclude "example-*" --workspace --no-deps
         env:
           # Keep in sync with ./ci.yml:jobs.docs
           RUSTDOCFLAGS:
@@ -113,8 +132,8 @@ jobs:
           if-no-files-found: error
 
   deploy:
-    # Only deploy if a push to main
-    if: github.ref_name == 'main' && github.event_name == 'push'
+    # Only deploy if a push to seismic
+    if: github.ref_name == 'seismic' && github.event_name == 'push'
     runs-on: ubuntu-latest
     needs: [test, lint, build]
 
diff --git a/.github/workflows/eth-sync.yml b/.github/workflows/eth-sync.yml
new file mode 100644
index 000000000..db6acb63d
--- /dev/null
+++ b/.github/workflows/eth-sync.yml
@@ -0,0 +1,54 @@
+# Runs an ethereum mainnet sync test.
+
+name: eth-sync-test
+
+on:
+  pull_request:
+  merge_group:
+  push:
+    branches: [ main ]
+
+env:
+  CARGO_TERM_COLOR: always
+
+concurrency:
+  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
+  cancel-in-progress: true
+
+jobs:
+  sync:
+    name: sync / 100k blocks
+    # Only run sync tests in merge groups
+    if: github.event_name == 'merge_group'
+    runs-on:
+      group: Reth
+    env:
+      RUST_LOG: info,sync=error
+      RUST_BACKTRACE: 1
+    timeout-minutes: 60
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: Swatinem/rust-cache@v2
+        with:
+          cache-on-failure: true
+      - name: Build reth
+        run: |
+          cargo install --features asm-keccak,jemalloc --path bin/reth
+      - name: Run sync
+        run: |
+          reth node \
+            --debug.tip 0x91c90676cab257a59cd956d7cb0bceb9b1a71d79755c23c7277a0697ccfaf8c4 \
+            --debug.max-block 100000 \
+            --debug.terminate
+      - name: Verify the target block hash
+        run: |
+          reth db get static-file headers 100000 \
+            | grep 0x91c90676cab257a59cd956d7cb0bceb9b1a71d79755c23c7277a0697ccfaf8c4
+      - name: Run stage unwind for 100 blocks
+        run: |
+          reth stage unwind num-blocks 100
+      - name: Run stage unwind to block hash
+        run: |
+          reth stage unwind to-block 0x52e0509d33a988ef807058e2980099ee3070187f7333aae12b64d4d675f34c5a
+
diff --git a/.github/workflows/kurtosis.yml b/.github/workflows/kurtosis.yml
index ab0c95939..9559aae02 100644
--- a/.github/workflows/kurtosis.yml
+++ b/.github/workflows/kurtosis.yml
@@ -63,5 +63,5 @@ jobs:
         uses: rtCamp/action-slack-notify@v2
         env:
           SLACK_COLOR: ${{ job.status }}
-          SLACK_MESSAGE: "Failed run: https://github.com/paradigmxyz/reth/actions/runs/${{ github.run_id }}"
+          SLACK_MESSAGE: "Failed run: https://github.com/SeismicSystems/seismic-reth/actions/runs/${{ github.run_id }}"
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
diff --git a/.github/workflows/prepare-reth.yml b/.github/workflows/prepare-reth.yml
index 1b5f0e70c..022b107fe 100644
--- a/.github/workflows/prepare-reth.yml
+++ b/.github/workflows/prepare-reth.yml
@@ -24,7 +24,7 @@ on:
 
 jobs:
   prepare-reth:
-    if: github.repository == 'paradigmxyz/reth'
+    if: github.repository == 'SeismicSystems/seismic-reth'
     timeout-minutes: 45
     runs-on:
       group: Reth
diff --git a/.github/workflows/release-dist.yml b/.github/workflows/release-dist.yml
index f7df80e81..d6c164b69 100644
--- a/.github/workflows/release-dist.yml
+++ b/.github/workflows/release-dist.yml
@@ -16,5 +16,6 @@ jobs:
         with:
           token: ${{ secrets.HOMEBREW }}
           no_fork: true
+          # TODO: seismic
           tap: paradigmxyz/brew
           formula: reth
diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
index 5735ae6ef..48d7af7d6 100644
--- a/.github/workflows/release.yml
+++ b/.github/workflows/release.yml
@@ -130,6 +130,7 @@ jobs:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         # The formatting here is borrowed from Lighthouse (which is borrowed from OpenEthereum):
         # https://github.com/openethereum/openethereum/blob/6c2d392d867b058ff867c4373e40850ca3f96969/.github/workflows/build.yml
+        # TODO: seismic
         run: |
           body=$(cat <<- "ENDBODY"
           ![image](https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png)
diff --git a/.github/workflows/seismic.yml b/.github/workflows/seismic.yml
new file mode 100644
index 000000000..dfcb66b02
--- /dev/null
+++ b/.github/workflows/seismic.yml
@@ -0,0 +1,113 @@
+name: Seismic CI
+
+on:
+  push:
+    branches: [seismic]
+  pull_request:
+    branches: [seismic]
+
+concurrency:
+  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
+  cancel-in-progress: true
+
+env:
+  CARGO_TERM_COLOR: always
+  CARGO_NET_GIT_FETCH_WITH_CLI: true
+
+jobs:
+  rustfmt:
+    runs-on: ubuntu-latest
+    timeout-minutes: 5
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@nightly
+        with:
+          components: rustfmt
+      - run: cargo fmt --all --check
+
+  build:
+    runs-on: large-github-runner
+    timeout-minutes: 30
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "build-cache"
+      # Removing this because build --bin seismic-reth runs in integration-test
+      # and this is very slow right now.
+      # TODO: eventually uncomment it when we open source,
+      # so we know other crates build correctly
+      # - name: cargo build
+      #   run: cargo build
+
+  warnings:
+    runs-on: ubuntu-latest
+    timeout-minutes: 15
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "warnings-cache"
+      - name: cargo check warnings
+        run: RUSTFLAGS="-D warnings" cargo check
+
+  unit-test:
+    runs-on: large-github-runner
+    timeout-minutes: 30
+    env:
+      SEISMIC_CI: 1
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: taiki-e/install-action@nextest
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "integration-test-cache"
+      - name: seismic-node test
+        # see profile.default in .config/nextest.toml for filtered tests
+        run: cargo nextest run --workspace -E '!kind(test)'
+
+  integration-test:
+    runs-on: large-github-runner
+    timeout-minutes: 30
+    env:
+      SEISMIC_CI: 1
+    steps:
+      - uses: actions/checkout@v4
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: taiki-e/install-action@nextest
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "integration-test-cache"
+      - name: seismic-node test
+        # see profile.default in .config/nextest.toml for filtered tests
+        run: cargo nextest run --workspace -E 'kind(test)'
+  
+  viem:
+    runs-on: large-github-runner
+    timeout-minutes: 30
+    env:
+      SRETH_ROOT: /home/runner/work/seismic-reth/seismic-reth
+      RETH_DATA_DIR: /home/runner/work/.seismic-reth/data
+      RETH_STATIC_FILES: /home/runner/work/.seismic-reth/static_files
+    steps:
+      - uses: actions/checkout@v4
+      - uses: oven-sh/setup-bun@v2
+        with:
+          bun-version: 1.2.5
+      - name: Clear reth files
+        run: rm -rf "$RETH_DATA_DIR" && rm -rf "$RETH_STATIC_FILES"
+      - uses: dtolnay/rust-toolchain@stable
+      - uses: Swatinem/rust-cache@v2
+        with:
+          shared-key: "viem-cache"
+      - name: seismic-reth build
+        run: cargo build --bin seismic-reth
+      - name: Install dependencies
+        run: bun install
+      - name: Run viem tests vs. reth
+        run: bun viem:test
+      - name: Remove reth files
+        run: rm -rf "$RETH_DATA_DIR" && rm -rf "$RETH_STATIC_FILES"
diff --git a/.gitignore b/.gitignore
index 00f776542..30b0b161a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -53,3 +53,10 @@ rustc-ice-*
 
 # Book sources should be able to build with the latest version
 book/sources/Cargo.lock
+
+crates/seismic/node/tmp/
+
+
+# seismic-viem tests
+node_modules
+bun.lock
diff --git a/Cargo.lock b/Cargo.lock
index 21278d66f..cb914ee25 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -62,7 +62,7 @@ dependencies = [
  "getrandom 0.2.15",
  "once_cell",
  "version_check",
- "zerocopy",
+ "zerocopy 0.7.35",
 ]
 
 [[package]]
@@ -76,9 +76,9 @@ dependencies = [
 
 [[package]]
 name = "aligned-vec"
-version = "0.6.1"
+version = "0.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e0966165eaf052580bd70eb1b32cb3d6245774c0104d1b2793e9650bf83b52a"
+checksum = "dc890384c8602f339876ded803c97ad529f3842aba97f6392b3dba0dd171769b"
 dependencies = [
  "equator",
 ]
@@ -106,9 +106,9 @@ checksum = "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923"
 
 [[package]]
 name = "alloy-chains"
-version = "0.1.48"
+version = "0.1.52"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a0161082e0edd9013d23083465cc04b20e44b7a15646d36ba7b0cdb7cd6fe18f"
+checksum = "56f15afc5993458b42739ab3b69bdb6b4c8112acd3997dbea9bc092c9517137c"
 dependencies = [
  "alloy-primitives",
  "alloy-rlp",
@@ -116,34 +116,38 @@ dependencies = [
  "num_enum",
  "proptest",
  "serde",
- "strum",
+ "strum 0.26.3",
 ]
 
 [[package]]
 name = "alloy-consensus"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8ba14856660f31807ebb26ce8f667e814c72694e1077e97ef102e326ad580f3f"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
+ "alloy-dyn-abi",
  "alloy-eips",
  "alloy-primitives",
  "alloy-rlp",
  "alloy-serde",
  "alloy-trie",
+ "anyhow",
  "arbitrary",
  "auto_impl",
  "c-kzg",
  "derive_more",
+ "jsonrpsee",
+ "k256",
  "rand 0.8.5",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
  "serde",
+ "serde_json",
  "serde_with",
 ]
 
 [[package]]
 name = "alloy-consensus-any"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28666307e76441e7af37a2b90cde7391c28112121bea59f4e0d804df8b20057e"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -156,8 +160,7 @@ dependencies = [
 [[package]]
 name = "alloy-contract"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f3510769905590b8991a8e63a5e0ab4aa72cf07a13ab5fbe23f12f4454d161da"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-dyn-abi",
  "alloy-json-abi",
@@ -170,14 +173,13 @@ dependencies = [
  "alloy-transport",
  "futures",
  "futures-util",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-dyn-abi"
 version = "0.8.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "41056bde53ae10ffbbf11618efbe1e0290859e5eab0fe9ef82ebdb62f12a866f"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
 dependencies = [
  "alloy-json-abi",
  "alloy-primitives",
@@ -188,7 +190,7 @@ dependencies = [
  "itoa",
  "serde",
  "serde_json",
- "winnow",
+ "winnow 0.6.24",
 ]
 
 [[package]]
@@ -223,9 +225,9 @@ dependencies = [
 [[package]]
 name = "alloy-eips"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "47e922d558006ba371681d484d12aa73fe673d84884f83747730af7433c0e86d"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
+ "alloy-dyn-abi",
  "alloy-eip2930",
  "alloy-eip7702",
  "alloy-primitives",
@@ -244,8 +246,7 @@ dependencies = [
 [[package]]
 name = "alloy-genesis"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5dca170827a7ca156b43588faebf9e9d27c27d0fb07cab82cfd830345e2b24f5"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-serde",
@@ -256,8 +257,7 @@ dependencies = [
 [[package]]
 name = "alloy-json-abi"
 version = "0.8.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c357da577dfb56998d01f574d81ad7a1958d248740a7981b205d69d65a7da404"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
 dependencies = [
  "alloy-primitives",
  "alloy-sol-type-parser",
@@ -268,22 +268,20 @@ dependencies = [
 [[package]]
 name = "alloy-json-rpc"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9335278f50b0273e0a187680ee742bb6b154a948adf036f448575bacc5ccb315"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-sol-types",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
 ]
 
 [[package]]
 name = "alloy-network"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ad4e6ad4230df8c4a254c20f8d6a84ab9df151bfca13f463177dbc96571cc1f8"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-consensus-any",
@@ -301,14 +299,13 @@ dependencies = [
  "futures-utils-wasm",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-network-primitives"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c4df88a2f8020801e0fefce79471d3946d39ca3311802dbbd0ecfdeee5e972e3"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -320,8 +317,7 @@ dependencies = [
 [[package]]
 name = "alloy-node-bindings"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2db5cefbc736b2b26a960dcf82279c70a03695dd11a0032a6dc27601eeb29182"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-genesis",
  "alloy-primitives",
@@ -329,7 +325,7 @@ dependencies = [
  "rand 0.8.5",
  "serde_json",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
  "url",
 ]
@@ -337,8 +333,7 @@ dependencies = [
 [[package]]
 name = "alloy-primitives"
 version = "0.8.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6259a506ab13e1d658796c31e6e39d2e2ee89243bcc505ddc613b35732e0a430"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
 dependencies = [
  "alloy-rlp",
  "arbitrary",
@@ -351,7 +346,7 @@ dependencies = [
  "getrandom 0.2.15",
  "hashbrown 0.15.2",
  "hex-literal",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "itoa",
  "k256",
  "keccak-asm",
@@ -360,7 +355,7 @@ dependencies = [
  "proptest-derive",
  "rand 0.8.5",
  "ruint",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "serde",
  "sha3",
  "tiny-keccak",
@@ -369,8 +364,7 @@ dependencies = [
 [[package]]
 name = "alloy-provider"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5115c74c037714e1b02a86f742289113afa5d494b5ea58308ba8aa378e739101"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-chains",
  "alloy-consensus",
@@ -398,9 +392,10 @@ dependencies = [
  "pin-project",
  "reqwest",
  "schnellru",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
  "url",
@@ -410,8 +405,7 @@ dependencies = [
 [[package]]
 name = "alloy-pubsub"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b073afa409698d1b9a30522565815f3bf7010e5b47b997cf399209e6110df097"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-json-rpc",
  "alloy-primitives",
@@ -422,15 +416,15 @@ dependencies = [
  "serde_json",
  "tokio",
  "tokio-stream",
- "tower 0.5.1",
+ "tower 0.5.2",
  "tracing",
 ]
 
 [[package]]
 name = "alloy-rlp"
-version = "0.3.10"
+version = "0.3.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f542548a609dca89fcd72b3b9f355928cf844d4363c5eed9c5273a3dd225e097"
+checksum = "3d6c1d995bff8d011f7cd6c81820d51825e6e06d6db73914c1630ecf544d83d6"
 dependencies = [
  "alloy-rlp-derive",
  "arrayvec",
@@ -439,20 +433,19 @@ dependencies = [
 
 [[package]]
 name = "alloy-rlp-derive"
-version = "0.3.10"
+version = "0.3.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5a833d97bf8a5f0f878daf2c8451fff7de7f9de38baa5a45d936ec718d81255a"
+checksum = "a40e1ef334153322fd878d07e86af7a529bcb86b2439525920a88eba87bcf943"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "alloy-rpc-client"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5c6a0bd0ce5660ac48e4f3bb0c7c5c3a94db287a0be94971599d83928476cbcd"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-json-rpc",
  "alloy-primitives",
@@ -467,7 +460,7 @@ dependencies = [
  "serde_json",
  "tokio",
  "tokio-stream",
- "tower 0.5.1",
+ "tower 0.5.2",
  "tracing",
  "url",
  "wasmtimer",
@@ -476,8 +469,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "374ac12e35bb90ebccd86e7c943ddba9590149a6e35cc4d9cd860d6635fd1018"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types-engine",
@@ -489,8 +481,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-admin"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "934b3865d0f9695dcc396e853e2197171f443cc46b7d3390c1e53a4d0198232b"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-genesis",
  "alloy-primitives",
@@ -501,8 +492,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-anvil"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f0b85a5f5f5d99047544f4ec31330ee15121dcb8ef5af3e791a5207e6b92b05b"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types-eth",
@@ -513,8 +503,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-any"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ea98f81bcd759dbfa3601565f9d7a02220d8ef1d294ec955948b90aaafbfd857"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus-any",
  "alloy-rpc-types-eth",
@@ -524,8 +513,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-beacon"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6e13e94be8f6f5cb735e604f9db436430bf3773fdd41db7221edaa58c07c4c8a"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-eips",
  "alloy-primitives",
@@ -533,14 +521,13 @@ dependencies = [
  "alloy-serde",
  "serde",
  "serde_with",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-rpc-types-debug"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4fd14f68a482e67dfba52d404dfff1d3b0d9fc3b4775bd0923f3175d7661c3bd"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "serde",
@@ -549,8 +536,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-engine"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9ca5898f753ff0d15a0dc955c169523d8fee57e05bb5a38a398b3451b0b988be"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -564,14 +550,13 @@ dependencies = [
  "jsonwebtoken",
  "rand 0.8.5",
  "serde",
- "strum",
+ "strum 0.26.3",
 ]
 
 [[package]]
 name = "alloy-rpc-types-eth"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e518b0a7771e00728f18be0708f828b18a1cfc542a7153bef630966a26388e0"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-consensus-any",
@@ -592,8 +577,7 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-mev"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e58dc4ff16cda220e28e24287024f68e48d5c205b3804b13adad3f79debf4cb8"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-eips",
  "alloy-primitives",
@@ -606,22 +590,20 @@ dependencies = [
 [[package]]
 name = "alloy-rpc-types-trace"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cdff93fa38be6982f8613a060e18fa0a37ce440d69ed3b7f37c6c69036ce1c53"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types-eth",
  "alloy-serde",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-rpc-types-txpool"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2d9dc647985db41fd164e807577134da1179b9f5ba0959f8698d6587eaa568f5"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types-eth",
@@ -632,11 +614,11 @@ dependencies = [
 [[package]]
 name = "alloy-serde"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ed3dc8d4a08ffc90c1381d39a4afa2227668259a42c97ab6eecf51cbd82a8761"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "arbitrary",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
  "serde",
  "serde_json",
 ]
@@ -644,22 +626,20 @@ dependencies = [
 [[package]]
 name = "alloy-signer"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16188684100f6e0f2a2b949968fe3007749c5be431549064a1bce4e7b3a196a9"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-primitives",
  "async-trait",
  "auto_impl",
  "elliptic-curve",
  "k256",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-signer-local"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e2184dab8c9493ab3e1c9f6bd3bdb563ed322b79023d81531935e84a4fdf7cf1"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-consensus",
  "alloy-network",
@@ -670,75 +650,119 @@ dependencies = [
  "coins-bip39",
  "k256",
  "rand 0.8.5",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "alloy-sol-macro"
 version = "0.8.15"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
+dependencies = [
+ "alloy-sol-macro-expander 0.8.15",
+ "alloy-sol-macro-input 0.8.15",
+ "proc-macro-error2",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "alloy-sol-macro"
+version = "0.8.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d9d64f851d95619233f74b310f12bcf16e0cbc27ee3762b6115c14a84809280a"
+checksum = "3637022e781bc73a9e300689cd91105a0e6be00391dd4e2110a71cc7e9f20a94"
 dependencies = [
- "alloy-sol-macro-expander",
- "alloy-sol-macro-input",
+ "alloy-sol-macro-expander 0.8.23",
+ "alloy-sol-macro-input 0.8.23",
  "proc-macro-error2",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "alloy-sol-macro-expander"
 version = "0.8.15"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
+dependencies = [
+ "alloy-sol-macro-input 0.8.15",
+ "const-hex",
+ "heck 0.5.0",
+ "indexmap 2.8.0",
+ "proc-macro-error2",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+ "syn-solidity 0.8.15",
+ "tiny-keccak",
+]
+
+[[package]]
+name = "alloy-sol-macro-expander"
+version = "0.8.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6bf7ed1574b699f48bf17caab4e6e54c6d12bc3c006ab33d58b1e227c1c3559f"
+checksum = "3b9bd22d0bba90e40f40c625c33d39afb7d62b22192476a2ce1dcf8409dce880"
 dependencies = [
- "alloy-sol-macro-input",
+ "alloy-sol-macro-input 0.8.23",
  "const-hex",
- "heck",
- "indexmap 2.7.0",
+ "heck 0.5.0",
+ "indexmap 2.8.0",
  "proc-macro-error2",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
- "syn-solidity",
+ "syn 2.0.100",
+ "syn-solidity 0.8.23",
  "tiny-keccak",
 ]
 
 [[package]]
 name = "alloy-sol-macro-input"
 version = "0.8.15"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
+dependencies = [
+ "alloy-json-abi",
+ "const-hex",
+ "dunce",
+ "heck 0.5.0",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+ "syn-solidity 0.8.15",
+]
+
+[[package]]
+name = "alloy-sol-macro-input"
+version = "0.8.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c02997ccef5f34f9c099277d4145f183b422938ed5322dc57a089fe9b9ad9ee"
+checksum = "05ae4646e8123ec2fd10f9c22e361ffe4365c42811431829c2eabae528546bcc"
 dependencies = [
  "const-hex",
  "dunce",
- "heck",
+ "heck 0.5.0",
+ "macro-string",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
- "syn-solidity",
+ "syn 2.0.100",
+ "syn-solidity 0.8.23",
 ]
 
 [[package]]
 name = "alloy-sol-type-parser"
 version = "0.8.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ce13ff37285b0870d0a0746992a4ae48efaf34b766ae4c2640fa15e5305f8e73"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
 dependencies = [
  "serde",
- "winnow",
+ "winnow 0.6.24",
 ]
 
 [[package]]
 name = "alloy-sol-types"
 version = "0.8.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1174cafd6c6d810711b4e00383037bdb458efc4fe3dbafafa16567e0320c54d8"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
 dependencies = [
  "alloy-json-abi",
  "alloy-primitives",
- "alloy-sol-macro",
+ "alloy-sol-macro 0.8.15",
  "const-hex",
  "serde",
 ]
@@ -746,8 +770,7 @@ dependencies = [
 [[package]]
 name = "alloy-transport"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "628be5b9b75e4f4c4f2a71d985bbaca4f23de356dc83f1625454c505f5eef4df"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-json-rpc",
  "base64 0.22.1",
@@ -755,9 +778,9 @@ dependencies = [
  "futures-utils-wasm",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
- "tower 0.5.1",
+ "tower 0.5.2",
  "tracing",
  "url",
  "wasmtimer",
@@ -766,14 +789,13 @@ dependencies = [
 [[package]]
 name = "alloy-transport-http"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4e24412cf72f79c95cd9b1d9482e3a31f9d94c24b43c4b3b710cc8d4341eaab0"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-json-rpc",
  "alloy-transport",
  "reqwest",
  "serde_json",
- "tower 0.5.1",
+ "tower 0.5.2",
  "tracing",
  "url",
 ]
@@ -781,8 +803,7 @@ dependencies = [
 [[package]]
 name = "alloy-transport-ipc"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0577a1f67ce70ece3f2b27cf1011da7222ef0a5701f7dcb558e5356278eeb531"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-json-rpc",
  "alloy-pubsub",
@@ -800,17 +821,16 @@ dependencies = [
 [[package]]
 name = "alloy-transport-ws"
 version = "0.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1ca46272d17f9647fdb56080ed26c72b3ea5078416831130f5ed46f3b4be0ed6"
+source = "git+https://github.com/SeismicSystems/seismic-alloy.git?rev=23845ba#23845baa7e54d33ae02121fae59d134822eaadc0"
 dependencies = [
  "alloy-pubsub",
  "alloy-transport",
  "futures",
- "http",
+ "http 1.3.1",
  "rustls",
  "serde_json",
  "tokio",
- "tokio-tungstenite",
+ "tokio-tungstenite 0.24.0",
  "tracing",
  "ws_stream_wasm",
 ]
@@ -897,19 +917,20 @@ dependencies = [
 
 [[package]]
 name = "anstyle-wincon"
-version = "3.0.6"
+version = "3.0.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125"
+checksum = "ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e"
 dependencies = [
  "anstyle",
+ "once_cell",
  "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "anyhow"
-version = "1.0.94"
+version = "1.0.97"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c1fd03a028ef38ba2276dce7e33fcd6369c158a1bca17946c4b1b701891c1ff7"
+checksum = "dcfed56ad506cb2c684a14971b8861fdc3baaaae314b9e5f9bb532cbe3ba7a4f"
 
 [[package]]
 name = "aquamarine"
@@ -922,7 +943,7 @@ dependencies = [
  "proc-macro-error2",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1079,6 +1100,22 @@ version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "155a5a185e42c6b77ac7b88a15143d930a9e9727a5b7b77eed417404ab15c247"
 
+[[package]]
+name = "assert_cmd"
+version = "2.0.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc1835b7f27878de8525dc71410b5a31cdcc5f230aed5ba5df968e09c201b23d"
+dependencies = [
+ "anstyle",
+ "bstr",
+ "doc-comment",
+ "libc",
+ "predicates",
+ "predicates-core",
+ "predicates-tree",
+ "wait-timeout",
+]
+
 [[package]]
 name = "assert_matches"
 version = "1.5.0"
@@ -1098,9 +1135,9 @@ dependencies = [
 
 [[package]]
 name = "async-compression"
-version = "0.4.18"
+version = "0.4.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "df895a515f70646414f4b45c0b79082783b80552b373a68283012928df56f522"
+checksum = "c0cf008e5e1a9e9e22a7d3c9a4992e21a350290069e36d8fb72304ed17e8f2d2"
 dependencies = [
  "brotli",
  "flate2",
@@ -1120,7 +1157,7 @@ checksum = "3b43422f69d8ff38f95f1b2bb76517c91589a924d1559a0e935d7c8ce0274c11"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1156,18 +1193,18 @@ checksum = "c7c24de15d275a1ecfd47a380fb4d5ec9bfe0933f309ed5e705b775596a3574d"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "async-trait"
-version = "0.1.83"
+version = "0.1.88"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "721cae7de5c34fbb2acd27e21e6d2cf7b886dce0c27388d46c4e6c47ea4318dd"
+checksum = "e539d3fca749fcee5236ab05e93a52867dd549cc157c8cb7f99595f3cedffdb5"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1189,9 +1226,9 @@ checksum = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"
 
 [[package]]
 name = "aurora-engine-modexp"
-version = "1.1.0"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0aef7712851e524f35fbbb74fa6599c5cd8692056a1c36f9ca0d2001b670e7e5"
+checksum = "518bc5745a6264b5fd7b09dffb9667e400ee9e2bbe18555fac75e1fe9afa0df9"
 dependencies = [
  "hex",
  "num",
@@ -1199,13 +1236,13 @@ dependencies = [
 
 [[package]]
 name = "auto_impl"
-version = "1.2.0"
+version = "1.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c87f3f15e7794432337fc718554eaa4dc8f04c9677a950ffe366f20a162ae42"
+checksum = "e12882f59de5360c748c4cbf569a042d5fb0eb515f7bea9c1f470b47f6ffbd73"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1216,11 +1253,11 @@ checksum = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26"
 
 [[package]]
 name = "backon"
-version = "1.3.0"
+version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ba5289ec98f68f28dd809fd601059e6aa908bb8f6108620930828283d4ee23d7"
+checksum = "49fef586913a57ff189f25c9b3d034356a5bf6b3fa9a7f067588fe1698ba1f5d"
 dependencies = [
- "fastrand 2.2.0",
+ "fastrand 2.3.0",
  "tokio",
 ]
 
@@ -1271,9 +1308,9 @@ checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
 
 [[package]]
 name = "base64ct"
-version = "1.6.0"
+version = "1.7.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b"
+checksum = "89e25b6adfb930f02d1981565a6e5d9c547ac15a96606256d3b59040e5cd4ca3"
 
 [[package]]
 name = "bech32"
@@ -1302,7 +1339,7 @@ version = "0.70.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f49d8fed880d473ea71efb9bf597651e77201bdd4893efe54c9e5d65ae04ce6f"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "cexpr",
  "clang-sys",
  "itertools 0.13.0",
@@ -1311,23 +1348,23 @@ dependencies = [
  "regex",
  "rustc-hash 1.1.0",
  "shlex",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "bit-set"
-version = "0.5.3"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1"
+checksum = "08807e080ed7f9d5433fa9b275196cfc35414f66a0c79d864dc51a0d825231a3"
 dependencies = [
  "bit-vec",
 ]
 
 [[package]]
 name = "bit-vec"
-version = "0.6.3"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"
+checksum = "5e764a1d40d510daf35e07be9eb06e75770908c27d411ee6c92109c9840eaaf7"
 
 [[package]]
 name = "bitflags"
@@ -1337,9 +1374,9 @@ checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
 [[package]]
 name = "bitflags"
-version = "2.6.0"
+version = "2.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de"
+checksum = "5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd"
 dependencies = [
  "arbitrary",
  "serde",
@@ -1387,9 +1424,9 @@ dependencies = [
 
 [[package]]
 name = "blst"
-version = "0.3.13"
+version = "0.3.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4378725facc195f1a538864863f6de233b500a8862747e7f165078a419d5e874"
+checksum = "47c79a94619fade3c0b887670333513a67ac28a6a7e653eb260bf0d4103db38d"
 dependencies = [
  "cc",
  "glob",
@@ -1403,12 +1440,12 @@ version = "0.19.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3a69ee3a749ea36d4e56d92941e7b25076b493d4917c3d155b6cf369e23547d9"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "boa_interner",
  "boa_macros",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "num-bigint",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
 ]
 
 [[package]]
@@ -1418,7 +1455,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "06e4559b35b80ceb2e6328481c0eca9a24506663ea33ee1e279be6b5b618b25c"
 dependencies = [
  "arrayvec",
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "boa_ast",
  "boa_gc",
  "boa_interner",
@@ -1432,7 +1469,7 @@ dependencies = [
  "fast-float",
  "hashbrown 0.14.5",
  "icu_normalizer",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "intrusive-collections",
  "itertools 0.13.0",
  "num-bigint",
@@ -1444,7 +1481,7 @@ dependencies = [
  "portable-atomic",
  "rand 0.8.5",
  "regress",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "ryu-js",
  "serde",
  "serde_json",
@@ -1478,10 +1515,10 @@ dependencies = [
  "boa_gc",
  "boa_macros",
  "hashbrown 0.14.5",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "once_cell",
  "phf",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "static_assertions",
 ]
 
@@ -1493,7 +1530,7 @@ checksum = "240f4126219a83519bad05c9a40bfc0303921eeb571fc2d7e44c17ffac99d3f1"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "synstructure",
 ]
 
@@ -1503,7 +1540,7 @@ version = "0.19.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "62b59dc05bf1dc019b11478a92986f590cff43fced4d20e866eefb913493e91c"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "boa_ast",
  "boa_interner",
  "boa_macros",
@@ -1513,7 +1550,7 @@ dependencies = [
  "num-bigint",
  "num-traits",
  "regress",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
 ]
 
 [[package]]
@@ -1530,7 +1567,7 @@ checksum = "ae85205289bab1f2c7c8a30ddf0541cf89ba2ff7dbd144feef50bbfa664288d4"
 dependencies = [
  "fast-float",
  "paste",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "sptr",
  "static_assertions",
 ]
@@ -1557,9 +1594,9 @@ dependencies = [
 
 [[package]]
 name = "brotli-decompressor"
-version = "4.0.1"
+version = "4.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9a45bd2e4095a8b518033b128020dd4a55aab1c0a381ba4404a472630f4bc362"
+checksum = "74fa05ad7d803d413eb8380983b092cbbaf9a85f151b871360e7b00cd7060b37"
 dependencies = [
  "alloc-no-stdlib",
  "alloc-stdlib",
@@ -1577,9 +1614,9 @@ dependencies = [
 
 [[package]]
 name = "bstr"
-version = "1.11.0"
+version = "1.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1a68f1f47cdf0ec8ee4b941b2eee2a80cb796db73118c0dd09ac63fbe405be22"
+checksum = "531a9155a481e2ee699d4f98f43c0ca4ff8ee1bfd55c31e9e98fb29d2b176fe0"
 dependencies = [
  "memchr",
  "regex-automata 0.4.9",
@@ -1588,34 +1625,34 @@ dependencies = [
 
 [[package]]
 name = "bumpalo"
-version = "3.16.0"
+version = "3.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c"
+checksum = "1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf"
 
 [[package]]
 name = "byte-slice-cast"
-version = "1.2.2"
+version = "1.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c"
+checksum = "7575182f7272186991736b70173b0ea045398f984bf5ebbb3804736ce1330c9d"
 
 [[package]]
 name = "bytemuck"
-version = "1.20.0"
+version = "1.22.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8b37c88a63ffd85d15b406896cc343916d7cf57838a847b3a6f2ca5d39a5695a"
+checksum = "b6b1fc10dbac614ebc03540c9dbd60e83887fda27794998c6528f1782047d540"
 dependencies = [
  "bytemuck_derive",
 ]
 
 [[package]]
 name = "bytemuck_derive"
-version = "1.8.0"
+version = "1.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bcfcc3cd946cb52f0bbfdbbcfa2f4e24f75ebb6c0e1002f7c25904fada18b9ec"
+checksum = "3fa76293b4f7bb636ab88fd78228235b5248b4d05cc589aed610f954af5d7c7a"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1626,9 +1663,9 @@ checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"
 
 [[package]]
 name = "bytes"
-version = "1.9.0"
+version = "1.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "325918d6fe32f23b19878fe4b34794ae41fc19ddbe53b10571a4874d44ffd39b"
+checksum = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a"
 dependencies = [
  "serde",
 ]
@@ -1674,7 +1711,7 @@ checksum = "2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037"
 dependencies = [
  "camino",
  "cargo-platform",
- "semver 1.0.23",
+ "semver 1.0.26",
  "serde",
  "serde_json",
  "thiserror 1.0.69",
@@ -1703,9 +1740,9 @@ dependencies = [
 
 [[package]]
 name = "cc"
-version = "1.2.3"
+version = "1.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "27f657647bcff5394bf56c7317665bbf790a137a50eaaa5c6bfbb9e27a518f2d"
+checksum = "be714c154be609ec7f5dad223a33bf1482fff90472de28f7362806e6d4832b8c"
 dependencies = [
  "jobserver",
  "libc",
@@ -1741,9 +1778,9 @@ checksum = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724"
 
 [[package]]
 name = "chrono"
-version = "0.4.38"
+version = "0.4.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401"
+checksum = "1a7964611d71df112cb1730f2ee67324fcf4d0fc6606acbbe9bfe06df124637c"
 dependencies = [
  "android-tzdata",
  "iana-time-zone",
@@ -1751,7 +1788,7 @@ dependencies = [
  "num-traits",
  "serde",
  "wasm-bindgen",
- "windows-targets 0.52.6",
+ "windows-link",
 ]
 
 [[package]]
@@ -1804,9 +1841,9 @@ dependencies = [
 
 [[package]]
 name = "clap"
-version = "4.5.23"
+version = "4.5.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3135e7ec2ef7b10c6ed8950f0f792ed96ee093fa088608f1c76e569722700c84"
+checksum = "6088f3ae8c3608d19260cd7445411865a485688711b78b5be70d78cd96136f83"
 dependencies = [
  "clap_builder",
  "clap_derive",
@@ -1814,9 +1851,9 @@ dependencies = [
 
 [[package]]
 name = "clap_builder"
-version = "4.5.23"
+version = "4.5.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "30582fc632330df2bd26877bde0c1f4470d57c582bbc070376afcd04d8cb4838"
+checksum = "22a7ef7f676155edfb82daa97f99441f3ebf4a58d5e32f295a56259f1b6facc8"
 dependencies = [
  "anstream",
  "anstyle",
@@ -1826,14 +1863,14 @@ dependencies = [
 
 [[package]]
 name = "clap_derive"
-version = "4.5.18"
+version = "4.5.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4ac6a0c7b1a9e9a5186361f67dfa1b88213572f427fb9ab038efb2bd8c582dab"
+checksum = "09176aae279615badda0765c0c0b3f6ed53f4709118af73cf4655d85d1530cd7"
 dependencies = [
- "heck",
+ "heck 0.5.0",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -1911,21 +1948,20 @@ dependencies = [
 
 [[package]]
 name = "comfy-table"
-version = "7.1.3"
+version = "7.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "24f165e7b643266ea80cb858aed492ad9280e3e05ce24d4a99d7d7b889b6a4d9"
+checksum = "4a65ebfec4fb190b6f90e944a817d60499ee0744e582530e2c9900a22e591d9a"
 dependencies = [
  "crossterm",
- "strum",
- "strum_macros",
+ "unicode-segmentation",
  "unicode-width 0.2.0",
 ]
 
 [[package]]
 name = "compact_str"
-version = "0.8.0"
+version = "0.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6050c3a16ddab2e412160b31f2c871015704239bca62f72f6e5f0be631d3f644"
+checksum = "3b79c4069c6cad78e2e0cdfcbd26275770669fb39fd308a752dc110e83b9af32"
 dependencies = [
  "castaway",
  "cfg-if",
@@ -1955,14 +1991,14 @@ dependencies = [
 
 [[package]]
 name = "console"
-version = "0.15.8"
+version = "0.15.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb"
+checksum = "054ccb5b10f9f2cbf51eb355ca1d05c2d279ce1804688d0db74b4733a5aeafd8"
 dependencies = [
  "encode_unicode",
- "lazy_static",
  "libc",
- "windows-sys 0.52.0",
+ "once_cell",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -2014,16 +2050,6 @@ dependencies = [
  "unicode-segmentation",
 ]
 
-[[package]]
-name = "core-foundation"
-version = "0.9.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"
-dependencies = [
- "core-foundation-sys",
- "libc",
-]
-
 [[package]]
 name = "core-foundation"
 version = "0.10.0"
@@ -2060,9 +2086,9 @@ dependencies = [
 
 [[package]]
 name = "cpufeatures"
-version = "0.2.16"
+version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16b80225097f2e5ae4e7179dd2266824648f3e2f49d9134d584b76389d31c4c3"
+checksum = "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280"
 dependencies = [
  "libc",
 ]
@@ -2137,18 +2163,18 @@ checksum = "790eea4361631c5e7d22598ecd5723ff611904e3344ce8720784c93e3d83d40b"
 
 [[package]]
 name = "crossbeam-channel"
-version = "0.5.13"
+version = "0.5.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2"
+checksum = "06ba6d68e24814cb8de6bb986db8222d3a027d15872cabc0d18817bc3c0e4471"
 dependencies = [
  "crossbeam-utils",
 ]
 
 [[package]]
 name = "crossbeam-deque"
-version = "0.8.5"
+version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d"
+checksum = "9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51"
 dependencies = [
  "crossbeam-epoch",
  "crossbeam-utils",
@@ -2165,9 +2191,9 @@ dependencies = [
 
 [[package]]
 name = "crossbeam-utils"
-version = "0.8.20"
+version = "0.8.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80"
+checksum = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28"
 
 [[package]]
 name = "crossterm"
@@ -2175,11 +2201,11 @@ version = "0.28.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "829d955a0bb380ef178a640b91779e3987da38c9aea133b20614cfed8cdea9c6"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "crossterm_winapi",
  "mio 1.0.3",
  "parking_lot",
- "rustix",
+ "rustix 0.38.44",
  "signal-hook",
  "signal-hook-mio",
  "winapi",
@@ -2196,9 +2222,9 @@ dependencies = [
 
 [[package]]
 name = "crunchy"
-version = "0.2.2"
+version = "0.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7"
+checksum = "43da5946c66ffcc7745f48db692ffbb10a83bfe0afd96235c5c2a4fb23994929"
 
 [[package]]
 name = "crypto-bigint"
@@ -2247,9 +2273,9 @@ dependencies = [
 
 [[package]]
 name = "csv-core"
-version = "0.1.11"
+version = "0.1.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5efa2b3d7902f4b634a20cae3c9c4e6209dc4779feb6863329607560143efa70"
+checksum = "7d02f3b0da4c6504f86e9cd789d8dbafab48c2321be74e9987593de5a894d93d"
 dependencies = [
  "memchr",
 ]
@@ -2287,7 +2313,7 @@ checksum = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2311,7 +2337,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "strsim",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2322,7 +2348,7 @@ checksum = "d336a2a514f6ccccaa3e09b02d41d35330c07ddf03a62165fcec10bb561c7806"
 dependencies = [
  "darling_core",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2355,15 +2381,15 @@ dependencies = [
 
 [[package]]
 name = "data-encoding"
-version = "2.6.0"
+version = "2.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2"
+checksum = "575f75dfd25738df5b91b8e43e14d44bda14637a58fae779fd2b064f8bf3e010"
 
 [[package]]
 name = "data-encoding-macro"
-version = "0.1.15"
+version = "0.1.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f1559b6cba622276d6d63706db152618eeb15b89b3e4041446b05876e352e639"
+checksum = "9f9724adfcf41f45bf652b3995837669d73c4d49a1b5ac1ff82905ac7d9b5558"
 dependencies = [
  "data-encoding",
  "data-encoding-macro-internal",
@@ -2371,12 +2397,12 @@ dependencies = [
 
 [[package]]
 name = "data-encoding-macro-internal"
-version = "0.1.13"
+version = "0.1.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "332d754c0af53bc87c108fed664d121ecf59207ec4196041f04d6ab9002ad33f"
+checksum = "18e4fdb82bd54a12e42fb58a800dcae6b9e13982238ce2296dc3570b92148e1f"
 dependencies = [
  "data-encoding",
- "syn 1.0.109",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2396,9 +2422,9 @@ dependencies = [
 
 [[package]]
 name = "delay_map"
-version = "0.4.0"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "df941644b671f05f59433e481ba0d31ac10e3667de725236a4c0d587c496fba1"
+checksum = "88e365f083a5cb5972d50ce8b1b2c9f125dc5ec0f50c0248cfb568ae59efcf0b"
 dependencies = [
  "futures",
  "tokio",
@@ -2417,9 +2443,9 @@ dependencies = [
 
 [[package]]
 name = "deranged"
-version = "0.3.11"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4"
+checksum = "9c9e6a11ca8224451684bc0d7d5a7adbf8f2fd6887261a1cfc3c0432f9d4068e"
 dependencies = [
  "powerfmt",
  "serde",
@@ -2444,7 +2470,7 @@ checksum = "30542c1ad912e0e3d22a1935c290e12e8a29d704a420177a31faad4a601a0800"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2465,7 +2491,7 @@ dependencies = [
  "convert_case",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "unicode-xid",
 ]
 
@@ -2475,6 +2501,12 @@ version = "0.1.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8"
 
+[[package]]
+name = "difflib"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8"
+
 [[package]]
 name = "digest"
 version = "0.9.0"
@@ -2579,9 +2611,15 @@ checksum = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
+[[package]]
+name = "doc-comment"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10"
+
 [[package]]
 name = "doctest-file"
 version = "1.0.0"
@@ -2602,9 +2640,9 @@ checksum = "92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813"
 
 [[package]]
 name = "dyn-clone"
-version = "1.0.17"
+version = "1.0.19"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125"
+checksum = "1c7a8fb8a9fbf66c1f703fe16184d10ca0ee9d23be5b4436400408ba54a95005"
 
 [[package]]
 name = "ecdsa"
@@ -2666,15 +2704,15 @@ dependencies = [
  "revm",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "walkdir",
 ]
 
 [[package]]
 name = "either"
-version = "1.13.0"
+version = "1.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0"
+checksum = "48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719"
 
 [[package]]
 name = "elliptic-curve"
@@ -2698,9 +2736,18 @@ dependencies = [
 
 [[package]]
 name = "encode_unicode"
-version = "0.3.6"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34aa73646ffb006b8f5147f3dc182bd4bcb190227ce861fc4a4844bf8e3cb2c0"
+
+[[package]]
+name = "encoding_rs"
+version = "0.8.35"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f"
+checksum = "75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3"
+dependencies = [
+ "cfg-if",
+]
 
 [[package]]
 name = "enr"
@@ -2728,10 +2775,10 @@ version = "0.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a1e6a265c649f3f5979b601d26f1d05ada116434c87741c9493cb56218f76cbc"
 dependencies = [
- "heck",
+ "heck 0.5.0",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2742,34 +2789,34 @@ checksum = "2f9ed6b3789237c8a0c1c505af1c7eb2c560df6186f01b098c3a1064ea532f38"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "equator"
-version = "0.2.2"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c35da53b5a021d2484a7cc49b2ac7f2d840f8236a286f84202369bd338d761ea"
+checksum = "4711b213838dfee0117e3be6ac926007d7f433d7bbe33595975d4190cb07e6fc"
 dependencies = [
  "equator-macro",
 ]
 
 [[package]]
 name = "equator-macro"
-version = "0.2.1"
+version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3bf679796c0322556351f287a51b49e48f7c4986e727b5dd78c972d30e2e16cc"
+checksum = "44f23cf4b44bfce11a86ace86f8a73ffdec849c9fd00a386a53d278bd9e81fb3"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "equivalent"
-version = "1.0.1"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5"
+checksum = "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f"
 
 [[package]]
 name = "errno"
@@ -2796,9 +2843,9 @@ dependencies = [
 
 [[package]]
 name = "ethereum_ssz"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "036c84bd29bff35e29bbee3c8fc0e2fb95db12b6f2f3cae82a827fbc97256f3a"
+checksum = "86da3096d1304f5f28476ce383005385459afeaf0eea08592b65ddbc9b258d16"
 dependencies = [
  "alloy-primitives",
  "ethereum_serde_utils",
@@ -2811,14 +2858,14 @@ dependencies = [
 
 [[package]]
 name = "ethereum_ssz_derive"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9dc8e67e1f770f5aa4c2c2069aaaf9daee7ac21bed357a71b911b37a58966cfb"
+checksum = "d832a5c38eba0e7ad92592f7a22d693954637fbb332b4f669590d66a5c3183e5"
 dependencies = [
  "darling",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -2842,7 +2889,7 @@ dependencies = [
  "reth-node-ethereum",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -2883,7 +2930,7 @@ version = "0.0.0"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
- "alloy-sol-macro",
+ "alloy-sol-macro 0.8.23",
  "alloy-sol-types",
  "eyre",
  "reth",
@@ -2930,7 +2977,7 @@ dependencies = [
  "reth-tracing",
  "reth-trie-db",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
 ]
 
@@ -2944,6 +2991,7 @@ dependencies = [
  "eyre",
  "reth",
  "reth-chainspec",
+ "reth-enclave",
  "reth-evm-ethereum",
  "reth-node-api",
  "reth-node-core",
@@ -3133,6 +3181,7 @@ dependencies = [
  "parking_lot",
  "reth",
  "reth-chainspec",
+ "reth-enclave",
  "reth-node-api",
  "reth-node-core",
  "reth-node-ethereum",
@@ -3181,9 +3230,9 @@ dependencies = [
 
 [[package]]
 name = "fastrand"
-version = "2.2.0"
+version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "486f806e73c5707928240ddc295403b1b93c96a02038563881c4a2fd84b81ac4"
+checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
 
 [[package]]
 name = "fastrlp"
@@ -3196,6 +3245,17 @@ dependencies = [
  "bytes",
 ]
 
+[[package]]
+name = "fastrlp"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ce8dba4714ef14b8274c371879b175aa55b16b30f269663f19d576f380018dc4"
+dependencies = [
+ "arrayvec",
+ "auto_impl",
+ "bytes",
+]
+
 [[package]]
 name = "fdlimit"
 version = "0.3.0"
@@ -3208,9 +3268,9 @@ dependencies = [
 
 [[package]]
 name = "ff"
-version = "0.13.0"
+version = "0.13.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449"
+checksum = "c0b50bfb653653f9ca9095b427bed08ab8d75a137839d9ad64eb11810d5b6393"
 dependencies = [
  "rand_core 0.6.4",
  "subtle",
@@ -3260,9 +3320,9 @@ dependencies = [
 
 [[package]]
 name = "flate2"
-version = "1.0.35"
+version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c936bfdafb507ebbf50b8074c54fa31c5be9a1e7e5f467dd659697041407d07c"
+checksum = "11faaf5a5236997af9848be0bef4db95824b1d534ebc64d0f0c6cf3e67bd38dc"
 dependencies = [
  "crc32fast",
  "miniz_oxide",
@@ -3276,9 +3336,9 @@ checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
 
 [[package]]
 name = "foldhash"
-version = "0.1.3"
+version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f81ec6369c545a7d40e4589b5597581fa1c441fe1cce96dd1de43159910a36a2"
+checksum = "d9c4f5dac5e15c24eb999c26181a6ca40b39fe946cbe4c263c7209467bc83af2"
 
 [[package]]
 name = "form_urlencoded"
@@ -3381,7 +3441,7 @@ checksum = "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -3479,6 +3539,30 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "getrandom"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0"
+dependencies = [
+ "cfg-if",
+ "js-sys",
+ "libc",
+ "r-efi",
+ "wasi 0.14.2+wasi-0.2.4",
+ "wasm-bindgen",
+]
+
+[[package]]
+name = "getrandom_or_panic"
+version = "0.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9"
+dependencies = [
+ "rand 0.8.5",
+ "rand_core 0.6.4",
+]
+
 [[package]]
 name = "ghash"
 version = "0.5.1"
@@ -3497,9 +3581,9 @@ checksum = "07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f"
 
 [[package]]
 name = "glob"
-version = "0.3.1"
+version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b"
+checksum = "a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2"
 
 [[package]]
 name = "gloo-net"
@@ -3511,7 +3595,7 @@ dependencies = [
  "futures-core",
  "futures-sink",
  "gloo-utils",
- "http",
+ "http 1.3.1",
  "js-sys",
  "pin-project",
  "serde",
@@ -3560,17 +3644,36 @@ dependencies = [
 
 [[package]]
 name = "h2"
-version = "0.4.7"
+version = "0.3.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8"
+dependencies = [
+ "bytes",
+ "fnv",
+ "futures-core",
+ "futures-sink",
+ "futures-util",
+ "http 0.2.12",
+ "indexmap 2.8.0",
+ "slab",
+ "tokio",
+ "tokio-util",
+ "tracing",
+]
+
+[[package]]
+name = "h2"
+version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ccae279728d634d083c00f6099cb58f01cc99c145b84b8be2f6c74618d79922e"
+checksum = "5017294ff4bb30944501348f6f8e42e6ad28f42c8bbef7a74029aff064a4e3c2"
 dependencies = [
  "atomic-waker",
  "bytes",
  "fnv",
  "futures-core",
  "futures-sink",
- "http",
- "indexmap 2.7.0",
+ "http 1.3.1",
+ "indexmap 2.8.0",
  "slab",
  "tokio",
  "tokio-util",
@@ -3579,9 +3682,9 @@ dependencies = [
 
 [[package]]
 name = "half"
-version = "2.4.1"
+version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888"
+checksum = "7db2ff139bba50379da6aa0766b52fdcb62cb5b263009b09ed58ba604e14bbd1"
 dependencies = [
  "cfg-if",
  "crunchy",
@@ -3612,7 +3715,6 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"
 dependencies = [
  "ahash",
- "allocator-api2",
 ]
 
 [[package]]
@@ -3646,6 +3748,36 @@ dependencies = [
  "num-traits",
 ]
 
+[[package]]
+name = "headers"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "06683b93020a07e3dbcf5f8c0f6d40080d725bea7936fc01ad345c01b97dc270"
+dependencies = [
+ "base64 0.21.7",
+ "bytes",
+ "headers-core",
+ "http 0.2.12",
+ "httpdate",
+ "mime",
+ "sha1",
+]
+
+[[package]]
+name = "headers-core"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e7f66481bfee273957b1f20485a4ff3362987f85b2c236580d81b4eb7a326429"
+dependencies = [
+ "http 0.2.12",
+]
+
+[[package]]
+name = "heck"
+version = "0.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8"
+
 [[package]]
 name = "heck"
 version = "0.5.0"
@@ -3660,9 +3792,9 @@ checksum = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024"
 
 [[package]]
 name = "hermit-abi"
-version = "0.4.0"
+version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc"
+checksum = "fbd780fe5cc30f81464441920d82ac8740e2e46b29a6fad543ddd075229ce37e"
 
 [[package]]
 name = "hex"
@@ -3681,9 +3813,9 @@ checksum = "6fe2267d4ed49bc07b63801559be28c718ea06c4738b7a03c94df7386d2cde46"
 
 [[package]]
 name = "hickory-proto"
-version = "0.25.0-alpha.4"
+version = "0.25.0-alpha.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d063c0692ee669aa6d261988aa19ca5510f1cc40e4f211024f50c888499a35d7"
+checksum = "1d00147af6310f4392a31680db52a3ed45a2e0f68eb18e8c3fe5537ecc96d9e2"
 dependencies = [
  "async-recursion",
  "async-trait",
@@ -3696,9 +3828,9 @@ dependencies = [
  "idna",
  "ipnet",
  "once_cell",
- "rand 0.8.5",
+ "rand 0.9.0",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tinyvec",
  "tokio",
  "tracing",
@@ -3707,9 +3839,9 @@ dependencies = [
 
 [[package]]
 name = "hickory-resolver"
-version = "0.25.0-alpha.4"
+version = "0.25.0-alpha.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "42bc352e4412fb657e795f79b4efcf2bd60b59ee5ca0187f3554194cd1107a27"
+checksum = "5762f69ebdbd4ddb2e975cd24690bf21fe6b2604039189c26acddbc427f12887"
 dependencies = [
  "cfg-if",
  "futures-util",
@@ -3718,11 +3850,11 @@ dependencies = [
  "moka",
  "once_cell",
  "parking_lot",
- "rand 0.8.5",
+ "rand 0.9.0",
  "resolv-conf",
  "serde",
  "smallvec",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -3768,20 +3900,20 @@ dependencies = [
 
 [[package]]
 name = "hostname"
-version = "0.3.1"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c731c3e10504cc8ed35cfe2f1db4c9274c3d35fa486e3b31df46f068ef3e867"
+checksum = "f9c7c7c8ac16c798734b8a24560c1362120597c40d5e1459f09498f8f6c8f2ba"
 dependencies = [
+ "cfg-if",
  "libc",
- "match_cfg",
- "winapi",
+ "windows 0.52.0",
 ]
 
 [[package]]
 name = "http"
-version = "1.2.0"
+version = "0.2.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f16ca2af56261c99fba8bac40a10251ce8188205a4c448fbb745a2e4daa76fea"
+checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"
 dependencies = [
  "bytes",
  "fnv",
@@ -3789,25 +3921,47 @@ dependencies = [
 ]
 
 [[package]]
-name = "http-body"
-version = "1.0.1"
+name = "http"
+version = "1.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"
+checksum = "f4a85d31aea989eead29a3aaf9e1115a180df8282431156e533de47660892565"
 dependencies = [
  "bytes",
- "http",
+ "fnv",
+ "itoa",
 ]
 
 [[package]]
-name = "http-body-util"
-version = "0.1.2"
+name = "http-body"
+version = "0.4.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "793429d76616a256bcb62c2a2ec2bed781c8307e797e2598c50010f2bee2544f"
+checksum = "7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2"
 dependencies = [
  "bytes",
- "futures-util",
- "http",
- "http-body",
+ "http 0.2.12",
+ "pin-project-lite",
+]
+
+[[package]]
+name = "http-body"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184"
+dependencies = [
+ "bytes",
+ "http 1.3.1",
+]
+
+[[package]]
+name = "http-body-util"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b021d93e26becf5dc7e1b75b1bed1fd93124b374ceb73f43d4d4eafec896a64a"
+dependencies = [
+ "bytes",
+ "futures-core",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "pin-project-lite",
 ]
 
@@ -3839,9 +3993,9 @@ dependencies = [
 
 [[package]]
 name = "httparse"
-version = "1.9.5"
+version = "1.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7d71d3574edd2771538b901e6549113b4006ece66150fb69c0fb6d9a2adae946"
+checksum = "6dbf3de79e51f3d586ab4cb9d5c3e2c14aa28ed23d180cf89b4df0454a69cc87"
 
 [[package]]
 name = "httpdate"
@@ -3857,9 +4011,9 @@ checksum = "91f255a4535024abf7640cb288260811fc14794f62b063652ed349f9a6c2348e"
 
 [[package]]
 name = "humantime"
-version = "2.1.0"
+version = "2.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"
+checksum = "9b112acc8b3adf4b107a8ec20977da0273a8c386765a3ec0229bd500a1443f9f"
 
 [[package]]
 name = "humantime-serde"
@@ -3873,16 +4027,40 @@ dependencies = [
 
 [[package]]
 name = "hyper"
-version = "1.5.1"
+version = "0.14.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-core",
+ "futures-util",
+ "h2 0.3.26",
+ "http 0.2.12",
+ "http-body 0.4.6",
+ "httparse",
+ "httpdate",
+ "itoa",
+ "pin-project-lite",
+ "socket2",
+ "tokio",
+ "tower-service",
+ "tracing",
+ "want",
+]
+
+[[package]]
+name = "hyper"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97818827ef4f364230e16705d4706e2897df2bb60617d6ca15d598025a3c481f"
+checksum = "cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80"
 dependencies = [
  "bytes",
  "futures-channel",
  "futures-util",
- "h2",
- "http",
- "http-body",
+ "h2 0.4.8",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "httparse",
  "httpdate",
  "itoa",
@@ -3894,17 +4072,17 @@ dependencies = [
 
 [[package]]
 name = "hyper-rustls"
-version = "0.27.3"
+version = "0.27.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08afdbb5c31130e3034af566421053ab03787c640246a446327f550d11bcb333"
+checksum = "2d191583f3da1305256f22463b9bb0471acad48a4e534a5218b9963e9c1f59b2"
 dependencies = [
  "futures-util",
- "http",
- "hyper",
+ "http 1.3.1",
+ "hyper 1.6.0",
  "hyper-util",
  "log",
  "rustls",
- "rustls-native-certs 0.8.1",
+ "rustls-native-certs",
  "rustls-pki-types",
  "tokio",
  "tokio-rustls",
@@ -3921,9 +4099,9 @@ dependencies = [
  "bytes",
  "futures-channel",
  "futures-util",
- "http",
- "http-body",
- "hyper",
+ "http 1.3.1",
+ "http-body 1.0.1",
+ "hyper 1.6.0",
  "pin-project-lite",
  "socket2",
  "tokio",
@@ -3955,7 +4133,7 @@ dependencies = [
  "quote",
  "serde",
  "serde_json",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -4105,7 +4283,7 @@ checksum = "1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -4162,7 +4340,7 @@ checksum = "a0eb5a3343abf848c0984fe4604b2b105da9539376e24fc0a3b0007411ae4fd9"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -4203,9 +4381,9 @@ dependencies = [
 
 [[package]]
 name = "indexmap"
-version = "2.7.0"
+version = "2.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f"
+checksum = "3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058"
 dependencies = [
  "arbitrary",
  "equivalent",
@@ -4215,9 +4393,9 @@ dependencies = [
 
 [[package]]
 name = "indoc"
-version = "2.0.5"
+version = "2.0.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5"
+checksum = "f4c7245a08504955605670dbf141fceab975f15ca21570696aebe9d2e71576bd"
 
 [[package]]
 name = "infer"
@@ -4232,7 +4410,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "232929e1d75fe899576a3d5c7416ad0d88dbfbb3c3d6aa00873a7408a50ddb88"
 dependencies = [
  "ahash",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "is-terminal",
  "itoa",
  "log",
@@ -4265,9 +4443,9 @@ dependencies = [
 
 [[package]]
 name = "inout"
-version = "0.1.3"
+version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"
+checksum = "879f10e63c20629ecabbb64a8010319738c66a5cd0c29b02d63d272b03751d01"
 dependencies = [
  "block-padding",
  "generic-array",
@@ -4275,16 +4453,15 @@ dependencies = [
 
 [[package]]
 name = "instability"
-version = "0.3.3"
+version = "0.3.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b829f37dead9dc39df40c2d3376c179fdfd2ac771f53f55d3c30dc096a3c0c6e"
+checksum = "0bf9fed6d91cfb734e7476a06bde8300a1b94e217e1b523b6f0cd1a01998c71d"
 dependencies = [
  "darling",
  "indoc",
- "pretty_assertions",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -4298,9 +4475,9 @@ dependencies = [
 
 [[package]]
 name = "interprocess"
-version = "2.2.2"
+version = "2.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "894148491d817cb36b6f778017b8ac46b17408d522dd90f539d677ea938362eb"
+checksum = "d941b405bd2322993887859a8ee6ac9134945a24ec5ec763a8a962fc64dfec2d"
 dependencies = [
  "doctest-file",
  "futures-core",
@@ -4334,9 +4511,9 @@ dependencies = [
 
 [[package]]
 name = "ipnet"
-version = "2.10.1"
+version = "2.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708"
+checksum = "469fb0b9cefa57e3ef31275ee7cacb78f2fdca44e4765491884a2b119d4eb130"
 
 [[package]]
 name = "iri-string"
@@ -4350,13 +4527,13 @@ dependencies = [
 
 [[package]]
 name = "is-terminal"
-version = "0.4.13"
+version = "0.4.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b"
+checksum = "e04d7f318608d35d4b61ddd75cbdaee86b023ebe2bd5a66ee0915f0bf93095a9"
 dependencies = [
- "hermit-abi 0.4.0",
+ "hermit-abi 0.5.0",
  "libc",
- "windows-sys 0.52.0",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -4385,22 +4562,24 @@ dependencies = [
 
 [[package]]
 name = "itoa"
-version = "1.0.14"
+version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674"
+checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
 
 [[package]]
 name = "jni"
-version = "0.19.0"
+version = "0.21.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c6df18c2e3db7e453d3c6ac5b3e9d5182664d28788126d39b91f2d1e22b017ec"
+checksum = "1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97"
 dependencies = [
  "cesu8",
+ "cfg-if",
  "combine",
  "jni-sys",
  "log",
  "thiserror 1.0.69",
  "walkdir",
+ "windows-sys 0.45.0",
 ]
 
 [[package]]
@@ -4420,9 +4599,9 @@ dependencies = [
 
 [[package]]
 name = "js-sys"
-version = "0.3.76"
+version = "0.3.77"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6717b6b5b077764fb5966237269cb3c64edddde4b14ce42647430a78ced9e7b7"
+checksum = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f"
 dependencies = [
  "once_cell",
  "wasm-bindgen",
@@ -4430,9 +4609,9 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c5c71d8c1a731cc4227c2f698d377e7848ca12c8a48866fc5e6951c43a4db843"
+checksum = "37b26c20e2178756451cfeb0661fb74c47dd5988cb7e3939de7e9241fd604d42"
 dependencies = [
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
@@ -4448,15 +4627,15 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-client-transport"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "548125b159ba1314104f5bb5f38519e03a41862786aa3925cf349aae9cdd546e"
+checksum = "bacb85abf4117092455e1573625e21b8f8ef4dec8aff13361140b2dc266cdff2"
 dependencies = [
  "base64 0.22.1",
  "futures-channel",
  "futures-util",
  "gloo-net",
- "http",
+ "http 1.3.1",
  "jsonrpsee-core",
  "pin-project",
  "rustls",
@@ -4473,22 +4652,22 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-core"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f2882f6f8acb9fdaec7cefc4fd607119a9bd709831df7d7672a1d3b644628280"
+checksum = "456196007ca3a14db478346f58c7238028d55ee15c1df15115596e411ff27925"
 dependencies = [
  "async-trait",
  "bytes",
  "futures-timer",
  "futures-util",
- "http",
- "http-body",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "http-body-util",
  "jsonrpsee-types",
  "parking_lot",
  "pin-project",
  "rand 0.8.5",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "serde",
  "serde_json",
  "thiserror 1.0.69",
@@ -4500,14 +4679,14 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-http-client"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b3638bc4617f96675973253b3a45006933bde93c2fd8a6170b33c777cc389e5b"
+checksum = "c872b6c9961a4ccc543e321bb5b89f6b2d2c7fe8b61906918273a3333c95400c"
 dependencies = [
  "async-trait",
  "base64 0.22.1",
- "http-body",
- "hyper",
+ "http-body 1.0.1",
+ "hyper 1.6.0",
  "hyper-rustls",
  "hyper-util",
  "jsonrpsee-core",
@@ -4525,28 +4704,28 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-proc-macros"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c06c01ae0007548e73412c08e2285ffe5d723195bf268bce67b1b77c3bb2a14d"
+checksum = "5e65763c942dfc9358146571911b0cd1c361c2d63e2d2305622d40d36376ca80"
 dependencies = [
- "heck",
+ "heck 0.5.0",
  "proc-macro-crate",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "jsonrpsee-server"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "82ad8ddc14be1d4290cd68046e7d1d37acd408efed6d3ca08aefcc3ad6da069c"
+checksum = "55e363146da18e50ad2b51a0a7925fc423137a0b1371af8235b1c231a0647328"
 dependencies = [
  "futures-util",
- "http",
- "http-body",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "http-body-util",
- "hyper",
+ "hyper 1.6.0",
  "hyper-util",
  "jsonrpsee-core",
  "jsonrpsee-types",
@@ -4565,11 +4744,11 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-types"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a178c60086f24cc35bb82f57c651d0d25d99c4742b4d335de04e97fa1f08a8a1"
+checksum = "08a8e70baf945b6b5752fc8eb38c918a48f1234daf11355e07106d963f860089"
 dependencies = [
- "http",
+ "http 1.3.1",
  "serde",
  "serde_json",
  "thiserror 1.0.69",
@@ -4577,9 +4756,9 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-wasm-client"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1a01cd500915d24ab28ca17527e23901ef1be6d659a2322451e1045532516c25"
+checksum = "e6558a9586cad43019dafd0b6311d0938f46efc116b34b28c74778bc11a2edf6"
 dependencies = [
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
@@ -4588,11 +4767,11 @@ dependencies = [
 
 [[package]]
 name = "jsonrpsee-ws-client"
-version = "0.24.7"
+version = "0.24.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0fe322e0896d0955a3ebdd5bf813571c53fea29edd713bc315b76620b327e86d"
+checksum = "01b3323d890aa384f12148e8d2a1fd18eb66e9e7e825f9de4fa53bcc19b93eef"
 dependencies = [
- "http",
+ "http 1.3.1",
  "jsonrpsee-client-transport",
  "jsonrpsee-core",
  "jsonrpsee-types",
@@ -4601,11 +4780,11 @@ dependencies = [
 
 [[package]]
 name = "jsonwebtoken"
-version = "9.3.0"
+version = "9.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b9ae10193d25051e74945f1ea2d0b42e03cc3b890f7e4cc5faa44997d808193f"
+checksum = "5a87cc7a48537badeae96744432de36f4be2b4a34a05a5ef32e9dd8a1c169dde"
 dependencies = [
- "base64 0.21.7",
+ "base64 0.22.1",
  "js-sys",
  "pem",
  "ring",
@@ -4629,6 +4808,16 @@ dependencies = [
  "signature",
 ]
 
+[[package]]
+name = "kbs-types"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9b6441ed73b0faa50707d4de41c6b45c76654b661b96aaf7b26a41331eedc0a5"
+dependencies = [
+ "serde",
+ "serde_json",
+]
+
 [[package]]
 name = "keccak"
 version = "0.1.5"
@@ -4694,9 +4883,9 @@ dependencies = [
 
 [[package]]
 name = "libc"
-version = "0.2.167"
+version = "0.2.171"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "09d6582e104315a817dff97f75133544b2e094ee22447d2acf4a74e189ba06fc"
+checksum = "c19937216e9d3aa9956d9bb8dfc0b0c8beb6058fc4f7a4dc4d850edf86a237d6"
 
 [[package]]
 name = "libloading"
@@ -4750,19 +4939,19 @@ version = "0.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "libc",
  "redox_syscall",
 ]
 
 [[package]]
 name = "libsecp256k1"
-version = "0.7.1"
+version = "0.7.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "95b09eff1b35ed3b33b877ced3a691fc7a481919c7e29c53c906226fcf55e2a1"
+checksum = "e79019718125edc905a079a70cfa5f3820bc76139fc91d6f9abc27ea2a887139"
 dependencies = [
  "arrayref",
- "base64 0.13.1",
+ "base64 0.22.1",
  "digest 0.9.0",
  "hmac-drbg",
  "libsecp256k1-core",
@@ -4811,9 +5000,9 @@ checksum = "0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f"
 
 [[package]]
 name = "linked_hash_set"
-version = "0.1.4"
+version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "47186c6da4d81ca383c7c47c1bfc80f4b95f4720514d860a5407aaf4233f9588"
+checksum = "bae85b5be22d9843c80e5fc80e9b64c8a3b1f98f867c709956eca3efff4e92e2"
 dependencies = [
  "linked-hash-map",
  "serde",
@@ -4821,15 +5010,21 @@ dependencies = [
 
 [[package]]
 name = "linux-raw-sys"
-version = "0.4.14"
+version = "0.4.15"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab"
+
+[[package]]
+name = "linux-raw-sys"
+version = "0.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89"
+checksum = "fe7db12097d22ec582439daf8618b8fdd1a7bef6270e9af3b1ebcd30893cf413"
 
 [[package]]
 name = "litemap"
-version = "0.7.4"
+version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4ee93343901ab17bd981295f2cf0026d4ad018c7c31ba84549a4ddbb47a45104"
+checksum = "23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856"
 
 [[package]]
 name = "lock_api"
@@ -4844,9 +5039,9 @@ dependencies = [
 
 [[package]]
 name = "log"
-version = "0.4.22"
+version = "0.4.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24"
+checksum = "30bde2b3dc3671ae49d8e2e9f044c7c005836e7a023ee57cffa25ab82764bb9e"
 
 [[package]]
 name = "loom"
@@ -4886,10 +5081,15 @@ dependencies = [
 ]
 
 [[package]]
-name = "match_cfg"
-version = "0.1.0"
+name = "macro-string"
+version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ffbee8634e0d45d258acb448e7eaab3fce7a0a467395d4d9f228e3c1f01fb2e4"
+checksum = "1b27834086c65ec3f9387b096d66e99f221cf081c2b738042aa252bcd41204e3"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
 
 [[package]]
 name = "matchers"
@@ -4924,6 +5124,18 @@ dependencies = [
  "autocfg",
 ]
 
+[[package]]
+name = "merlin"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d"
+dependencies = [
+ "byteorder",
+ "keccak",
+ "rand_core 0.6.4",
+ "zeroize",
+]
+
 [[package]]
 name = "metrics"
 version = "0.24.1"
@@ -4943,19 +5155,19 @@ dependencies = [
  "proc-macro2",
  "quote",
  "regex",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "metrics-exporter-prometheus"
-version = "0.16.0"
+version = "0.16.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "85b6f8152da6d7892ff1b7a1c0fa3f435e92b5918ad67035c3bb432111d9a29b"
+checksum = "dd7399781913e5393588a8d8c6a2867bf85fb38eaf2502fdce465aad2dc6f034"
 dependencies = [
  "base64 0.22.1",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "metrics",
- "metrics-util",
+ "metrics-util 0.19.0",
  "quanta",
  "thiserror 1.0.69",
 ]
@@ -4985,10 +5197,24 @@ dependencies = [
  "crossbeam-epoch",
  "crossbeam-utils",
  "hashbrown 0.15.2",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "metrics",
  "ordered-float",
+]
+
+[[package]]
+name = "metrics-util"
+version = "0.19.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dbd4884b1dd24f7d6628274a2f5ae22465c337c5ba065ec9b6edccddf8acc673"
+dependencies = [
+ "crossbeam-epoch",
+ "crossbeam-utils",
+ "hashbrown 0.15.2",
+ "metrics",
  "quanta",
+ "rand 0.8.5",
+ "rand_xoshiro",
  "sketches-ddsketch",
 ]
 
@@ -5036,9 +5262,9 @@ checksum = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a"
 
 [[package]]
 name = "miniz_oxide"
-version = "0.8.0"
+version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e2d80299ef12ff69b16a84bb182e3b9df68b5a91574d3d4fa6e41b65deec4df1"
+checksum = "8e3e04debbb59698c15bacbb6d93584a8c0ca9cc3213cb423d31f760d8843ce5"
 dependencies = [
  "adler2",
 ]
@@ -5090,7 +5316,7 @@ dependencies = [
  "cfg-if",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -5116,21 +5342,20 @@ dependencies = [
 
 [[package]]
 name = "moka"
-version = "0.12.8"
+version = "0.12.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "32cf62eb4dd975d2dde76432fb1075c49e3ee2331cf36f1f8fd4b66550d32b6f"
+checksum = "a9321642ca94a4282428e6ea4af8cc2ca4eac48ac7a6a4ea8f33f76d0ce70926"
 dependencies = [
  "crossbeam-channel",
  "crossbeam-epoch",
  "crossbeam-utils",
- "once_cell",
+ "loom",
  "parking_lot",
- "quanta",
+ "portable-atomic",
  "rustc_version 0.4.1",
  "smallvec",
  "tagptr",
  "thiserror 1.0.69",
- "triomphe",
  "uuid",
 ]
 
@@ -5140,6 +5365,24 @@ version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1fafa6961cabd9c63bcd77a45d7e3b7f3b552b70417831fb0f56db717e72407e"
 
+[[package]]
+name = "multer"
+version = "2.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "01acbdc23469fd8fe07ab135923371d5f5a422fbf9c522158677c8eb15bc51c2"
+dependencies = [
+ "bytes",
+ "encoding_rs",
+ "futures-util",
+ "http 0.2.12",
+ "httparse",
+ "log",
+ "memchr",
+ "mime",
+ "spin",
+ "version_check",
+]
+
 [[package]]
 name = "multiaddr"
 version = "0.18.2"
@@ -5207,7 +5450,7 @@ version = "6.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6205bd8bb1e454ad2e27422015fb5e4f2bcc7e08fa8f27058670d208324a4d2d"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "filetime",
  "fsevent-sys",
  "inotify",
@@ -5358,7 +5601,7 @@ dependencies = [
  "proc-macro-crate",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -5386,18 +5629,18 @@ dependencies = [
 
 [[package]]
 name = "object"
-version = "0.36.5"
+version = "0.36.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aedf0a2d09c573ed1d8d85b30c119153926a2b36dce0ab28322c09a117a4683e"
+checksum = "62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87"
 dependencies = [
  "memchr",
 ]
 
 [[package]]
 name = "once_cell"
-version = "1.20.2"
+version = "1.21.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775"
+checksum = "d75b0bedcc4fe52caa0e03d9f1151a323e4aa5e2d78ba3580400cd3c9e2bc4bc"
 dependencies = [
  "critical-section",
  "portable-atomic",
@@ -5405,15 +5648,15 @@ dependencies = [
 
 [[package]]
 name = "oorandom"
-version = "11.1.4"
+version = "11.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b410bbe7e14ab526a0e86877eb47c6996a2bd7746f027ba551028c925390e4e9"
+checksum = "d6790f58c7ff633d8771f42965289203411a5e5c68388703c06e14f24770b41e"
 
 [[package]]
 name = "op-alloy-consensus"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5085cc8be65a2da9c04e9a904eccfe38eb69ecc3bc6c6485ce0f1af879f3abe"
+checksum = "848b3567a9a469ab0c9c712fca0fd6bbce13a9a0b723c94cb81214f53507cf07"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -5424,14 +5667,14 @@ dependencies = [
  "derive_more",
  "serde",
  "serde_with",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "op-alloy-genesis"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64f5aa1201d83af3b0ebffbfc28fdc7e772d7e44f4dea9e41c51162f84412edf"
+checksum = "3cd04d0e24b3538e2bc9c024da1c08e0a97822c63b341c4491a6b29e86740641"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -5439,29 +5682,14 @@ dependencies = [
  "alloy-sol-types",
  "serde",
  "serde_repr",
- "thiserror 2.0.5",
-]
-
-[[package]]
-name = "op-alloy-network"
-version = "0.8.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9d12eafaad5b89792de75f1344d42634dd5271945fd36256e4e5d766cf32107e"
-dependencies = [
- "alloy-consensus",
- "alloy-network",
- "alloy-primitives",
- "alloy-rpc-types-eth",
- "alloy-signer",
- "op-alloy-consensus",
- "op-alloy-rpc-types",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "op-alloy-protocol"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2cf8c05e1b7ed20c4af6f72a54cc389225d2c6af6fcf932ef6481cfdfcb540ac"
+checksum = "0d0d72853e704a067ad6229dd3a753d1662fa02c4ea85783e25a887d7aadd150"
 dependencies = [
  "alloc-no-stdlib",
  "alloy-consensus",
@@ -5476,29 +5704,16 @@ dependencies = [
  "op-alloy-consensus",
  "op-alloy-genesis",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
  "unsigned-varint",
 ]
 
-[[package]]
-name = "op-alloy-rpc-jsonrpsee"
-version = "0.8.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3b6edd6fb56f23ab45c704ad0c598641086e07b3a55d74890acaa01226ffc3e2"
-dependencies = [
- "alloy-eips",
- "alloy-primitives",
- "jsonrpsee",
- "op-alloy-rpc-types",
- "op-alloy-rpc-types-engine",
-]
-
 [[package]]
 name = "op-alloy-rpc-types"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b44194f44faef3db1edd17fc8e0b1309d377c6c7a4ba74a02d78c13d5f2ed90d"
+checksum = "8a555dd1bd39cbcdd60b92f03a21871767a16e3a2ce2f82a26cff9aade56d35f"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
@@ -5515,9 +5730,9 @@ dependencies = [
 
 [[package]]
 name = "op-alloy-rpc-types-engine"
-version = "0.8.1"
+version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c005d0a4431fbd9cd16eb0c2f67306de4245f76f311fa1628a68b79e7ea5aa0e"
+checksum = "16779322cc84d57f68afaef4cdabc150a5f8b53f345982f1aea010fe4d790267"
 dependencies = [
  "alloy-eips",
  "alloy-primitives",
@@ -5530,27 +5745,7 @@ dependencies = [
  "op-alloy-protocol",
  "serde",
  "snap",
- "thiserror 2.0.5",
-]
-
-[[package]]
-name = "op-reth"
-version = "1.1.4"
-dependencies = [
- "clap",
- "reth-cli-util",
- "reth-node-builder",
- "reth-optimism-chainspec",
- "reth-optimism-cli",
- "reth-optimism-consensus",
- "reth-optimism-evm",
- "reth-optimism-forks",
- "reth-optimism-node",
- "reth-optimism-payload-builder",
- "reth-optimism-primitives",
- "reth-optimism-rpc",
- "reth-provider",
- "tracing",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -5561,9 +5756,9 @@ checksum = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"
 
 [[package]]
 name = "openssl-probe"
-version = "0.1.5"
+version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf"
+checksum = "d05e27ee213611ffe7d6348b942e8f942b37114c00cc03cec254295a4a17852e"
 
 [[package]]
 name = "option-ext"
@@ -5573,9 +5768,9 @@ checksum = "04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d"
 
 [[package]]
 name = "ordered-float"
-version = "4.5.0"
+version = "4.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c65ee1f9701bf938026630b455d5315f490640234259037edb259798b3bcf85e"
+checksum = "7bb71e1b3fa6ca1c61f383464aaf2bb0e2f8e772a1f01d486832464de363b951"
 dependencies = [
  "num-traits",
 ]
@@ -5610,30 +5805,32 @@ dependencies = [
 
 [[package]]
 name = "parity-scale-codec"
-version = "3.6.12"
+version = "3.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee"
+checksum = "c9fde3d0718baf5bc92f577d652001da0f8d54cd03a7974e118d04fc888dc23d"
 dependencies = [
  "arbitrary",
  "arrayvec",
  "bitvec",
  "byte-slice-cast",
  "bytes",
+ "const_format",
  "impl-trait-for-tuples",
  "parity-scale-codec-derive",
+ "rustversion",
  "serde",
 ]
 
 [[package]]
 name = "parity-scale-codec-derive"
-version = "3.6.12"
+version = "3.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c"
+checksum = "581c837bb6b9541ce7faa9377c20616e4fb7650f6b0f68bc93c827ee504fb7b3"
 dependencies = [
  "proc-macro-crate",
  "proc-macro2",
  "quote",
- "syn 1.0.109",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -5683,9 +5880,9 @@ dependencies = [
 
 [[package]]
 name = "pem"
-version = "3.0.4"
+version = "3.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae"
+checksum = "38af38e8470ac9dee3ce1bae1af9c1671fffc44ddfd8bd1d0a3445bf349a8ef3"
 dependencies = [
  "base64 0.22.1",
  "serde",
@@ -5704,7 +5901,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8b7cafe60d6cf8e62e1b9b2ea516a089c008945bb5a275416789e7db0bc199dc"
 dependencies = [
  "memchr",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "ucd-trie",
 ]
 
@@ -5720,9 +5917,9 @@ dependencies = [
 
 [[package]]
 name = "phf"
-version = "0.11.2"
+version = "0.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc"
+checksum = "1fd6780a80ae0c52cc120a26a1a42c1ae51b247a253e4e06113d23d2c2edd078"
 dependencies = [
  "phf_macros",
  "phf_shared",
@@ -5730,9 +5927,9 @@ dependencies = [
 
 [[package]]
 name = "phf_generator"
-version = "0.11.2"
+version = "0.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0"
+checksum = "3c80231409c20246a13fddb31776fb942c38553c51e871f8cbd687a4cfb5843d"
 dependencies = [
  "phf_shared",
  "rand 0.8.5",
@@ -5740,51 +5937,51 @@ dependencies = [
 
 [[package]]
 name = "phf_macros"
-version = "0.11.2"
+version = "0.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3444646e286606587e49f3bcf1679b8cef1dc2c5ecc29ddacaffc305180d464b"
+checksum = "f84ac04429c13a7ff43785d75ad27569f2951ce0ffd30a3321230db2fc727216"
 dependencies = [
  "phf_generator",
  "phf_shared",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "phf_shared"
-version = "0.11.2"
+version = "0.11.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b"
+checksum = "67eabc2ef2a60eb7faa00097bd1ffdb5bd28e62bf39990626a582201b7a754e5"
 dependencies = [
  "siphasher",
 ]
 
 [[package]]
 name = "pin-project"
-version = "1.1.7"
+version = "1.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "be57f64e946e500c8ee36ef6331845d40a93055567ec57e8fae13efd33759b95"
+checksum = "677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a"
 dependencies = [
  "pin-project-internal",
 ]
 
 [[package]]
 name = "pin-project-internal"
-version = "1.1.7"
+version = "1.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c0f5fad0874fc7abcd4d750e76917eaebbecaa2c20bde22e1dbeeba8beb758c"
+checksum = "6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "pin-project-lite"
-version = "0.2.15"
+version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "915a1e146535de9163f3987b8944ed8cf49a18bb0056bcebcdcece385cece4ff"
+checksum = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b"
 
 [[package]]
 name = "pin-utils"
@@ -5804,9 +6001,9 @@ dependencies = [
 
 [[package]]
 name = "pkg-config"
-version = "0.3.31"
+version = "0.3.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2"
+checksum = "7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c"
 
 [[package]]
 name = "plain_hasher"
@@ -5865,9 +6062,9 @@ dependencies = [
 
 [[package]]
 name = "portable-atomic"
-version = "1.10.0"
+version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "280dc24453071f1b63954171985a0b0d30058d287960968b9b2aca264c8d4ee6"
+checksum = "350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e"
 
 [[package]]
 name = "powerfmt"
@@ -5900,34 +6097,35 @@ dependencies = [
 
 [[package]]
 name = "ppv-lite86"
-version = "0.2.20"
+version = "0.2.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "77957b295656769bb8ad2b6a6b09d897d94f05c41b069aede1fcdaa675eaea04"
+checksum = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9"
 dependencies = [
- "zerocopy",
+ "zerocopy 0.8.23",
 ]
 
 [[package]]
 name = "predicates"
-version = "3.1.2"
+version = "3.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e9086cc7640c29a356d1a29fd134380bee9d8f79a17410aa76e7ad295f42c97"
+checksum = "a5d19ee57562043d37e82899fade9a22ebab7be9cef5026b07fda9cdd4293573"
 dependencies = [
  "anstyle",
+ "difflib",
  "predicates-core",
 ]
 
 [[package]]
 name = "predicates-core"
-version = "1.0.8"
+version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ae8177bee8e75d6846599c6b9ff679ed51e882816914eec639944d7c9aa11931"
+checksum = "727e462b119fe9c93fd0eb1429a5f7647394014cf3c04ab2c0350eeb09095ffa"
 
 [[package]]
 name = "predicates-tree"
-version = "1.0.11"
+version = "1.0.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "41b740d195ed3166cd147c8047ec98db0e22ec019eb8eeb76d343b795304fb13"
+checksum = "72dd2d6d381dfb73a193c7fca536518d7caee39fc8503f74e7dc0be0531b425c"
 dependencies = [
  "predicates-core",
  "termtree",
@@ -5945,12 +6143,12 @@ dependencies = [
 
 [[package]]
 name = "prettyplease"
-version = "0.2.25"
+version = "0.2.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64d1ec885c64d0457d564db4ec299b2dae3f9c02808b8ad9c3a089c591b18033"
+checksum = "5316f57387668042f561aae71480de936257848f9c43ce528e311d89a07cadeb"
 dependencies = [
  "proc-macro2",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -5975,9 +6173,9 @@ dependencies = [
 
 [[package]]
 name = "proc-macro-crate"
-version = "3.2.0"
+version = "3.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8ecf48c7ca261d60b74ab1a7b20da18bede46776b2e55535cb958eb595c5fa7b"
+checksum = "edce586971a4dfaa28950c6f18ed55e0406c1ab88bbce2c6f6293a7aaba73d35"
 dependencies = [
  "toml_edit",
 ]
@@ -6001,14 +6199,14 @@ dependencies = [
  "proc-macro-error-attr2",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.92"
+version = "1.0.94"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0"
+checksum = "a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84"
 dependencies = [
  "unicode-ident",
 ]
@@ -6019,13 +6217,13 @@ version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "731e0d9356b0c25f16f33b5be79b1c57b562f141ebfcdb0ad8ac2c13a24293b4"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "chrono",
  "flate2",
  "hex",
  "lazy_static",
  "procfs-core 0.16.0",
- "rustix",
+ "rustix 0.38.44",
 ]
 
 [[package]]
@@ -6034,10 +6232,10 @@ version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cc5b72d8145275d844d4b5f6d4e1eef00c8cd889edb6035c21675d1bb1f45c9f"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "hex",
  "procfs-core 0.17.0",
- "rustix",
+ "rustix 0.38.44",
 ]
 
 [[package]]
@@ -6046,7 +6244,7 @@ version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2d3554923a69f4ce04c4a754260c338f505ce22642d3830e049a399fc2059a29"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "chrono",
  "hex",
 ]
@@ -6057,19 +6255,19 @@ version = "0.17.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "239df02d8349b06fc07398a3a1697b06418223b1c7725085e801e7c0fc6a12ec"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "hex",
 ]
 
 [[package]]
 name = "proptest"
-version = "1.5.0"
+version = "1.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b4c2511913b88df1637da85cc8d96ec8e43a3f8bb8ccb71ee1ac240d6f3df58d"
+checksum = "14cae93065090804185d3b75f0bf93b8eeda30c7a9b4a33d3bdb3988d6229e50"
 dependencies = [
  "bit-set",
  "bit-vec",
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "lazy_static",
  "num-traits",
  "rand 0.8.5",
@@ -6093,20 +6291,20 @@ dependencies = [
 
 [[package]]
 name = "proptest-derive"
-version = "0.5.0"
+version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6ff7ff745a347b87471d859a377a9a404361e7efc2a971d73424a6d183c0fc77"
+checksum = "4ee1c9ac207483d5e7db4940700de86a9aae46ef90c48b57f99fe7edb8345e49"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "quanta"
-version = "0.12.3"
+version = "0.12.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e5167a477619228a0b284fac2674e3c388cba90631d7b7de620e6f1fcd08da5"
+checksum = "3bd1fe6824cea6538803de3ff1bc0cf3949024db3d43c9643024bfb33a807c0e"
 dependencies = [
  "crossbeam-utils",
  "libc",
@@ -6143,37 +6341,39 @@ dependencies = [
 
 [[package]]
 name = "quinn"
-version = "0.11.6"
+version = "0.11.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62e96808277ec6f97351a2380e6c25114bc9e67037775464979f3037c92d05ef"
+checksum = "c3bd15a6f2967aef83887dcb9fec0014580467e33720d073560cf015a5683012"
 dependencies = [
  "bytes",
+ "cfg_aliases",
  "pin-project-lite",
  "quinn-proto",
  "quinn-udp",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "rustls",
  "socket2",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
+ "web-time",
 ]
 
 [[package]]
 name = "quinn-proto"
-version = "0.11.9"
+version = "0.11.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a2fe5ef3495d7d2e377ff17b1a8ce2ee2ec2a18cde8b6ad6619d65d0701c135d"
+checksum = "b820744eb4dc9b57a3398183639c511b5a26d2ed702cedd3febaa1393caa22cc"
 dependencies = [
  "bytes",
- "getrandom 0.2.15",
- "rand 0.8.5",
+ "getrandom 0.3.2",
+ "rand 0.9.0",
  "ring",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "rustls",
  "rustls-pki-types",
  "slab",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tinyvec",
  "tracing",
  "web-time",
@@ -6181,9 +6381,9 @@ dependencies = [
 
 [[package]]
 name = "quinn-udp"
-version = "0.5.7"
+version = "0.5.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7d5a626c6807713b15cac82a6acaccd6043c9a5408c24baae07611fec3f243da"
+checksum = "e46f3055866785f6b92bc6164b76be02ca8f2eb4b002c0354b28cf4c119e5944"
 dependencies = [
  "cfg_aliases",
  "libc",
@@ -6195,13 +6395,19 @@ dependencies = [
 
 [[package]]
 name = "quote"
-version = "1.0.37"
+version = "1.0.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
 dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "r-efi"
+version = "5.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5"
+
 [[package]]
 name = "radium"
 version = "0.7.0"
@@ -6233,6 +6439,17 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "rand"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3779b94aeb87e8bd4e834cee3650289ee9e0d5677f976ecdb6d219e5f4f6cd94"
+dependencies = [
+ "rand_chacha 0.9.0",
+ "rand_core 0.9.3",
+ "zerocopy 0.8.23",
+]
+
 [[package]]
 name = "rand_chacha"
 version = "0.2.2"
@@ -6253,6 +6470,16 @@ dependencies = [
  "rand_core 0.6.4",
 ]
 
+[[package]]
+name = "rand_chacha"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3022b5f1df60f26e1ffddd6c66e8aa15de382ae63b3a0c1bfc0e4d3e3f325cb"
+dependencies = [
+ "ppv-lite86",
+ "rand_core 0.9.3",
+]
+
 [[package]]
 name = "rand_core"
 version = "0.5.1"
@@ -6271,6 +6498,15 @@ dependencies = [
  "getrandom 0.2.15",
 ]
 
+[[package]]
+name = "rand_core"
+version = "0.9.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "99d9a13982dcf210057a8a78572b2217b667c3beacbf3a0d8b454f6f82837d38"
+dependencies = [
+ "getrandom 0.3.2",
+]
+
 [[package]]
 name = "rand_hc"
 version = "0.2.0"
@@ -6289,13 +6525,22 @@ dependencies = [
  "rand_core 0.6.4",
 ]
 
+[[package]]
+name = "rand_xoshiro"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa"
+dependencies = [
+ "rand_core 0.6.4",
+]
+
 [[package]]
 name = "ratatui"
 version = "0.28.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fdef7f9be5c0122f890d58bdf4d964349ba6a6161f705907526d891efabba57d"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "cassowary",
  "compact_str",
  "crossterm",
@@ -6303,8 +6548,8 @@ dependencies = [
  "itertools 0.13.0",
  "lru",
  "paste",
- "strum",
- "strum_macros",
+ "strum 0.26.3",
+ "strum_macros 0.26.4",
  "unicode-segmentation",
  "unicode-truncate",
  "unicode-width 0.1.14",
@@ -6312,11 +6557,11 @@ dependencies = [
 
 [[package]]
 name = "raw-cpuid"
-version = "11.2.0"
+version = "11.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1ab240315c661615f2ee9f0f2cd32d5a7343a84d5ebcccb99d46e6637565e7b0"
+checksum = "c6df7ab838ed27997ba19a4664507e6f82b41fe6e20be42929332156e5e85146"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
 ]
 
 [[package]]
@@ -6347,11 +6592,11 @@ checksum = "d3edd4d5d42c92f0a659926464d4cce56b562761267ecf0f469d85b7de384175"
 
 [[package]]
 name = "redox_syscall"
-version = "0.5.7"
+version = "0.5.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9b6dfecf2c74bce2466cabf93f6664d6998a69eb21e39f4207930065b27b771f"
+checksum = "0b8c0c260b63a8219631167be35e6a988e9554dbd323f8bd08439c8ed1302bd1"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
 ]
 
 [[package]]
@@ -6411,11 +6656,11 @@ checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
 
 [[package]]
 name = "regress"
-version = "0.10.1"
+version = "0.10.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1541daf4e4ed43a0922b7969bdc2170178bcacc5dabf7e39bc508a9fa3953a7a"
+checksum = "78ef7fa9ed0256d64a688a3747d0fef7a88851c18a5e1d57f115f38ec2e09366"
 dependencies = [
- "hashbrown 0.14.5",
+ "hashbrown 0.15.2",
  "memchr",
 ]
 
@@ -6427,18 +6672,19 @@ checksum = "ba39f3699c378cd8970968dcbff9c43159ea4cfbd88d43c00b22f2ef10a435d2"
 
 [[package]]
 name = "reqwest"
-version = "0.12.9"
+version = "0.12.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a77c62af46e79de0a562e1a9849205ffcb7fc1238876e9bd743357570e04046f"
+checksum = "989e327e510263980e231de548a33e63d34962d29ae61b467389a1a09627a254"
 dependencies = [
  "base64 0.22.1",
  "bytes",
+ "futures-channel",
  "futures-core",
  "futures-util",
- "http",
- "http-body",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "http-body-util",
- "hyper",
+ "hyper 1.6.0",
  "hyper-rustls",
  "hyper-util",
  "ipnet",
@@ -6450,16 +6696,17 @@ dependencies = [
  "pin-project-lite",
  "quinn",
  "rustls",
- "rustls-native-certs 0.8.1",
+ "rustls-native-certs",
  "rustls-pemfile",
  "rustls-pki-types",
  "serde",
  "serde_json",
  "serde_urlencoded",
- "sync_wrapper 1.0.2",
+ "sync_wrapper",
  "tokio",
  "tokio-rustls",
  "tokio-util",
+ "tower 0.5.2",
  "tower-service",
  "url",
  "wasm-bindgen",
@@ -6472,12 +6719,11 @@ dependencies = [
 
 [[package]]
 name = "resolv-conf"
-version = "0.7.0"
+version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "52e44394d2086d010551b14b53b1f24e31647570cd1deb0379e2c21b329aba00"
+checksum = "48375394603e3dd4b2d64371f7148fd8c7baa2680e28741f2cb8d23b59e3d4c4"
 dependencies = [
  "hostname",
- "quick-error",
 ]
 
 [[package]]
@@ -6631,7 +6877,7 @@ dependencies = [
  "reth-tokio-util",
  "reth-tracing",
  "schnellru",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -6667,7 +6913,7 @@ dependencies = [
  "reth-rpc-types-compat",
  "reth-tracing",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tower 0.4.13",
  "tracing",
@@ -6723,7 +6969,7 @@ dependencies = [
  "reth-primitives",
  "reth-primitives-traits",
  "reth-storage-errors",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -6879,7 +7125,7 @@ dependencies = [
  "reth-fs-util",
  "secp256k1",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tikv-jemallocator",
  "tracy-client",
 ]
@@ -6901,6 +7147,7 @@ dependencies = [
  "proptest-arbitrary-interop",
  "reth-codecs-derive",
  "rstest",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
  "serde",
  "serde_json",
  "test-fuzz",
@@ -6915,7 +7162,7 @@ dependencies = [
  "proc-macro2",
  "quote",
  "similar-asserts",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -7018,14 +7265,14 @@ dependencies = [
  "reth-storage-errors",
  "reth-tracing",
  "reth-trie-common",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "serde",
  "serde_json",
- "strum",
- "sysinfo",
+ "strum 0.26.3",
+ "sysinfo 0.32.1",
  "tempfile",
  "test-fuzz",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7082,7 +7329,7 @@ dependencies = [
  "reth-trie-db",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
 ]
 
@@ -7124,7 +7371,7 @@ dependencies = [
  "schnellru",
  "secp256k1",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -7149,7 +7396,7 @@ dependencies = [
  "reth-network-peers",
  "reth-tracing",
  "secp256k1",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -7176,7 +7423,7 @@ dependencies = [
  "secp256k1",
  "serde",
  "serde_with",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -7214,7 +7461,7 @@ dependencies = [
  "reth-testing-utils",
  "reth-tracing",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -7291,7 +7538,7 @@ dependencies = [
  "secp256k1",
  "sha2 0.10.8",
  "sha3",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -7300,23 +7547,49 @@ dependencies = [
 ]
 
 [[package]]
-name = "reth-engine-local"
+name = "reth-enclave"
 version = "1.1.4"
 dependencies = [
- "alloy-consensus",
- "alloy-primitives",
- "alloy-rpc-types-engine",
+ "aes-gcm",
+ "alloy-rlp",
+ "anyhow",
+ "derive_more",
  "eyre",
- "futures-util",
- "op-alloy-rpc-types-engine",
- "reth-beacon-consensus",
- "reth-chainspec",
+ "futures",
+ "hkdf",
+ "hyper 0.14.32",
+ "once_cell",
+ "reqwest",
+ "routerify",
+ "secp256k1",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
+ "serde",
+ "serde_json",
+ "sha2 0.10.8",
+ "tokio",
+ "tracing",
+ "warp",
+]
+
+[[package]]
+name = "reth-engine-local"
+version = "1.1.4"
+dependencies = [
+ "alloy-consensus",
+ "alloy-primitives",
+ "alloy-rpc-types-engine",
+ "eyre",
+ "futures-util",
+ "op-alloy-rpc-types-engine",
+ "reth-beacon-consensus",
+ "reth-chainspec",
  "reth-consensus",
  "reth-engine-primitives",
  "reth-engine-service",
  "reth-engine-tree",
  "reth-ethereum-engine-primitives",
  "reth-evm",
+ "reth-node-core",
  "reth-node-types",
  "reth-payload-builder",
  "reth-payload-builder-primitives",
@@ -7347,7 +7620,7 @@ dependencies = [
  "reth-primitives-traits",
  "reth-trie",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
 ]
 
@@ -7367,6 +7640,7 @@ dependencies = [
  "reth-evm-ethereum",
  "reth-exex-types",
  "reth-network-p2p",
+ "reth-node-core",
  "reth-node-types",
  "reth-payload-builder",
  "reth-primitives",
@@ -7374,7 +7648,7 @@ dependencies = [
  "reth-prune",
  "reth-stages-api",
  "reth-tasks",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
 ]
@@ -7410,6 +7684,7 @@ dependencies = [
  "reth-exex-types",
  "reth-metrics",
  "reth-network-p2p",
+ "reth-node-core",
  "reth-payload-builder",
  "reth-payload-builder-primitives",
  "reth-payload-primitives",
@@ -7431,7 +7706,7 @@ dependencies = [
  "reth-trie-parallel",
  "reth-trie-sparse",
  "revm-primitives",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -7477,7 +7752,7 @@ dependencies = [
  "reth-execution-errors",
  "reth-fs-util",
  "reth-storage-errors",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7510,7 +7785,7 @@ dependencies = [
  "serde",
  "snap",
  "test-fuzz",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -7539,7 +7814,7 @@ dependencies = [
  "reth-primitives",
  "reth-primitives-traits",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7603,9 +7878,9 @@ dependencies = [
  "once_cell",
  "proptest",
  "proptest-derive",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7669,11 +7944,12 @@ dependencies = [
  "auto_impl",
  "futures-util",
  "metrics",
- "metrics-util",
+ "metrics-util 0.18.0",
  "parking_lot",
  "reth-chainspec",
  "reth-consensus",
  "reth-consensus-common",
+ "reth-enclave",
  "reth-ethereum-forks",
  "reth-execution-errors",
  "reth-execution-types",
@@ -7699,6 +7975,7 @@ dependencies = [
  "alloy-sol-types",
  "reth-chainspec",
  "reth-consensus",
+ "reth-enclave",
  "reth-ethereum-consensus",
  "reth-ethereum-forks",
  "reth-evm",
@@ -7706,9 +7983,11 @@ dependencies = [
  "reth-primitives",
  "reth-revm",
  "reth-testing-utils",
+ "reth-tracing",
  "revm-primitives",
  "secp256k1",
  "serde_json",
+ "tokio",
 ]
 
 [[package]]
@@ -7723,7 +8002,7 @@ dependencies = [
  "reth-prune-types",
  "reth-storage-errors",
  "revm-primitives",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7818,7 +8097,7 @@ dependencies = [
  "reth-transaction-pool",
  "reth-trie-db",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
 ]
 
@@ -7845,7 +8124,7 @@ version = "1.1.4"
 dependencies = [
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -7888,7 +8167,7 @@ dependencies = [
  "rand 0.8.5",
  "reth-tracing",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -7900,12 +8179,12 @@ dependencies = [
 name = "reth-libmdbx"
 version = "1.1.4"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "byteorder",
  "criterion",
  "dashmap 6.1.0",
  "derive_more",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "parking_lot",
  "pprof",
  "rand 0.8.5",
@@ -7913,7 +8192,7 @@ dependencies = [
  "reth-mdbx-sys",
  "smallvec",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
 ]
 
@@ -7952,7 +8231,7 @@ dependencies = [
  "reqwest",
  "reth-tracing",
  "serde_with",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -8005,14 +8284,14 @@ dependencies = [
  "reth-tokio-util",
  "reth-tracing",
  "reth-transaction-pool",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "schnellru",
  "secp256k1",
  "serde",
  "serial_test",
  "smallvec",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tokio-util",
@@ -8037,7 +8316,7 @@ dependencies = [
  "reth-network-types",
  "reth-tokio-util",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
 ]
@@ -8075,7 +8354,7 @@ dependencies = [
  "secp256k1",
  "serde_json",
  "serde_with",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "url",
 ]
@@ -8106,7 +8385,7 @@ dependencies = [
  "reth-fs-util",
  "serde",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tracing",
  "zstd",
 ]
@@ -8219,6 +8498,7 @@ dependencies = [
  "reth-db",
  "reth-discv4",
  "reth-discv5",
+ "reth-enclave",
  "reth-ethereum-forks",
  "reth-net-nat",
  "reth-network",
@@ -8238,8 +8518,8 @@ dependencies = [
  "secp256k1",
  "serde",
  "shellexpand",
- "strum",
- "thiserror 2.0.5",
+ "strum 0.26.3",
+ "thiserror 2.0.12",
  "tokio",
  "toml",
  "tracing",
@@ -8323,12 +8603,12 @@ name = "reth-node-metrics"
 version = "1.1.4"
 dependencies = [
  "eyre",
- "http",
+ "http 1.3.1",
  "jsonrpsee-server",
  "metrics",
  "metrics-exporter-prometheus",
  "metrics-process",
- "metrics-util",
+ "metrics-util 0.18.0",
  "procfs 0.16.0",
  "reqwest",
  "reth-metrics",
@@ -8353,443 +8633,168 @@ dependencies = [
 ]
 
 [[package]]
-name = "reth-optimism-chainspec"
+name = "reth-optimism-primitives"
 version = "1.1.4"
 dependencies = [
- "alloy-chains",
  "alloy-consensus",
  "alloy-eips",
- "alloy-genesis",
  "alloy-primitives",
+ "alloy-rlp",
+ "arbitrary",
+ "bytes",
  "derive_more",
- "once_cell",
- "op-alloy-rpc-types",
- "reth-chainspec",
- "reth-ethereum-forks",
- "reth-network-peers",
- "reth-optimism-forks",
+ "modular-bitfield",
+ "op-alloy-consensus",
+ "proptest",
+ "proptest-arbitrary-interop",
+ "rand 0.8.5",
+ "reth-codecs",
+ "reth-primitives",
  "reth-primitives-traits",
- "serde_json",
+ "reth-zstd-compressors",
+ "revm-primitives",
+ "rstest",
+ "secp256k1",
+ "serde",
 ]
 
 [[package]]
-name = "reth-optimism-cli"
+name = "reth-payload-builder"
 version = "1.1.4"
 dependencies = [
  "alloy-consensus",
- "alloy-eips",
  "alloy-primitives",
- "alloy-rlp",
- "clap",
- "derive_more",
- "eyre",
+ "alloy-rpc-types",
+ "async-trait",
  "futures-util",
- "op-alloy-consensus",
- "proptest",
- "reth-chainspec",
- "reth-cli",
- "reth-cli-commands",
- "reth-cli-runner",
- "reth-config",
- "reth-consensus",
- "reth-db",
- "reth-db-api",
- "reth-db-common",
- "reth-downloaders",
- "reth-errors",
- "reth-execution-types",
- "reth-fs-util",
- "reth-network-p2p",
- "reth-node-builder",
- "reth-node-core",
- "reth-node-events",
- "reth-node-metrics",
- "reth-optimism-chainspec",
- "reth-optimism-evm",
- "reth-optimism-node",
- "reth-optimism-primitives",
+ "metrics",
+ "reth-chain-state",
+ "reth-ethereum-engine-primitives",
+ "reth-metrics",
+ "reth-payload-builder-primitives",
+ "reth-payload-primitives",
  "reth-primitives",
- "reth-provider",
- "reth-prune",
- "reth-stages",
- "reth-stages-types",
- "reth-static-file",
- "reth-static-file-types",
- "reth-tracing",
- "serde",
- "tempfile",
+ "revm",
  "tokio",
- "tokio-util",
+ "tokio-stream",
  "tracing",
 ]
 
 [[package]]
-name = "reth-optimism-consensus"
+name = "reth-payload-builder-primitives"
 version = "1.1.4"
 dependencies = [
- "alloy-consensus",
- "alloy-eips",
- "alloy-primitives",
- "alloy-trie",
- "reth-chainspec",
- "reth-consensus",
- "reth-consensus-common",
- "reth-optimism-chainspec",
- "reth-optimism-forks",
- "reth-optimism-primitives",
- "reth-primitives",
- "reth-trie-common",
+ "alloy-rpc-types-engine",
+ "async-trait",
+ "pin-project",
+ "reth-payload-primitives",
+ "tokio",
+ "tokio-stream",
  "tracing",
 ]
 
 [[package]]
-name = "reth-optimism-evm"
+name = "reth-payload-primitives"
 version = "1.1.4"
 dependencies = [
- "alloy-consensus",
  "alloy-eips",
- "alloy-genesis",
  "alloy-primitives",
- "derive_more",
- "op-alloy-consensus",
+ "alloy-rpc-types-engine",
+ "op-alloy-rpc-types-engine",
+ "reth-chain-state",
  "reth-chainspec",
- "reth-consensus",
- "reth-consensus-common",
- "reth-ethereum-forks",
- "reth-evm",
- "reth-execution-errors",
- "reth-execution-types",
- "reth-optimism-chainspec",
- "reth-optimism-consensus",
- "reth-optimism-forks",
- "reth-optimism-primitives",
+ "reth-errors",
  "reth-primitives",
- "reth-primitives-traits",
- "reth-prune-types",
- "reth-revm",
- "revm",
  "revm-primitives",
- "tracing",
-]
-
-[[package]]
-name = "reth-optimism-forks"
-version = "1.1.4"
-dependencies = [
- "alloy-chains",
- "alloy-primitives",
- "once_cell",
- "reth-ethereum-forks",
  "serde",
+ "thiserror 2.0.12",
+ "tokio",
 ]
 
 [[package]]
-name = "reth-optimism-node"
+name = "reth-payload-util"
 version = "1.1.4"
 dependencies = [
  "alloy-consensus",
- "alloy-eips",
- "alloy-genesis",
- "alloy-network",
  "alloy-primitives",
- "alloy-rpc-types-engine",
- "alloy-signer-local",
- "clap",
- "eyre",
- "futures",
- "op-alloy-consensus",
- "op-alloy-rpc-types-engine",
- "parking_lot",
- "reth-basic-payload-builder",
- "reth-beacon-consensus",
- "reth-chainspec",
- "reth-consensus",
- "reth-db",
- "reth-e2e-test-utils",
- "reth-engine-local",
- "reth-evm",
- "reth-network",
- "reth-node-api",
- "reth-node-builder",
- "reth-node-core",
- "reth-optimism-chainspec",
- "reth-optimism-consensus",
- "reth-optimism-evm",
- "reth-optimism-forks",
- "reth-optimism-node",
- "reth-optimism-payload-builder",
- "reth-optimism-primitives",
- "reth-optimism-rpc",
- "reth-payload-builder",
- "reth-payload-util",
- "reth-payload-validator",
  "reth-primitives",
- "reth-provider",
- "reth-revm",
- "reth-rpc-server-types",
- "reth-tasks",
- "reth-tracing",
- "reth-transaction-pool",
- "reth-trie-db",
- "revm",
- "serde",
- "serde_json",
- "tokio",
 ]
 
 [[package]]
-name = "reth-optimism-payload-builder"
+name = "reth-payload-validator"
 version = "1.1.4"
 dependencies = [
- "alloy-consensus",
- "alloy-eips",
- "alloy-primitives",
- "alloy-rlp",
- "alloy-rpc-types-debug",
- "alloy-rpc-types-engine",
- "op-alloy-consensus",
- "op-alloy-rpc-types-engine",
- "reth-basic-payload-builder",
- "reth-chain-state",
+ "alloy-rpc-types",
  "reth-chainspec",
- "reth-evm",
- "reth-execution-types",
- "reth-optimism-chainspec",
- "reth-optimism-consensus",
- "reth-optimism-evm",
- "reth-optimism-forks",
- "reth-payload-builder",
- "reth-payload-builder-primitives",
- "reth-payload-primitives",
- "reth-payload-util",
  "reth-primitives",
- "reth-provider",
- "reth-revm",
  "reth-rpc-types-compat",
- "reth-transaction-pool",
- "revm",
- "sha2 0.10.8",
- "thiserror 2.0.5",
- "tracing",
 ]
 
 [[package]]
-name = "reth-optimism-primitives"
+name = "reth-primitives"
 version = "1.1.4"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
+ "alloy-genesis",
+ "alloy-network",
  "alloy-primitives",
  "alloy-rlp",
+ "alloy-rpc-types",
+ "alloy-rpc-types-eth",
+ "alloy-serde",
+ "alloy-trie",
  "arbitrary",
+ "assert_matches",
+ "bincode",
  "bytes",
+ "c-kzg",
+ "criterion",
  "derive_more",
  "modular-bitfield",
+ "once_cell",
  "op-alloy-consensus",
+ "op-alloy-rpc-types",
+ "pprof",
  "proptest",
  "proptest-arbitrary-interop",
  "rand 0.8.5",
+ "rayon",
+ "reth-chainspec",
  "reth-codecs",
- "reth-primitives",
+ "reth-ethereum-forks",
  "reth-primitives-traits",
+ "reth-static-file-types",
+ "reth-testing-utils",
+ "reth-tracing",
+ "reth-trie-common",
  "reth-zstd-compressors",
  "revm-primitives",
  "rstest",
  "secp256k1",
  "serde",
+ "serde_json",
+ "serde_with",
+ "test-fuzz",
 ]
 
 [[package]]
-name = "reth-optimism-rpc"
+name = "reth-primitives-traits"
 version = "1.1.4"
 dependencies = [
  "alloy-consensus",
  "alloy-eips",
+ "alloy-genesis",
  "alloy-primitives",
- "alloy-rpc-types-debug",
- "alloy-rpc-types-eth",
- "jsonrpsee-core",
- "jsonrpsee-types",
- "op-alloy-consensus",
- "op-alloy-network",
- "op-alloy-rpc-jsonrpsee",
- "op-alloy-rpc-types",
- "op-alloy-rpc-types-engine",
- "parking_lot",
- "reqwest",
- "reth-chainspec",
- "reth-evm",
- "reth-network-api",
- "reth-node-api",
- "reth-node-builder",
- "reth-optimism-chainspec",
- "reth-optimism-consensus",
- "reth-optimism-evm",
- "reth-optimism-forks",
- "reth-optimism-payload-builder",
- "reth-optimism-primitives",
- "reth-primitives",
- "reth-provider",
- "reth-rpc",
- "reth-rpc-api",
- "reth-rpc-eth-api",
- "reth-rpc-eth-types",
- "reth-rpc-server-types",
- "reth-tasks",
- "reth-transaction-pool",
- "revm",
- "serde_json",
- "thiserror 2.0.5",
- "tokio",
- "tracing",
-]
-
-[[package]]
-name = "reth-optimism-storage"
-version = "1.1.4"
-dependencies = [
- "reth-codecs",
- "reth-db-api",
- "reth-primitives",
- "reth-prune-types",
- "reth-stages-types",
-]
-
-[[package]]
-name = "reth-payload-builder"
-version = "1.1.4"
-dependencies = [
- "alloy-consensus",
- "alloy-primitives",
- "alloy-rpc-types",
- "async-trait",
- "futures-util",
- "metrics",
- "reth-chain-state",
- "reth-ethereum-engine-primitives",
- "reth-metrics",
- "reth-payload-builder-primitives",
- "reth-payload-primitives",
- "reth-primitives",
- "revm",
- "tokio",
- "tokio-stream",
- "tracing",
-]
-
-[[package]]
-name = "reth-payload-builder-primitives"
-version = "1.1.4"
-dependencies = [
- "alloy-rpc-types-engine",
- "async-trait",
- "pin-project",
- "reth-payload-primitives",
- "tokio",
- "tokio-stream",
- "tracing",
-]
-
-[[package]]
-name = "reth-payload-primitives"
-version = "1.1.4"
-dependencies = [
- "alloy-eips",
- "alloy-primitives",
- "alloy-rpc-types-engine",
- "op-alloy-rpc-types-engine",
- "reth-chain-state",
- "reth-chainspec",
- "reth-errors",
- "reth-primitives",
- "revm-primitives",
- "serde",
- "thiserror 2.0.5",
- "tokio",
-]
-
-[[package]]
-name = "reth-payload-util"
-version = "1.1.4"
-dependencies = [
- "alloy-consensus",
- "alloy-primitives",
- "reth-primitives",
-]
-
-[[package]]
-name = "reth-payload-validator"
-version = "1.1.4"
-dependencies = [
- "alloy-rpc-types",
- "reth-chainspec",
- "reth-primitives",
- "reth-rpc-types-compat",
-]
-
-[[package]]
-name = "reth-primitives"
-version = "1.1.4"
-dependencies = [
- "alloy-consensus",
- "alloy-eips",
- "alloy-genesis",
- "alloy-network",
- "alloy-primitives",
- "alloy-rlp",
- "alloy-rpc-types",
- "alloy-serde",
- "alloy-trie",
- "arbitrary",
- "assert_matches",
- "bincode",
- "bytes",
- "c-kzg",
- "criterion",
- "derive_more",
- "modular-bitfield",
- "once_cell",
- "op-alloy-consensus",
- "op-alloy-rpc-types",
- "pprof",
- "proptest",
- "proptest-arbitrary-interop",
- "rand 0.8.5",
- "rayon",
- "reth-chainspec",
- "reth-codecs",
- "reth-ethereum-forks",
- "reth-primitives-traits",
- "reth-static-file-types",
- "reth-testing-utils",
- "reth-trie-common",
- "reth-zstd-compressors",
- "revm-primitives",
- "rstest",
- "secp256k1",
- "serde",
- "serde_json",
- "serde_with",
- "test-fuzz",
-]
-
-[[package]]
-name = "reth-primitives-traits"
-version = "1.1.4"
-dependencies = [
- "alloy-consensus",
- "alloy-eips",
- "alloy-genesis",
- "alloy-primitives",
- "alloy-rlp",
- "arbitrary",
- "auto_impl",
- "bincode",
- "byteorder",
- "bytes",
- "derive_more",
- "k256",
- "modular-bitfield",
+ "alloy-rlp",
+ "arbitrary",
+ "auto_impl",
+ "bincode",
+ "byteorder",
+ "bytes",
+ "derive_more",
+ "k256",
+ "modular-bitfield",
  "op-alloy-consensus",
  "proptest",
  "proptest-arbitrary-interop",
@@ -8847,7 +8852,7 @@ dependencies = [
  "reth-trie",
  "reth-trie-db",
  "revm",
- "strum",
+ "strum 0.26.3",
  "tempfile",
  "tokio",
  "tracing",
@@ -8879,8 +8884,8 @@ dependencies = [
  "reth-testing-utils",
  "reth-tokio-util",
  "reth-tracing",
- "rustc-hash 2.1.0",
- "thiserror 2.0.5",
+ "rustc-hash 2.1.1",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -8900,7 +8905,7 @@ dependencies = [
  "serde",
  "serde_json",
  "test-fuzz",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "toml",
 ]
 
@@ -8948,9 +8953,9 @@ dependencies = [
  "async-trait",
  "derive_more",
  "futures",
- "http",
- "http-body",
- "hyper",
+ "http 1.3.1",
+ "http-body 1.0.1",
+ "hyper 1.6.0",
  "jsonrpsee",
  "jsonrpsee-types",
  "jsonwebtoken",
@@ -8962,7 +8967,6 @@ dependencies = [
  "reth-consensus-common",
  "reth-engine-primitives",
  "reth-errors",
- "reth-ethereum-consensus",
  "reth-evm",
  "reth-evm-ethereum",
  "reth-network-api",
@@ -8986,7 +8990,7 @@ dependencies = [
  "revm-primitives",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tower 0.4.13",
@@ -9047,7 +9051,7 @@ dependencies = [
  "alloy-rpc-types-eth",
  "alloy-rpc-types-trace",
  "clap",
- "http",
+ "http 1.3.1",
  "jsonrpsee",
  "metrics",
  "pin-project",
@@ -9079,7 +9083,7 @@ dependencies = [
  "reth-transaction-pool",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-util",
  "tower 0.4.13",
@@ -9120,7 +9124,7 @@ dependencies = [
  "reth-tokio-util",
  "reth-transaction-pool",
  "serde",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -9136,6 +9140,7 @@ dependencies = [
  "alloy-network",
  "alloy-primitives",
  "alloy-rlp",
+ "alloy-rpc-types",
  "alloy-rpc-types-eth",
  "alloy-rpc-types-mev",
  "alloy-serde",
@@ -9204,7 +9209,7 @@ dependencies = [
  "schnellru",
  "serde",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -9215,7 +9220,7 @@ name = "reth-rpc-layer"
 version = "1.1.4"
 dependencies = [
  "alloy-rpc-types-engine",
- "http",
+ "http 1.3.1",
  "http-body-util",
  "jsonrpsee",
  "jsonrpsee-http-client",
@@ -9239,7 +9244,7 @@ dependencies = [
  "reth-errors",
  "reth-network-api",
  "serde",
- "strum",
+ "strum 0.26.3",
 ]
 
 [[package]]
@@ -9305,7 +9310,7 @@ dependencies = [
  "reth-trie",
  "reth-trie-db",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -9333,7 +9338,7 @@ dependencies = [
  "reth-static-file-types",
  "reth-testing-utils",
  "reth-tokio-util",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -9388,7 +9393,7 @@ dependencies = [
  "clap",
  "derive_more",
  "serde",
- "strum",
+ "strum 0.26.3",
 ]
 
 [[package]]
@@ -9423,6 +9428,7 @@ dependencies = [
  "alloy-primitives",
  "alloy-rlp",
  "derive_more",
+ "reth-enclave",
  "reth-fs-util",
  "reth-primitives-traits",
  "reth-static-file-types",
@@ -9439,7 +9445,7 @@ dependencies = [
  "pin-project",
  "rayon",
  "reth-metrics",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
  "tracing-futures",
@@ -9493,7 +9499,7 @@ dependencies = [
  "aquamarine",
  "assert_matches",
  "auto_impl",
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "criterion",
  "futures-util",
  "metrics",
@@ -9518,13 +9524,13 @@ dependencies = [
  "reth-tracing",
  "revm-interpreter",
  "revm-primitives",
- "rustc-hash 2.1.0",
+ "rustc-hash 2.1.1",
  "schnellru",
  "serde",
  "serde_json",
  "smallvec",
  "tempfile",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
  "tokio",
  "tokio-stream",
  "tracing",
@@ -9611,6 +9617,7 @@ dependencies = [
  "reth-trie",
  "reth-trie-common",
  "revm",
+ "revm-primitives",
  "serde",
  "serde_json",
  "similar-asserts",
@@ -9640,7 +9647,8 @@ dependencies = [
  "reth-trie",
  "reth-trie-common",
  "reth-trie-db",
- "thiserror 2.0.5",
+ "revm-primitives",
+ "thiserror 2.0.12",
  "tokio",
  "tracing",
 ]
@@ -9665,8 +9673,9 @@ dependencies = [
  "reth-tracing",
  "reth-trie",
  "reth-trie-common",
+ "revm-primitives",
  "smallvec",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
@@ -9679,23 +9688,28 @@ dependencies = [
 [[package]]
 name = "revm"
 version = "18.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "15689a3c6a8d14b647b4666f2e236ef47b5a5133cdfd423f545947986fff7013"
+source = "git+https://github.com/SeismicSystems/seismic-revm.git?rev=77a08e9#77a08e9b70e2a29e83f1a15aacaecb5dfc7d7b70"
 dependencies = [
  "auto_impl",
  "cfg-if",
  "dyn-clone",
+ "hkdf",
+ "merlin",
+ "rand_core 0.6.4",
  "revm-interpreter",
  "revm-precompile",
+ "schnorrkel",
+ "secp256k1",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=f2c0757)",
  "serde",
  "serde_json",
+ "sha2 0.10.8",
 ]
 
 [[package]]
 name = "revm-inspectors"
 version = "0.13.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8d056aaa21f36038ab35fe8ce940ee332903a0b4b992b8ca805fb60c85eb2086"
+source = "git+https://github.com/SeismicSystems/seismic-revm-inspectors.git?rev=9868b93#9868b93ab3edc0c5e495f85f1474a8ef23208f88"
 dependencies = [
  "alloy-primitives",
  "alloy-rpc-types-eth",
@@ -9706,16 +9720,18 @@ dependencies = [
  "boa_gc",
  "colorchoice",
  "revm",
+ "revm-primitives",
  "serde_json",
- "thiserror 2.0.5",
+ "thiserror 2.0.12",
 ]
 
 [[package]]
 name = "revm-interpreter"
 version = "14.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "74e3f11d0fed049a4a10f79820c59113a79b38aed4ebec786a79d5c667bfeb51"
+source = "git+https://github.com/SeismicSystems/seismic-revm.git?rev=77a08e9#77a08e9b70e2a29e83f1a15aacaecb5dfc7d7b70"
 dependencies = [
+ "paste",
+ "phf",
  "revm-primitives",
  "serde",
 ]
@@ -9723,8 +9739,7 @@ dependencies = [
 [[package]]
 name = "revm-precompile"
 version = "15.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e381060af24b750069a2b2d2c54bba273d84e8f5f9e8026fc9262298e26cc336"
+source = "git+https://github.com/SeismicSystems/seismic-revm.git?rev=77a08e9#77a08e9b70e2a29e83f1a15aacaecb5dfc7d7b70"
 dependencies = [
  "aurora-engine-modexp",
  "blst",
@@ -9743,20 +9758,21 @@ dependencies = [
 [[package]]
 name = "revm-primitives"
 version = "14.0.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3702f132bb484f4f0d0ca4f6fbde3c82cfd745041abbedd6eda67730e1868ef0"
+source = "git+https://github.com/SeismicSystems/seismic-revm.git?rev=77a08e9#77a08e9b70e2a29e83f1a15aacaecb5dfc7d7b70"
 dependencies = [
  "alloy-eip2930",
  "alloy-eip7702",
  "alloy-primitives",
  "auto_impl",
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "bitvec",
  "c-kzg",
  "cfg-if",
  "dyn-clone",
  "enumn",
  "hex",
+ "proptest",
+ "proptest-derive",
  "serde",
 ]
 
@@ -9781,15 +9797,14 @@ dependencies = [
 
 [[package]]
 name = "ring"
-version = "0.17.8"
+version = "0.17.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d"
+checksum = "a4689e6c2294d81e88dc6261c768b63bc4fcdb852be6d1352498b114f61383b7"
 dependencies = [
  "cc",
  "cfg-if",
  "getrandom 0.2.15",
  "libc",
- "spin",
  "untrusted",
  "windows-sys 0.52.0",
 ]
@@ -9852,9 +9867,9 @@ dependencies = [
 
 [[package]]
 name = "roaring"
-version = "0.10.8"
+version = "0.10.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "395b0c39c00f9296f3937624c1fa4e0ee44f8c0e4b2c49408179ef381c6c2e6e"
+checksum = "a652edd001c53df0b3f96a36a8dc93fce6866988efc16808235653c6bcac8bf2"
 dependencies = [
  "bytemuck",
  "byteorder",
@@ -9875,6 +9890,19 @@ version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "afab94fb28594581f62d981211a9a4d53cc8130bbcbbb89a0440d9b8e81a7746"
 
+[[package]]
+name = "routerify"
+version = "3.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "496c1d3718081c45ba9c31fbfc07417900aa96f4070ff90dc29961836b7a9945"
+dependencies = [
+ "http 0.2.12",
+ "hyper 0.14.32",
+ "lazy_static",
+ "percent-encoding",
+ "regex",
+]
+
 [[package]]
 name = "rstest"
 version = "0.23.0"
@@ -9901,23 +9929,25 @@ dependencies = [
  "regex",
  "relative-path",
  "rustc_version 0.4.1",
- "syn 2.0.90",
+ "syn 2.0.100",
  "unicode-ident",
 ]
 
 [[package]]
 name = "ruint"
-version = "1.12.3"
+version = "1.13.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2c3cc4c2511671f327125da14133d0c5c5d137f006a1017a16f557bc85b16286"
+checksum = "825df406ec217a8116bd7b06897c6cc8f65ffefc15d030ae2c9540acc9ed50b6"
 dependencies = [
  "alloy-rlp",
  "arbitrary",
  "ark-ff 0.3.0",
  "ark-ff 0.4.2",
  "bytes",
- "fastrlp",
+ "fastrlp 0.3.1",
+ "fastrlp 0.4.0",
  "num-bigint",
+ "num-integer",
  "num-traits",
  "parity-scale-codec",
  "primitive-types",
@@ -9950,9 +9980,9 @@ checksum = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"
 
 [[package]]
 name = "rustc-hash"
-version = "2.1.0"
+version = "2.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c7fb8039b3032c191086b10f11f319a6e99e1e82889c5cc6046f515c9db1d497"
+checksum = "357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d"
 dependencies = [
  "rand 0.8.5",
 ]
@@ -9978,27 +10008,40 @@ version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92"
 dependencies = [
- "semver 1.0.23",
+ "semver 1.0.26",
 ]
 
 [[package]]
 name = "rustix"
-version = "0.38.41"
+version = "0.38.44"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d7f649912bc1495e167a6edee79151c84b1bad49748cb4f1f1167f459f6224f6"
+checksum = "fdb5bc1ae2baa591800df16c9ca78619bf65c0488b41b96ccec5d11220d8c154"
 dependencies = [
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "errno",
  "libc",
- "linux-raw-sys",
- "windows-sys 0.52.0",
+ "linux-raw-sys 0.4.15",
+ "windows-sys 0.59.0",
+]
+
+[[package]]
+name = "rustix"
+version = "1.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e56a18552996ac8d29ecc3b190b4fdbb2d91ca4ec396de7bbffaf43f3d637e96"
+dependencies = [
+ "bitflags 2.9.0",
+ "errno",
+ "libc",
+ "linux-raw-sys 0.9.3",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "rustls"
-version = "0.23.19"
+version = "0.23.25"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "934b404430bb06b3fae2cba809eb45a1ab1aecd64491213d7c3301b88393f8d1"
+checksum = "822ee9188ac4ec04a2f0531e55d035fb2de73f18b41a63c70c2712503b6fb13c"
 dependencies = [
  "log",
  "once_cell",
@@ -10009,19 +10052,6 @@ dependencies = [
  "zeroize",
 ]
 
-[[package]]
-name = "rustls-native-certs"
-version = "0.7.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5bfb394eeed242e909609f56089eecfe5fda225042e8b171791b9c95f5931e5"
-dependencies = [
- "openssl-probe",
- "rustls-pemfile",
- "rustls-pki-types",
- "schannel",
- "security-framework 2.11.1",
-]
-
 [[package]]
 name = "rustls-native-certs"
 version = "0.8.1"
@@ -10031,7 +10061,7 @@ dependencies = [
  "openssl-probe",
  "rustls-pki-types",
  "schannel",
- "security-framework 3.0.1",
+ "security-framework",
 ]
 
 [[package]]
@@ -10045,32 +10075,32 @@ dependencies = [
 
 [[package]]
 name = "rustls-pki-types"
-version = "1.10.0"
+version = "1.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "16f1201b3c9a7ee8039bcadc17b7e605e2945b27eee7631788c1bd2b0643674b"
+checksum = "917ce264624a4b4db1c364dcc35bfca9ded014d0a958cd47ad3e960e988ea51c"
 dependencies = [
  "web-time",
 ]
 
 [[package]]
 name = "rustls-platform-verifier"
-version = "0.3.4"
+version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "afbb878bdfdf63a336a5e63561b1835e7a8c91524f51621db870169eac84b490"
+checksum = "4a5467026f437b4cb2a533865eaa73eb840019a0916f4b9ec563c6e617e086c9"
 dependencies = [
- "core-foundation 0.9.4",
+ "core-foundation",
  "core-foundation-sys",
  "jni",
  "log",
  "once_cell",
  "rustls",
- "rustls-native-certs 0.7.3",
+ "rustls-native-certs",
  "rustls-platform-verifier-android",
  "rustls-webpki",
- "security-framework 2.11.1",
+ "security-framework",
  "security-framework-sys",
- "webpki-roots",
- "winapi",
+ "webpki-root-certs",
+ "windows-sys 0.59.0",
 ]
 
 [[package]]
@@ -10081,9 +10111,9 @@ checksum = "f87165f0995f63a9fbeea62b64d10b4d9d8e78ec6d7d51fb2125fda7bb36788f"
 
 [[package]]
 name = "rustls-webpki"
-version = "0.102.8"
+version = "0.103.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9"
+checksum = "0aa4eeac2588ffff23e9d7a7e9b3f971c5fb5b7ebc9452745e0c232c64f83b2f"
 dependencies = [
  "ring",
  "rustls-pki-types",
@@ -10092,9 +10122,9 @@ dependencies = [
 
 [[package]]
 name = "rustversion"
-version = "1.0.18"
+version = "1.0.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e819f2bc632f285be6d7cd36e25940d45b2391dd6d9b939e79de557f7014248"
+checksum = "eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2"
 
 [[package]]
 name = "rusty-fork"
@@ -10110,15 +10140,15 @@ dependencies = [
 
 [[package]]
 name = "ryu"
-version = "1.0.18"
+version = "1.0.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f"
+checksum = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f"
 
 [[package]]
 name = "ryu-js"
-version = "1.0.1"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ad97d4ce1560a5e27cec89519dc8300d1aa6035b099821261c651486a19e44d5"
+checksum = "dd29631678d6fb0903b69223673e122c32e9ae559d0960a38d574695ebc0ea15"
 
 [[package]]
 name = "same-file"
@@ -10131,9 +10161,9 @@ dependencies = [
 
 [[package]]
 name = "scc"
-version = "2.2.5"
+version = "2.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "66b202022bb57c049555430e11fc22fea12909276a80a4c3d368da36ac1d88ed"
+checksum = "ea091f6cac2595aa38993f04f4ee692ed43757035c36e67c180b6828356385b1"
 dependencies = [
  "sdd",
 ]
@@ -10149,15 +10179,36 @@ dependencies = [
 
 [[package]]
 name = "schnellru"
-version = "0.2.3"
+version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c9a8ef13a93c54d20580de1e5c413e624e53121d42fc7e2c11d10ef7f8b02367"
+checksum = "356285bbf17bea63d9e52e96bd18f039672ac92b55b8cb997d6162a2a37d1649"
 dependencies = [
  "ahash",
  "cfg-if",
  "hashbrown 0.13.2",
 ]
 
+[[package]]
+name = "schnorrkel"
+version = "0.11.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0"
+dependencies = [
+ "aead",
+ "arrayref",
+ "arrayvec",
+ "cfg-if",
+ "curve25519-dalek",
+ "getrandom_or_panic",
+ "merlin",
+ "rand_core 0.6.4",
+ "serde",
+ "serde_bytes",
+ "sha2 0.10.8",
+ "subtle",
+ "zeroize",
+]
+
 [[package]]
 name = "scoped-tls"
 version = "1.0.1"
@@ -10172,9 +10223,9 @@ checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
 [[package]]
 name = "sdd"
-version = "3.0.4"
+version = "3.0.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "49c1eeaf4b6a87c7479688c6d52b9f1153cedd3c489300564f932b065c6eab95"
+checksum = "584e070911c7017da6cb2eb0788d09f43d789029b5877d3e5ecc8acf86ceee21"
 
 [[package]]
 name = "sec1"
@@ -10213,39 +10264,222 @@ dependencies = [
 
 [[package]]
 name = "security-framework"
-version = "2.11.1"
+version = "3.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02"
+checksum = "271720403f46ca04f7ba6f55d438f8bd878d6b8ca0a1046e8228c4145bcbb316"
 dependencies = [
- "bitflags 2.6.0",
- "core-foundation 0.9.4",
+ "bitflags 2.9.0",
+ "core-foundation",
  "core-foundation-sys",
  "libc",
- "num-bigint",
  "security-framework-sys",
 ]
 
 [[package]]
-name = "security-framework"
-version = "3.0.1"
+name = "security-framework-sys"
+version = "2.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e1415a607e92bec364ea2cf9264646dcce0f91e6d65281bd6f2819cca3bf39c8"
+checksum = "49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32"
 dependencies = [
- "bitflags 2.6.0",
- "core-foundation 0.10.0",
  "core-foundation-sys",
  "libc",
- "security-framework-sys",
 ]
 
 [[package]]
-name = "security-framework-sys"
-version = "2.12.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fa39c7303dc58b5543c94d22c1766b0d31f2ee58306363ea622b10bbc075eaa2"
+name = "seismic-enclave"
+version = "0.1.0"
+source = "git+https://github.com/SeismicSystems/enclave.git?rev=352164b#352164b0f696583887c717cfc44dceadb99d40db"
 dependencies = [
- "core-foundation-sys",
- "libc",
+ "aes-gcm",
+ "anyhow",
+ "bincode",
+ "byteorder",
+ "bytes",
+ "hkdf",
+ "jsonrpsee",
+ "kbs-types",
+ "once_cell",
+ "rand 0.9.0",
+ "reqwest",
+ "schnorrkel",
+ "secp256k1",
+ "seismic-enclave-derive",
+ "serde",
+ "serde_json",
+ "sha2 0.10.8",
+ "strum 0.26.3",
+ "tokio",
+ "tracing",
+]
+
+[[package]]
+name = "seismic-enclave"
+version = "0.1.0"
+source = "git+https://github.com/SeismicSystems/enclave.git?rev=f2c0757#f2c0757cf12208049a758f797f263912b00cf842"
+dependencies = [
+ "aes-gcm",
+ "anyhow",
+ "bincode",
+ "byteorder",
+ "bytes",
+ "hkdf",
+ "http-body-util",
+ "hyper 0.14.32",
+ "kbs-types",
+ "once_cell",
+ "reqwest",
+ "schnorrkel",
+ "secp256k1",
+ "serde",
+ "serde_json",
+ "sha2 0.10.8",
+ "strum 0.25.0",
+ "tokio",
+]
+
+[[package]]
+name = "seismic-enclave-derive"
+version = "0.1.0"
+source = "git+https://github.com/SeismicSystems/enclave.git?rev=352164b#352164b0f696583887c717cfc44dceadb99d40db"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "seismic-node"
+version = "1.1.4"
+dependencies = [
+ "alloy-consensus",
+ "alloy-dyn-abi",
+ "alloy-eips",
+ "alloy-json-abi",
+ "alloy-network",
+ "alloy-primitives",
+ "alloy-provider",
+ "alloy-rlp",
+ "alloy-rpc-types",
+ "alloy-rpc-types-eth",
+ "alloy-signer-local",
+ "alloy-sol-types",
+ "arbitrary",
+ "assert_cmd",
+ "enr",
+ "eyre",
+ "futures",
+ "jsonrpsee",
+ "k256",
+ "once_cell",
+ "reqwest",
+ "reth-beacon-consensus",
+ "reth-blockchain-tree",
+ "reth-chainspec",
+ "reth-cli",
+ "reth-consensus-debug-client",
+ "reth-e2e-test-utils",
+ "reth-enclave",
+ "reth-engine-tree",
+ "reth-engine-util",
+ "reth-errors",
+ "reth-evm",
+ "reth-exex",
+ "reth-network",
+ "reth-network-types",
+ "reth-node-api",
+ "reth-node-builder",
+ "reth-node-core",
+ "reth-node-ethereum",
+ "reth-node-events",
+ "reth-payload-builder",
+ "reth-primitives",
+ "reth-provider",
+ "reth-revm",
+ "reth-rpc-builder",
+ "reth-rpc-engine-api",
+ "reth-rpc-eth-api",
+ "reth-rpc-eth-types",
+ "reth-storage-api",
+ "reth-tasks",
+ "reth-tracing",
+ "reth-transaction-pool",
+ "reth-trie-common",
+ "reth-trie-db",
+ "secp256k1",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
+ "seismic-rpc-api",
+ "serde",
+ "serde_json",
+ "sysinfo 0.29.11",
+ "tempfile",
+ "tokio",
+ "tokio-stream",
+ "tracing",
+]
+
+[[package]]
+name = "seismic-reth"
+version = "1.1.4"
+dependencies = [
+ "alloy-network",
+ "alloy-primitives",
+ "alloy-signer-local",
+ "clap",
+ "eyre",
+ "reth",
+ "reth-cli-commands",
+ "reth-cli-util",
+ "reth-enclave",
+ "reth-node-builder",
+ "reth-node-core",
+ "reth-node-ethereum",
+ "reth-node-metrics",
+ "reth-primitives",
+ "reth-provider",
+ "reth-tracing",
+ "seismic-node",
+ "seismic-rpc-api",
+ "tokio",
+ "tracing",
+]
+
+[[package]]
+name = "seismic-rpc-api"
+version = "1.1.4"
+dependencies = [
+ "alloy-dyn-abi",
+ "alloy-primitives",
+ "alloy-rpc-types",
+ "alloy-rpc-types-engine",
+ "jsonrpsee",
+ "reth-beacon-consensus",
+ "reth-chain-state",
+ "reth-chainspec",
+ "reth-consensus",
+ "reth-enclave",
+ "reth-ethereum-engine-primitives",
+ "reth-evm",
+ "reth-evm-ethereum",
+ "reth-network-api",
+ "reth-node-core",
+ "reth-payload-builder",
+ "reth-primitives",
+ "reth-provider",
+ "reth-rpc",
+ "reth-rpc-builder",
+ "reth-rpc-engine-api",
+ "reth-rpc-eth-api",
+ "reth-rpc-eth-types",
+ "reth-rpc-layer",
+ "reth-rpc-server-types",
+ "reth-tasks",
+ "reth-tracing",
+ "reth-transaction-pool",
+ "secp256k1",
+ "seismic-enclave 0.1.0 (git+https://github.com/SeismicSystems/enclave.git?rev=352164b)",
+ "seismic-node",
+ "thiserror 2.0.12",
+ "tokio",
 ]
 
 [[package]]
@@ -10259,9 +10493,9 @@ dependencies = [
 
 [[package]]
 name = "semver"
-version = "1.0.23"
+version = "1.0.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b"
+checksum = "56e6fa9c48d24d85fb3de5ad847117517440f6beceb7798af16b4a87d616b8d0"
 dependencies = [
  "serde",
 ]
@@ -10289,31 +10523,40 @@ checksum = "cd0b0ec5f1c1ca621c432a25813d8d60c88abe6d3e08a3eb9cf37d97a0fe3d73"
 
 [[package]]
 name = "serde"
-version = "1.0.215"
+version = "1.0.219"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6513c1ad0b11a9376da888e3e0baa0077f1aed55c17f50e7b2397136129fb88f"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
 dependencies = [
  "serde_derive",
 ]
 
+[[package]]
+name = "serde_bytes"
+version = "0.11.17"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8437fd221bde2d4ca316d61b90e337e9e702b3820b87d63caa9ba6c02bd06d96"
+dependencies = [
+ "serde",
+]
+
 [[package]]
 name = "serde_derive"
-version = "1.0.215"
+version = "1.0.219"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ad1e866f866923f252f05c889987993144fb74e722403468a4ebd70c3cd756c0"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "serde_json"
-version = "1.0.133"
+version = "1.0.140"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c7fceb2473b9166b2294ef05efcb65a3db80803f0b03ef86a5fc88a2b85ee377"
+checksum = "20068b6e96dc6c9bd23e01df8827e6c7e1f2fddd43c21810382803c136b99373"
 dependencies = [
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "itoa",
  "memchr",
  "ryu",
@@ -10333,13 +10576,13 @@ dependencies = [
 
 [[package]]
 name = "serde_repr"
-version = "0.1.19"
+version = "0.1.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9"
+checksum = "175ee3e80ae9982737ca543e96133087cbd9a485eecc3bc4de9c1a37b47ea59c"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10365,15 +10608,15 @@ dependencies = [
 
 [[package]]
 name = "serde_with"
-version = "3.11.0"
+version = "3.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e28bdad6db2b8340e449f7108f020b3b092e8583a9e3fb82713e1d4e71fe817"
+checksum = "d6b6f7f2fcb69f747921f79f3926bd1e203fce4fef62c268dd3abfb6d86029aa"
 dependencies = [
  "base64 0.22.1",
  "chrono",
  "hex",
  "indexmap 1.9.3",
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "serde",
  "serde_derive",
  "serde_json",
@@ -10383,14 +10626,14 @@ dependencies = [
 
 [[package]]
 name = "serde_with_macros"
-version = "3.11.0"
+version = "3.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9d846214a9854ef724f3da161b426242d8de7c1fc7de2f89bb1efcb154dca79d"
+checksum = "8d00caa5193a3c8362ac2b73be6b9e768aa5a4b2f721d8f4b339600c3cb51f8e"
 dependencies = [
  "darling",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10423,7 +10666,7 @@ checksum = "5d69265a08751de7844521fd15003ae0a888e035773ba05695c5c759a6f89eef"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10547,9 +10790,9 @@ dependencies = [
 
 [[package]]
 name = "similar"
-version = "2.6.0"
+version = "2.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1de1d4f81173b03af4c0cbed3c898f6bff5b870e4a7f5d6f4057d62a7a4b686e"
+checksum = "bbbb5d9659141646ae647b42fe094daf6c6192d1620870b449d9557f748b2daa"
 dependencies = [
  "bstr",
  "unicode-segmentation",
@@ -10557,9 +10800,9 @@ dependencies = [
 
 [[package]]
 name = "similar-asserts"
-version = "1.6.0"
+version = "1.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cfe85670573cd6f0fa97940f26e7e6601213c3b0555246c24234131f88c5709e"
+checksum = "b5b441962c817e33508847a22bd82f03a30cff43642dc2fae8b050566121eb9a"
 dependencies = [
  "console",
  "serde",
@@ -10568,21 +10811,21 @@ dependencies = [
 
 [[package]]
 name = "simple_asn1"
-version = "0.6.2"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "adc4e5204eb1910f40f9cfa375f6f05b68c3abac4b6fd879c8ff5e7ae8a0a085"
+checksum = "297f631f50729c8c99b84667867963997ec0b50f32b2a7dbcab828ef0541e8bb"
 dependencies = [
  "num-bigint",
  "num-traits",
- "thiserror 1.0.69",
+ "thiserror 2.0.12",
  "time",
 ]
 
 [[package]]
 name = "siphasher"
-version = "0.3.11"
+version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d"
+checksum = "56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d"
 
 [[package]]
 name = "sketches-ddsketch"
@@ -10601,9 +10844,9 @@ dependencies = [
 
 [[package]]
 name = "smallvec"
-version = "1.13.2"
+version = "1.14.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67"
+checksum = "7fcf8323ef1faaee30a44a340193b1ac6814fd9b7b4e88e9d4519a3e4abe1cfd"
 dependencies = [
  "arbitrary",
  "serde",
@@ -10634,7 +10877,7 @@ dependencies = [
  "base64 0.22.1",
  "bytes",
  "futures",
- "http",
+ "http 1.3.1",
  "httparse",
  "log",
  "rand 0.8.5",
@@ -10687,13 +10930,35 @@ version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f"
 
+[[package]]
+name = "strum"
+version = "0.25.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125"
+dependencies = [
+ "strum_macros 0.25.3",
+]
+
 [[package]]
 name = "strum"
 version = "0.26.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06"
 dependencies = [
- "strum_macros",
+ "strum_macros 0.26.4",
+]
+
+[[package]]
+name = "strum_macros"
+version = "0.25.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "23dc1fa9ac9c169a78ba62f0b841814b7abae11bdd047b9c58f893439e309ea0"
+dependencies = [
+ "heck 0.4.1",
+ "proc-macro2",
+ "quote",
+ "rustversion",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10702,11 +10967,11 @@ version = "0.26.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be"
 dependencies = [
- "heck",
+ "heck 0.5.0",
  "proc-macro2",
  "quote",
  "rustversion",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10730,9 +10995,9 @@ checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
 
 [[package]]
 name = "symbolic-common"
-version = "12.12.3"
+version = "12.14.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5ba5365997a4e375660bed52f5b42766475d5bc8ceb1bb13fea09c469ea0f49"
+checksum = "66135c8273581acaab470356f808a1c74a707fe7ec24728af019d7247e089e71"
 dependencies = [
  "debugid",
  "memmap2",
@@ -10742,9 +11007,9 @@ dependencies = [
 
 [[package]]
 name = "symbolic-demangle"
-version = "12.12.3"
+version = "12.14.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "beff338b2788519120f38c59ff4bb15174f52a183e547bac3d6072c2c0aa48aa"
+checksum = "42bcacd080282a72e795864660b148392af7babd75691d5ae9a3b77e29c98c77"
 dependencies = [
  "cpp_demangle",
  "rustc-demangle",
@@ -10764,9 +11029,9 @@ dependencies = [
 
 [[package]]
 name = "syn"
-version = "2.0.90"
+version = "2.0.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "919d3b74a5dd0ccd15aeb8f93e7006bd9e14c295087c9896a110f490752bcf31"
+checksum = "b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -10775,22 +11040,27 @@ dependencies = [
 
 [[package]]
 name = "syn-solidity"
-version = "0.8.15"
+version = "0.8.15"
+source = "git+https://github.com/SeismicSystems/seismic-alloy-core.git?rev=5dc07cc#5dc07cc6a675a701b51ddfa4e655b3013a358b31"
+dependencies = [
+ "paste",
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "syn-solidity"
+version = "0.8.23"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "219389c1ebe89f8333df8bdfb871f6631c552ff399c23cac02480b6088aad8f0"
+checksum = "d975606bae72d8aad5b07d9342465e123a2cccf53a5a735aedf81ca92a709ecb"
 dependencies = [
  "paste",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
-[[package]]
-name = "sync_wrapper"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160"
-
 [[package]]
 name = "sync_wrapper"
 version = "1.0.2"
@@ -10808,7 +11078,22 @@ checksum = "c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "sysinfo"
+version = "0.29.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd727fc423c2060f6c92d9534cef765c65a6ed3f428a03d7def74a8c4348e666"
+dependencies = [
+ "cfg-if",
+ "core-foundation-sys",
+ "libc",
+ "ntapi",
+ "once_cell",
+ "rayon",
+ "winapi",
 ]
 
 [[package]]
@@ -10838,22 +11123,22 @@ checksum = "55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369"
 
 [[package]]
 name = "tempfile"
-version = "3.14.0"
+version = "3.19.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "28cce251fcbc87fac86a866eeb0d6c2d536fc16d06f184bb61aeae11aa4cee0c"
+checksum = "488960f40a3fd53d72c2a29a58722561dee8afdd175bd88e3db4677d7b2ba600"
 dependencies = [
- "cfg-if",
- "fastrand 2.2.0",
+ "fastrand 2.3.0",
+ "getrandom 0.3.2",
  "once_cell",
- "rustix",
+ "rustix 1.0.3",
  "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "termtree"
-version = "0.4.1"
+version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76"
+checksum = "8f50febec83f5ee1df3015341d8bd429f2d1cc62bcba7ea2076759d315084683"
 
 [[package]]
 name = "test-fuzz"
@@ -10885,13 +11170,13 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a7e6b4c7391a38f0f026972ec2200bcfd1ec45533aa266fdae5858d011afc500"
 dependencies = [
  "darling",
- "heck",
+ "heck 0.5.0",
  "itertools 0.13.0",
  "once_cell",
  "prettyplease",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -10924,11 +11209,11 @@ dependencies = [
 
 [[package]]
 name = "thiserror"
-version = "2.0.5"
+version = "2.0.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "643caef17e3128658ff44d85923ef2d28af81bb71e0d67bbfe1d76f19a73e053"
+checksum = "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708"
 dependencies = [
- "thiserror-impl 2.0.5",
+ "thiserror-impl 2.0.12",
 ]
 
 [[package]]
@@ -10939,18 +11224,18 @@ checksum = "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "2.0.5"
+version = "2.0.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "995d0bbc9995d1f19d28b7215a9352b0fc3cd3a2d2ec95c2cadc485cdedbcdde"
+checksum = "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11005,9 +11290,9 @@ dependencies = [
 
 [[package]]
 name = "time"
-version = "0.3.37"
+version = "0.3.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "35e7868883861bd0e56d9ac6efcaaca0d6d5d82a2a7ec8209ff492c07cf37b21"
+checksum = "9d9c75b47bdff86fa3334a3db91356b8d7d86a9b839dab7d0bdc5c3d3a077618"
 dependencies = [
  "deranged",
  "itoa",
@@ -11023,15 +11308,15 @@ dependencies = [
 
 [[package]]
 name = "time-core"
-version = "0.1.2"
+version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3"
+checksum = "c9e9a38711f559d9e3ce1cdb06dd7c5b8ea546bc90052da6d06bb76da74bb07c"
 
 [[package]]
 name = "time-macros"
-version = "0.2.19"
+version = "0.2.21"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2834e6017e3e5e4b9834939793b282bc03b37a3336245fa820e35e233e2a85de"
+checksum = "29aa485584182073ed57fd5004aa09c371f021325014694e432313345865fd04"
 dependencies = [
  "num-conv",
  "time-core",
@@ -11068,9 +11353,9 @@ dependencies = [
 
 [[package]]
 name = "tinyvec"
-version = "1.8.0"
+version = "1.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "445e881f4f6d382d5f27c034e25eb92edd7c784ceab92a0937db7f2e9471b938"
+checksum = "09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71"
 dependencies = [
  "tinyvec_macros",
 ]
@@ -11083,9 +11368,9 @@ checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
 
 [[package]]
 name = "tokio"
-version = "1.42.0"
+version = "1.44.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5cec9b21b0450273377fc97bd4c33a8acffc8c996c987a7c5b319a0083707551"
+checksum = "f382da615b842244d4b8738c82ed1275e6c5dd90c459a30941cd07080b06c91a"
 dependencies = [
  "backtrace",
  "bytes",
@@ -11101,20 +11386,20 @@ dependencies = [
 
 [[package]]
 name = "tokio-macros"
-version = "2.4.0"
+version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "693d596312e88961bc67d7f1f97af8a70227d9f90c31bba5806eec004978d752"
+checksum = "6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "tokio-rustls"
-version = "0.26.1"
+version = "0.26.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5f6d0975eaace0cf0fcadee4e4aaa5da15b5c079146f2cffb67c113be122bf37"
+checksum = "8e727b36a1a0e8b74c376ac2211e40c2c8af09fb4013c60d910495810f008e9b"
 dependencies = [
  "rustls",
  "tokio",
@@ -11132,6 +11417,18 @@ dependencies = [
  "tokio-util",
 ]
 
+[[package]]
+name = "tokio-tungstenite"
+version = "0.21.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c83b561d025642014097b66e6c1bb422783339e0909e4429cde4749d1990bc38"
+dependencies = [
+ "futures-util",
+ "log",
+ "tokio",
+ "tungstenite 0.21.0",
+]
+
 [[package]]
 name = "tokio-tungstenite"
 version = "0.24.0"
@@ -11144,15 +11441,15 @@ dependencies = [
  "rustls-pki-types",
  "tokio",
  "tokio-rustls",
- "tungstenite",
+ "tungstenite 0.24.0",
  "webpki-roots",
 ]
 
 [[package]]
 name = "tokio-util"
-version = "0.7.13"
+version = "0.7.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d7fcaa8d55a2bdd6b83ace262b016eca0d79ee02818c5c1bcdf0305114081078"
+checksum = "6b9590b93e6fcc1739458317cccd391ad3955e2bde8913edf6f95f9e65a8f034"
 dependencies = [
  "bytes",
  "futures-core",
@@ -11165,9 +11462,9 @@ dependencies = [
 
 [[package]]
 name = "toml"
-version = "0.8.19"
+version = "0.8.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e"
+checksum = "cd87a5cdd6ffab733b2f74bc4fd7ee5fff6634124999ac278c35fc78c6120148"
 dependencies = [
  "serde",
  "serde_spanned",
@@ -11186,15 +11483,15 @@ dependencies = [
 
 [[package]]
 name = "toml_edit"
-version = "0.22.22"
+version = "0.22.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5"
+checksum = "17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474"
 dependencies = [
- "indexmap 2.7.0",
+ "indexmap 2.8.0",
  "serde",
  "serde_spanned",
  "toml_datetime",
- "winnow",
+ "winnow 0.7.4",
 ]
 
 [[package]]
@@ -11220,14 +11517,15 @@ dependencies = [
 
 [[package]]
 name = "tower"
-version = "0.5.1"
+version = "0.5.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2873938d487c3cfb9aed7546dc9f2711d867c9f90c46b889989a2cb84eba6b4f"
+checksum = "d039ad9159c98b70ecfd540b2573b97f7f52c3e8d9f8ad57a24b916a536975f9"
 dependencies = [
  "futures-core",
  "futures-util",
  "pin-project-lite",
- "sync_wrapper 0.1.2",
+ "sync_wrapper",
+ "tokio",
  "tower-layer",
  "tower-service",
 ]
@@ -11240,12 +11538,12 @@ checksum = "403fa3b783d4b626a8ad51d766ab03cb6d2dbfc46b1c5d4448395e6628dc9697"
 dependencies = [
  "async-compression",
  "base64 0.22.1",
- "bitflags 2.6.0",
+ "bitflags 2.9.0",
  "bytes",
  "futures-core",
  "futures-util",
- "http",
- "http-body",
+ "http 1.3.1",
+ "http-body 1.0.1",
  "http-body-util",
  "http-range-header",
  "httpdate",
@@ -11256,7 +11554,7 @@ dependencies = [
  "pin-project-lite",
  "tokio",
  "tokio-util",
- "tower 0.5.1",
+ "tower 0.5.2",
  "tower-layer",
  "tower-service",
  "tracing",
@@ -11307,7 +11605,7 @@ checksum = "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11397,9 +11695,9 @@ dependencies = [
 
 [[package]]
 name = "tracy-client"
-version = "0.17.5"
+version = "0.17.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "51e295eae54124872df35720dc3a5b1e827c7deee352b342ec7f7e626d0d0ef3"
+checksum = "73202d787346a5418f8222eddb5a00f29ea47caf3c7d38a8f2f69f8455fa7c7e"
 dependencies = [
  "loom",
  "once_cell",
@@ -11409,9 +11707,9 @@ dependencies = [
 
 [[package]]
 name = "tracy-client-sys"
-version = "0.24.2"
+version = "0.24.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3637e734239e12ab152cd269302500bd063f37624ee210cd04b4936ed671f3b1"
+checksum = "69fff37da548239c3bf9e64a12193d261e8b22b660991c6fd2df057c168f435f"
 dependencies = [
  "cc",
  "windows-targets 0.52.6",
@@ -11427,18 +11725,31 @@ dependencies = [
  "rlp",
 ]
 
-[[package]]
-name = "triomphe"
-version = "0.1.11"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "859eb650cfee7434994602c3a68b25d77ad9e68c8a6cd491616ef86661382eb3"
-
 [[package]]
 name = "try-lock"
 version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
 
+[[package]]
+name = "tungstenite"
+version = "0.21.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ef1a641ea34f399a848dea702823bbecfb4c486f911735368f1f137cb8257e1"
+dependencies = [
+ "byteorder",
+ "bytes",
+ "data-encoding",
+ "http 1.3.1",
+ "httparse",
+ "log",
+ "rand 0.8.5",
+ "sha1",
+ "thiserror 1.0.69",
+ "url",
+ "utf-8",
+]
+
 [[package]]
 name = "tungstenite"
 version = "0.24.0"
@@ -11448,7 +11759,7 @@ dependencies = [
  "byteorder",
  "bytes",
  "data-encoding",
- "http",
+ "http 1.3.1",
  "httparse",
  "log",
  "rand 0.8.5",
@@ -11461,9 +11772,9 @@ dependencies = [
 
 [[package]]
 name = "typenum"
-version = "1.17.0"
+version = "1.18.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825"
+checksum = "1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f"
 
 [[package]]
 name = "ucd-trie"
@@ -11503,15 +11814,15 @@ checksum = "eaea85b334db583fe3274d12b4cd1880032beab409c0d774be044d4480ab9a94"
 
 [[package]]
 name = "unicase"
-version = "2.8.0"
+version = "2.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e51b68083f157f853b6379db119d1c1be0e6e4dec98101079dec41f6f5cf6df"
+checksum = "75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539"
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.14"
+version = "1.0.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"
 
 [[package]]
 name = "unicode-segmentation"
@@ -11608,18 +11919,18 @@ checksum = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821"
 
 [[package]]
 name = "uuid"
-version = "1.11.0"
+version = "1.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f8c5f0a0af699448548ad1a2fbf920fb4bee257eae39953ba95cb84891a0446a"
+checksum = "458f7a779bf54acc9f347480ac654f68407d3aab21269a6e3c9f922acd9e2da9"
 dependencies = [
- "getrandom 0.2.15",
+ "getrandom 0.3.2",
 ]
 
 [[package]]
 name = "valuable"
-version = "0.1.0"
+version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d"
+checksum = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65"
 
 [[package]]
 name = "vergen"
@@ -11649,14 +11960,14 @@ checksum = "d674d135b4a8c1d7e813e2f8d1c9a58308aee4a680323066025e53132218bd91"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "wait-timeout"
-version = "0.2.0"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6"
+checksum = "09ac3b126d3914f9849036f826e054cbabdc8519970b8998ddaf3b5bd3c65f11"
 dependencies = [
  "libc",
 ]
@@ -11686,6 +11997,35 @@ dependencies = [
  "try-lock",
 ]
 
+[[package]]
+name = "warp"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4378d202ff965b011c64817db11d5829506d3404edeadb61f190d111da3f231c"
+dependencies = [
+ "bytes",
+ "futures-channel",
+ "futures-util",
+ "headers",
+ "http 0.2.12",
+ "hyper 0.14.32",
+ "log",
+ "mime",
+ "mime_guess",
+ "multer",
+ "percent-encoding",
+ "pin-project",
+ "scoped-tls",
+ "serde",
+ "serde_json",
+ "serde_urlencoded",
+ "tokio",
+ "tokio-tungstenite 0.21.0",
+ "tokio-util",
+ "tower-service",
+ "tracing",
+]
+
 [[package]]
 name = "wasi"
 version = "0.9.0+wasi-snapshot-preview1"
@@ -11698,36 +12038,46 @@ version = "0.11.0+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
+
 [[package]]
 name = "wasm-bindgen"
-version = "0.2.99"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a474f6281d1d70c17ae7aa6a613c87fce69a127e2624002df63dcb39d6cf6396"
+checksum = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5"
 dependencies = [
  "cfg-if",
  "once_cell",
+ "rustversion",
  "wasm-bindgen-macro",
 ]
 
 [[package]]
 name = "wasm-bindgen-backend"
-version = "0.2.99"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5f89bb38646b4f81674e8f5c3fb81b562be1fd936d84320f3264486418519c79"
+checksum = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6"
 dependencies = [
  "bumpalo",
  "log",
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-futures"
-version = "0.4.49"
+version = "0.4.50"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "38176d9b44ea84e9184eff0bc34cc167ed044f816accfe5922e54d84cf48eca2"
+checksum = "555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61"
 dependencies = [
  "cfg-if",
  "js-sys",
@@ -11738,9 +12088,9 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro"
-version = "0.2.99"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2cc6181fd9a7492eef6fef1f33961e3695e4579b9872a6f7c83aee556666d4fe"
+checksum = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407"
 dependencies = [
  "quote",
  "wasm-bindgen-macro-support",
@@ -11748,22 +12098,25 @@ dependencies = [
 
 [[package]]
 name = "wasm-bindgen-macro-support"
-version = "0.2.99"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "30d7a95b763d3c45903ed6c81f156801839e5ee968bb07e534c44df0fcd330c2"
+checksum = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "wasm-bindgen-backend",
  "wasm-bindgen-shared",
 ]
 
 [[package]]
 name = "wasm-bindgen-shared"
-version = "0.2.99"
+version = "0.2.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "943aab3fdaaa029a6e0271b35ea10b72b943135afe9bffca82384098ad0e06a6"
+checksum = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d"
+dependencies = [
+ "unicode-ident",
+]
 
 [[package]]
 name = "wasm-streams"
@@ -11794,9 +12147,9 @@ dependencies = [
 
 [[package]]
 name = "web-sys"
-version = "0.3.76"
+version = "0.3.77"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "04dd7223427d52553d3702c004d3b2fe07c148165faa56313cb00211e31c12bc"
+checksum = "33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2"
 dependencies = [
  "js-sys",
  "wasm-bindgen",
@@ -11812,20 +12165,29 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "webpki-root-certs"
+version = "0.26.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "09aed61f5e8d2c18344b3faa33a4c837855fe56642757754775548fee21386c4"
+dependencies = [
+ "rustls-pki-types",
+]
+
 [[package]]
 name = "webpki-roots"
-version = "0.26.7"
+version = "0.26.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5d642ff16b7e79272ae451b7322067cdc17cadf68c23264be9d94a32319efe7e"
+checksum = "2210b291f7ea53617fbafcc4939f10914214ec15aace5ba62293a668f322c5c9"
 dependencies = [
  "rustls-pki-types",
 ]
 
 [[package]]
 name = "widestring"
-version = "1.1.0"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7219d36b6eac893fa81e84ebe06485e7dcbb616177469b142df14f1f4deb1311"
+checksum = "dd7cf3379ca1aac9eea11fba24fd7e315d621f8dfe35c8d7d2be8b793726e07d"
 
 [[package]]
 name = "winapi"
@@ -11858,6 +12220,16 @@ version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
 
+[[package]]
+name = "windows"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be"
+dependencies = [
+ "windows-core 0.52.0",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "windows"
 version = "0.57.0"
@@ -11908,7 +12280,7 @@ dependencies = [
  "windows-implement 0.58.0",
  "windows-interface 0.58.0",
  "windows-result 0.2.0",
- "windows-strings",
+ "windows-strings 0.1.0",
  "windows-targets 0.52.6",
 ]
 
@@ -11920,7 +12292,7 @@ checksum = "9107ddc059d5b6fbfbffdfa7a7fe3e22a226def0b2608f72e9d552763d3e1ad7"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11931,7 +12303,7 @@ checksum = "2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11942,7 +12314,7 @@ checksum = "29bee4b38ea3cde66011baa44dba677c432a78593e202392d1e9070cf2a7fca7"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -11953,18 +12325,24 @@ checksum = "053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
+[[package]]
+name = "windows-link"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "76840935b766e1b0a05c0066835fb9ec80071d4c09a16f6bd5f7e655e3c14c38"
+
 [[package]]
 name = "windows-registry"
-version = "0.2.0"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e400001bb720a623c1c69032f8e3e4cf09984deec740f007dd2b03ec864804b0"
+checksum = "4286ad90ddb45071efd1a66dfa43eb02dd0dfbae1545ad6cc3c51cf34d7e8ba3"
 dependencies = [
- "windows-result 0.2.0",
- "windows-strings",
- "windows-targets 0.52.6",
+ "windows-result 0.3.2",
+ "windows-strings 0.3.1",
+ "windows-targets 0.53.0",
 ]
 
 [[package]]
@@ -11985,6 +12363,15 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "windows-result"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c64fd11a4fd95df68efcfee5f44a294fe71b8bc6a91993e2791938abcc712252"
+dependencies = [
+ "windows-link",
+]
+
 [[package]]
 name = "windows-strings"
 version = "0.1.0"
@@ -11995,6 +12382,24 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "windows-strings"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "87fa48cc5d406560701792be122a10132491cff9d0aeb23583cc2dcafc847319"
+dependencies = [
+ "windows-link",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.45.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0"
+dependencies = [
+ "windows-targets 0.42.2",
+]
+
 [[package]]
 name = "windows-sys"
 version = "0.48.0"
@@ -12022,6 +12427,21 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "windows-targets"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"
+dependencies = [
+ "windows_aarch64_gnullvm 0.42.2",
+ "windows_aarch64_msvc 0.42.2",
+ "windows_i686_gnu 0.42.2",
+ "windows_i686_msvc 0.42.2",
+ "windows_x86_64_gnu 0.42.2",
+ "windows_x86_64_gnullvm 0.42.2",
+ "windows_x86_64_msvc 0.42.2",
+]
+
 [[package]]
 name = "windows-targets"
 version = "0.48.5"
@@ -12046,13 +12466,35 @@ dependencies = [
  "windows_aarch64_gnullvm 0.52.6",
  "windows_aarch64_msvc 0.52.6",
  "windows_i686_gnu 0.52.6",
- "windows_i686_gnullvm",
+ "windows_i686_gnullvm 0.52.6",
  "windows_i686_msvc 0.52.6",
  "windows_x86_64_gnu 0.52.6",
  "windows_x86_64_gnullvm 0.52.6",
  "windows_x86_64_msvc 0.52.6",
 ]
 
+[[package]]
+name = "windows-targets"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b1e4c7e8ceaaf9cb7d7507c974735728ab453b67ef8f18febdd7c11fe59dca8b"
+dependencies = [
+ "windows_aarch64_gnullvm 0.53.0",
+ "windows_aarch64_msvc 0.53.0",
+ "windows_i686_gnu 0.53.0",
+ "windows_i686_gnullvm 0.53.0",
+ "windows_i686_msvc 0.53.0",
+ "windows_x86_64_gnu 0.53.0",
+ "windows_x86_64_gnullvm 0.53.0",
+ "windows_x86_64_msvc 0.53.0",
+]
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"
+
 [[package]]
 name = "windows_aarch64_gnullvm"
 version = "0.48.5"
@@ -12065,6 +12507,18 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
 
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"
+
 [[package]]
 name = "windows_aarch64_msvc"
 version = "0.48.5"
@@ -12077,6 +12531,18 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
 
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"
+
 [[package]]
 name = "windows_i686_gnu"
 version = "0.48.5"
@@ -12089,12 +12555,30 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b"
 
+[[package]]
+name = "windows_i686_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3"
+
 [[package]]
 name = "windows_i686_gnullvm"
 version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
 
+[[package]]
+name = "windows_i686_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"
+
 [[package]]
 name = "windows_i686_msvc"
 version = "0.48.5"
@@ -12107,6 +12591,18 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
 
+[[package]]
+name = "windows_i686_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"
+
 [[package]]
 name = "windows_x86_64_gnu"
 version = "0.48.5"
@@ -12119,6 +12615,18 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
 
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"
+
 [[package]]
 name = "windows_x86_64_gnullvm"
 version = "0.48.5"
@@ -12131,6 +12639,18 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
 
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"
+
 [[package]]
 name = "windows_x86_64_msvc"
 version = "0.48.5"
@@ -12143,11 +12663,26 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
 
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.53.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486"
+
+[[package]]
+name = "winnow"
+version = "0.6.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c8d71a593cc5c42ad7876e2c1fda56f314f3754c084128833e64f1345ff8a03a"
+dependencies = [
+ "memchr",
+]
+
 [[package]]
 name = "winnow"
-version = "0.6.20"
+version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "36c1fec1a2bb5866f07c25f68c26e565c4c200aebb96d7e55710c19d3e8ac49b"
+checksum = "0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36"
 dependencies = [
  "memchr",
 ]
@@ -12162,6 +12697,15 @@ dependencies = [
  "windows-sys 0.48.0",
 ]
 
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags 2.9.0",
+]
+
 [[package]]
 name = "write16"
 version = "1.0.0"
@@ -12228,7 +12772,7 @@ checksum = "2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "synstructure",
 ]
 
@@ -12238,8 +12782,16 @@ version = "0.7.35"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0"
 dependencies = [
- "byteorder",
- "zerocopy-derive",
+ "zerocopy-derive 0.7.35",
+]
+
+[[package]]
+name = "zerocopy"
+version = "0.8.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fd97444d05a4328b90e75e503a34bad781f14e28a823ad3557f0750df1ebcbc6"
+dependencies = [
+ "zerocopy-derive 0.8.23",
 ]
 
 [[package]]
@@ -12250,27 +12802,38 @@ checksum = "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
+]
+
+[[package]]
+name = "zerocopy-derive"
+version = "0.8.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6352c01d0edd5db859a63e2605f4ea3183ddbd15e2c4a9e7d32184df75e4f154"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "zerofrom"
-version = "0.1.5"
+version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "cff3ee08c995dee1859d998dea82f7374f2826091dd9cd47def953cae446cd2e"
+checksum = "50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5"
 dependencies = [
  "zerofrom-derive",
 ]
 
 [[package]]
 name = "zerofrom-derive"
-version = "0.1.5"
+version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "595eed982f7d355beb85837f651fa22e90b3c044842dc7f2c2842c086f295808"
+checksum = "d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
  "synstructure",
 ]
 
@@ -12291,7 +12854,7 @@ checksum = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
@@ -12313,32 +12876,32 @@ checksum = "6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn 2.0.90",
+ "syn 2.0.100",
 ]
 
 [[package]]
 name = "zstd"
-version = "0.13.2"
+version = "0.13.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fcf2b778a664581e31e389454a7072dab1647606d44f7feea22cd5abb9c9f3f9"
+checksum = "e91ee311a569c327171651566e07972200e76fcfe2242a4fa446149a3881c08a"
 dependencies = [
  "zstd-safe",
 ]
 
 [[package]]
 name = "zstd-safe"
-version = "7.2.1"
+version = "7.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "54a3ab4db68cea366acc5c897c7b4d4d1b8994a9cd6e6f841f8964566a419059"
+checksum = "f3051792fbdc2e1e143244dc28c60f73d8470e93f3f9cbd0ead44da5ed802722"
 dependencies = [
  "zstd-sys",
 ]
 
 [[package]]
 name = "zstd-sys"
-version = "2.0.13+zstd.1.5.6"
+version = "2.0.14+zstd.1.5.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "38ff0f21cfee8f97d94cef41359e0c89aa6113028ab0291aa8ca0038995a95aa"
+checksum = "8fb060d4926e4ac3a3ad15d864e99ceb5f343c6b34f5bd6d81ae6ed417311be5"
 dependencies = [
  "cc",
  "pkg-config",
diff --git a/Cargo.toml b/Cargo.toml
index 80233cdb4..6b74f5d62 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -3,14 +3,15 @@ version = "1.1.4"
 edition = "2021"
 rust-version = "1.82"
 license = "MIT OR Apache-2.0"
-homepage = "https://paradigmxyz.github.io/reth"
-repository = "https://github.com/paradigmxyz/reth"
+homepage = "https://github.com/SeismicSystems/seismic-reth"
+repository = "https://github.com/SeismicSystems/seismic-reth"
 exclude = [".github/"]
 
 [workspace]
 members = [
     "bin/reth-bench/",
     "bin/reth/",
+    "bin/seismic-reth/",
     "crates/blockchain-tree-api/",
     "crates/blockchain-tree/",
     "crates/chain-state/",
@@ -68,17 +69,18 @@ members = [
     "crates/node/events/",
     "crates/node/metrics",
     "crates/node/types",
-    "crates/optimism/bin",
-    "crates/optimism/chainspec",
-    "crates/optimism/cli",
-    "crates/optimism/consensus",
-    "crates/optimism/evm/",
-    "crates/optimism/hardforks/",
-    "crates/optimism/node/",
-    "crates/optimism/payload/",
-    "crates/optimism/primitives/",
-    "crates/optimism/rpc/",
-    "crates/optimism/storage",
+    # disable optimism because seismic-alloy breaks op-alloy
+    # "crates/optimism/bin",
+    # "crates/optimism/chainspec",
+    # "crates/optimism/cli",
+    # "crates/optimism/consensus",
+    # "crates/optimism/evm/",
+    # "crates/optimism/hardforks/",
+    # "crates/optimism/node/",
+    # "crates/optimism/payload/",
+    # "crates/optimism/primitives/",
+    # "crates/optimism/rpc/",
+    # "crates/optimism/storage",
     "crates/payload/basic/",
     "crates/payload/builder/",
     "crates/payload/builder-primitives/",
@@ -120,6 +122,7 @@ members = [
     "crates/storage/storage-api/",
     "crates/storage/zstd-compressors/",
     "crates/tasks/",
+    "crates/enclave/",
     "crates/tokio-util/",
     "crates/tracing/",
     "crates/transaction-pool/",
@@ -151,9 +154,13 @@ members = [
     "examples/custom-beacon-withdrawals",
     "testing/ef-tests/",
     "testing/testing-utils",
+    "crates/seismic/node",
+    "crates/seismic/rpc-api",
+]
+default-members = ["bin/seismic-reth", "bin/reth"]
+exclude = [
+    "book/sources",
 ]
-default-members = ["bin/reth"]
-exclude = ["book/sources"]
 
 # Explicitly set the resolver to version 2, which is the default for packages with edition >= 2021
 # https://doc.rust-lang.org/edition-guide/rust-2021/default-cargo-resolver.html
@@ -300,6 +307,12 @@ codegen-units = 1
 overflow-checks = true
 
 [workspace.dependencies]
+# seismic dependencies
+seismic-node = { path = "crates/seismic/node" }
+seismic-reth = { path = "crates/seismic/bin" }
+seismic-rpc-api = { path = "crates/seismic/rpc-api" }
+seismic-enclave = "0.1.0"
+
 # reth
 op-reth = { path = "crates/optimism/bin" }
 reth = { path = "bin/reth" }
@@ -422,25 +435,25 @@ reth-trie = { path = "crates/trie/trie" }
 reth-trie-common = { path = "crates/trie/common" }
 reth-trie-db = { path = "crates/trie/db" }
 reth-trie-parallel = { path = "crates/trie/parallel" }
+reth-enclave = { path = "crates/enclave" }
 reth-trie-sparse = { path = "crates/trie/sparse" }
 reth-zstd-compressors = { path = "crates/storage/zstd-compressors", default-features = false }
 
 # revm
-revm = { version = "18.0.0", features = ["std"], default-features = false }
+revm = "18.0.0"
+revm-primitives = "14.0.0"
+revm-interpreter = "14.0.0"
 revm-inspectors = "0.13.0"
-revm-primitives = { version = "14.0.0", default-features = false }
-revm-interpreter = { version = "14.0.0", default-features = false }
 
 # eth
-alloy-chains = { version = "0.1.32", default-features = false }
+alloy-chains = { version = "0.1", default-features = false }
 alloy-dyn-abi = "0.8.15"
-alloy-primitives = { version = "0.8.15", default-features = false, features = [
-    "map-foldhash",
-] }
+alloy-primitives = { version = "0.8.15", default-features = false, features = ["map-foldhash"] }
+alloy-sol-types = { version = "0.8.15"}
 alloy-rlp = { version = "0.3.10", default-features = false }
-alloy-sol-types = "0.8.15"
-alloy-trie = { version = "0.7", default-features = false }
+alloy-trie = { version = "=0.7.6", default-features = false }
 
+# alloy
 alloy-consensus = { version = "0.8.0", default-features = false }
 alloy-contract = { version = "0.8.0", default-features = false }
 alloy-eips = { version = "0.8.0", default-features = false }
@@ -449,39 +462,34 @@ alloy-json-rpc = { version = "0.8.0", default-features = false }
 alloy-network = { version = "0.8.0", default-features = false }
 alloy-network-primitives = { version = "0.8.0", default-features = false }
 alloy-node-bindings = { version = "0.8.0", default-features = false }
-alloy-provider = { version = "0.8.0", features = [
-    "reqwest",
-], default-features = false }
+alloy-provider = { version = "0.8.0", features = ["reqwest"], default-features = false }
 alloy-pubsub = { version = "0.8.0", default-features = false }
 alloy-rpc-client = { version = "0.8.0", default-features = false }
-alloy-rpc-types = { version = "0.8.0", features = [
-    "eth",
-], default-features = false }
+alloy-rpc-types = { version = "0.8.0", features = ["eth"], default-features = false }
 alloy-rpc-types-admin = { version = "0.8.0", default-features = false }
 alloy-rpc-types-anvil = { version = "0.8.0", default-features = false }
 alloy-rpc-types-beacon = { version = "0.8.0", default-features = false }
 alloy-rpc-types-debug = { version = "0.8.0", default-features = false }
 alloy-rpc-types-engine = { version = "0.8.0", default-features = false }
-alloy-rpc-types-eth = { version = "0.8.0", default-features = false }
+alloy-rpc-types-eth = { version = "0.8.0", default-features = false}
 alloy-rpc-types-mev = { version = "0.8.0", default-features = false }
 alloy-rpc-types-trace = { version = "0.8.0", default-features = false }
 alloy-rpc-types-txpool = { version = "0.8.0", default-features = false }
 alloy-serde = { version = "0.8.0", default-features = false }
 alloy-signer = { version = "0.8.0", default-features = false }
 alloy-signer-local = { version = "0.8.0", default-features = false }
-alloy-transport = { version = "0.8.0" }
-alloy-transport-http = { version = "0.8.0", features = [
-    "reqwest-rustls-tls",
-], default-features = false }
+alloy-transport = "0.8.0"
+alloy-transport-http = { version = "0.8.0", default-features = false }
 alloy-transport-ipc = { version = "0.8.0", default-features = false }
 alloy-transport-ws = { version = "0.8.0", default-features = false }
 
 # op
 op-alloy-rpc-types = "0.8.1"
 op-alloy-rpc-types-engine = "0.8.1"
-op-alloy-rpc-jsonrpsee = "0.8.1"
-op-alloy-network = "0.8.1"
+# op-alloy-rpc-jsonrpsee = "0.8.1"
+# op-alloy-network = "0.8.1"
 op-alloy-consensus = "0.8.1"
+op-alloy-genesis = "0.8.1"
 
 # misc
 aquamarine = "0.6"
@@ -567,7 +575,7 @@ tower = "0.4"
 tower-http = "0.6"
 
 # p2p
-discv5 = "0.8.0"
+discv5 = "=0.8.0"
 if-addrs = "0.13"
 
 # rpc
@@ -611,41 +619,55 @@ similar-asserts = { version = "1.5.0", features = ["serde"] }
 tempfile = "3.8"
 test-fuzz = "6"
 rstest = "0.23.0"
+assert_cmd = "2.0"
 
 tikv-jemalloc-ctl = "0.6"
 tikv-jemallocator = "0.6"
 tracy-client = "0.17.3"
 
-# [patch.crates-io]
-# alloy-consensus = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-eips = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-genesis = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-json-rpc = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-network = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-network-primitives = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-node-bindings = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-provider = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-pubsub = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-client = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-admin = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-anvil = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-beacon = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-debug = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-engine = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-eth = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-mev = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-trace = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-rpc-types-txpool = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-serde = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-signer = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-signer-local = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-transport = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-transport-http = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-transport-ipc = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-# alloy-transport-ws = { git = "https://github.com/alloy-rs/alloy", rev = "5492e40" }
-
-# op-alloy-consensus = { git = "https://github.com/alloy-rs/op-alloy", rev = "debfc29" }
-# op-alloy-network = { git = "https://github.com/alloy-rs/op-alloy", rev = "debfc29" }
-# op-alloy-rpc-types = { git = "https://github.com/alloy-rs/op-alloy", rev = "debfc29" }
-# op-alloy-rpc-types-engine = { git = "https://github.com/alloy-rs/op-alloy", rev = "debfc29" }
+[patch.crates-io]
+# seismic-alloy-core
+alloy-primitives = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-json-abi = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-sol-macro-expander = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-sol-macro-input = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-sol-types = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-sol-type-parser = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+alloy-dyn-abi = { git = "https://github.com/SeismicSystems/seismic-alloy-core.git", rev = "5dc07cc" }
+
+# seismic-alloy
+alloy-consensus = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-contract = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-eips = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-genesis = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-json-rpc = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-network = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-network-primitives = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-node-bindings = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-provider = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-pubsub = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-client = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-admin = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-anvil = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-beacon = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-debug = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-engine = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-eth = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-mev = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-trace = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-rpc-types-txpool = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-serde = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-signer = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-signer-local = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-transport = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-transport-http = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-transport-ipc = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+alloy-transport-ws = { git = "https://github.com/SeismicSystems/seismic-alloy.git", rev = "23845ba" }
+
+revm = { git = "https://github.com/SeismicSystems/seismic-revm.git", rev = "77a08e9"}
+revm-primitives = { git = "https://github.com/SeismicSystems/seismic-revm.git", rev = "77a08e9"}
+revm-interpreter = { git = "https://github.com/SeismicSystems/seismic-revm.git", rev = "77a08e9"}
+revm-inspectors = { git = "https://github.com/SeismicSystems/seismic-revm-inspectors.git", rev = "9868b93"}
+
+seismic-enclave = { git = "https://github.com/SeismicSystems/enclave.git", rev = "352164b" }
diff --git a/Dockerfile b/Dockerfile
index 85546548d..5d44612d6 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,18 +1,27 @@
+# Use cargo-chef for build caching
 FROM lukemathwalker/cargo-chef:latest-rust-1 AS chef
 WORKDIR /app
 
-LABEL org.opencontainers.image.source=https://github.com/paradigmxyz/reth
+LABEL org.opencontainers.image.source=https://github.com/SeismicSystems/seismic-reth
 LABEL org.opencontainers.image.licenses="MIT OR Apache-2.0"
 
 # Install system dependencies
 RUN apt-get update && apt-get -y upgrade && apt-get install -y libclang-dev pkg-config
 
-# Builds a cargo-chef plan
+# Build the cargo-chef plan
 FROM chef AS planner
-COPY . .
+
+COPY ./bin/ ./bin/
+COPY ./crates/ ./crates/
+COPY ./testing/ ./testing/
+COPY ./examples/ ./examples/
+COPY Cargo.toml Cargo.lock deny.toml Makefile ./
 RUN cargo chef prepare --recipe-path recipe.json
 
+# Build the application
 FROM chef AS builder
+# Setting up SSH for GitHub access
+RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
 COPY --from=planner /app/recipe.json recipe.json
 
 # Build profile, release by default
@@ -27,26 +36,64 @@ ENV RUSTFLAGS="$RUSTFLAGS"
 ARG FEATURES=""
 ENV FEATURES=$FEATURES
 
-# Builds dependencies
-RUN cargo chef cook --profile $BUILD_PROFILE --features "$FEATURES" --recipe-path recipe.json
+ENV CARGO_NET_GIT_FETCH_WITH_CLI=true
+# Build dependencies
+RUN --mount=type=ssh cargo chef cook --profile $BUILD_PROFILE --features "$FEATURES" --recipe-path recipe.json
 
-# Build application
-COPY . .
-RUN cargo build --profile $BUILD_PROFILE --features "$FEATURES" --locked --bin reth
+# Build the application binary
+COPY ./bin/ ./bin/
+COPY ./crates/ ./crates/
+COPY ./testing/ ./testing/
+COPY ./examples/ ./examples/
+COPY Cargo.toml Cargo.lock deny.toml Makefile ./
+RUN --mount=type=ssh cargo build --profile $BUILD_PROFILE --features "$FEATURES" --locked --bin seismic-reth
 
-# ARG is not resolved in COPY so we have to hack around it by copying the
-# binary to a temporary location
-RUN cp /app/target/$BUILD_PROFILE/reth /app/reth
+# Copy the binary to a temporary location
+RUN cp /app/target/$BUILD_PROFILE/seismic-reth /app/seismic-reth
 
-# Use Ubuntu as the release image
-FROM ubuntu AS runtime
+# Use Ubuntu as the runtime image
+FROM ubuntu:latest AS runtime
 WORKDIR /app
 
 # Copy reth over from the build stage
-COPY --from=builder /app/reth /usr/local/bin
+COPY --from=builder /app/seismic-reth /usr/local/bin
 
-# Copy licenses
+# Copy license files
 COPY LICENSE-* ./
 
-EXPOSE 30303 30303/udp 9001 8545 8546
-ENTRYPOINT ["/usr/local/bin/reth"]
+# Define the ENTRYPOINT to run the reth node with the specified arguments
+ENV HTTP_PORT=8545
+ENV WS_PORT=8546
+ENV AUTHRPC_PORT=8551
+ENV METRICS_PORT=9001
+ENV PEER_PORT=30303
+ENV DISCOVERY_PORT=30303
+
+# Expose the necessary ports
+EXPOSE \
+    $HTTP_PORT \
+    $WS_PORT \
+    $AUTHRPC_PORT \
+    $METRICS_PORT \
+    $PEER_PORT \
+    $DISCOVERY_PORT \
+    30303/udp 
+
+# ENTRYPOINT /usr/local/bin/seismic-reth node \
+#             --dev \
+#             -vvvv \
+#             --http \
+#             --http.addr 0.0.0.0 \
+#             --http.port $HTTP_PORT \
+#             --http.api all \
+#             --ws \
+#             --ws.addr 0.0.0.0 \
+#             --ws.port $WS_PORT \
+#             --ws.api all \
+#             --authrpc.addr 0.0.0.0 \
+#             --authrpc.port $AUTHRPC_PORT \
+#             --port $PEER_PORT \
+#             --discovery.port $DISCOVERY_PORT \
+#             --metrics $METRICS_PORT
+
+ENTRYPOINT ["/usr/local/bin/seismic-reth"]
diff --git a/Dockerfile.cross b/Dockerfile.cross
index f477f1ed3..e52412cdd 100644
--- a/Dockerfile.cross
+++ b/Dockerfile.cross
@@ -3,7 +3,7 @@
 # locatable in `./dist/bin/$TARGETARCH`
 FROM --platform=$TARGETPLATFORM ubuntu:22.04
 
-LABEL org.opencontainers.image.source=https://github.com/paradigmxyz/reth
+LABEL org.opencontainers.image.source=https://github.com/SeismicSystems/seismic-reth
 LABEL org.opencontainers.image.licenses="MIT OR Apache-2.0"
 
 # Filled by docker buildx
diff --git a/DockerfileOp.cross b/DockerfileOp.cross
index 47606a828..584e69854 100644
--- a/DockerfileOp.cross
+++ b/DockerfileOp.cross
@@ -3,7 +3,7 @@
 # locatable in `./dist/bin/$TARGETARCH`
 FROM --platform=$TARGETPLATFORM ubuntu:22.04
 
-LABEL org.opencontainers.image.source=https://github.com/paradigmxyz/reth
+LABEL org.opencontainers.image.source=https://github.com/SeismicSystems/seismic-reth
 LABEL org.opencontainers.image.licenses="MIT OR Apache-2.0"
 
 # Filled by docker buildx
diff --git a/Makefile b/Makefile
index b1908d7b1..263307902 100644
--- a/Makefile
+++ b/Makefile
@@ -31,6 +31,7 @@ EF_TESTS_URL := https://github.com/ethereum/tests/archive/refs/tags/$(EF_TESTS_T
 EF_TESTS_DIR := ./testing/ef-tests/ethereum-tests
 
 # The docker image name
+# TODO: publish one for seismic
 DOCKER_IMAGE_NAME ?= ghcr.io/paradigmxyz/reth
 
 # Features in reth/op-reth binary crate other than "ethereum" and "optimism"
@@ -456,10 +457,13 @@ rustdocs: ## Runs `cargo docs` to generate the Rust documents in the `target/doc
 	cargo +nightly docs \
 	--document-private-items
 
+test-seismic-reth :## see profile.default in .config/nextest.toml for filtered tests
+	cargo nextest run --workspace 
 test-reth:
 	cargo test \
 	--workspace \
 	--bin "reth" \
+	--exclude optimism \
 	--lib \
 	--examples \
 	--tests \
@@ -490,7 +494,7 @@ test-doc:
 
 test:
 	make test-reth && \
-	make test-op-reth && \
+	make test-seismic-reth && \
 	make test-doc && \
 	make test-other-targets
 
diff --git a/README.md b/README.md
index 8a6b8ddb4..59dc90ae8 100644
--- a/README.md
+++ b/README.md
@@ -1,83 +1,36 @@
-# reth
+# Seismic Reth
 
-[![CI status](https://github.com/paradigmxyz/reth/workflows/unit/badge.svg)][gh-ci]
-[![cargo-deny status](https://github.com/paradigmxyz/reth/workflows/deny/badge.svg)][gh-deny]
-[![Telegram Chat][tg-badge]][tg-url]
+[![book](https://github.com/SeismicSystems/seismic-reth/actions/workflows/book.yml/badge.svg?branch=seismic)](https://github.com/SeismicSystems/seismic-reth/actions/workflows/book.yml)
+[![CI Status](https://github.com/SeismicSystems/seismic-reth/actions/workflows/seismic.yml/badge.svg?branch=seismic)](https://github.com/SeismicSystems/seismic-reth/actions/workflows/seismic.yml)
+[![Chat on Telegram](https://img.shields.io/badge/chat-Join%20Us-blue?logo=telegram)](https://t.me/+xpzfNO4pmRoyM2Ux)
 
-**Modular, contributor-friendly and blazing-fast implementation of the Ethereum protocol**
+**Encrypted Blockchain Client**
 
-![](./assets/reth-prod.png)
+![](./assets/seismic-reth-beta.png)
 
-**[Install](https://paradigmxyz.github.io/reth/installation/installation.html)**
-| [User Book](https://reth.rs)
+**[Install](https://seismicsystems.github.io/seismic-reth/installation/installation.html)**
+| [User Book](https://seismicsystems.github.io/seismic-reth/)
 | [Developer Docs](./docs)
-| [Crate Docs](https://reth.rs/docs)
+| [Crate Docs](https://seismicsystems.github.io/seismic-reth/docs/)
 
-[gh-ci]: https://github.com/paradigmxyz/reth/actions/workflows/unit.yml
-[gh-deny]: https://github.com/paradigmxyz/reth/actions/workflows/deny.yml
-[tg-badge]: https://img.shields.io/endpoint?color=neon&logo=telegram&label=chat&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth
+<!-- [tg-badge]: https://img.shields.io/endpoint?color=neon&logo=telegram&label=chat&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth -->
 
-## What is Reth?
-
-Reth (short for Rust Ethereum, [pronunciation](https://twitter.com/kelvinfichter/status/1597653609411268608)) is a new Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient. Reth is an Execution Layer (EL) and is compatible with all Ethereum Consensus Layer (CL) implementations that support the [Engine API](https://github.com/ethereum/execution-apis/tree/a0d03086564ab1838b462befbc083f873dcf0c0f/src/engine). It is originally built and driven forward by [Paradigm](https://paradigm.xyz/), and is licensed under the Apache and MIT licenses.
+## What is Seismic Reth?
 
 ## Goals
 
-As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain. This includes sending and receiving transactions/logs/traces, as well as accessing and interacting with smart contracts. Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.
-
-More concretely, our goals are:
-
-1. **Modularity**: Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them. Examples of such usage include but are not limited to spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need. To achieve that, we are licensing Reth under the Apache/MIT permissive license. You can learn more about the project's components [here](./docs/repo/layout.md).
-2. **Performance**: Reth aims to be fast, so we used Rust and the [Erigon staged-sync](https://erigon.substack.com/p/erigon-stage-sync-and-control-flows) node architecture. We also use our Ethereum libraries (including [Alloy](https://github.com/alloy-rs/alloy/) and [revm](https://github.com/bluealloy/revm/)) which we’ve battle-tested and optimized via [Foundry](https://github.com/foundry-rs/foundry/).
-3. **Free for anyone to use any way they want**: Reth is free open source software, built for the community, by the community. By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.
-4. **Client Diversity**: The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.
-5. **Support as many EVM chains as possible**: We aspire that Reth can full-sync not only Ethereum, but also other chains like Optimism, Polygon, BNB Smart Chain, and more. If you're working on any of these projects, please reach out.
-6. **Configurability**: We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware. We also want to support teams and individuals who want both sync from genesis and via "fast sync". We envision that Reth will be configurable enough and provide configurable "profiles" for the tradeoffs that each team faces.
-
-## Status
-
-Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.
+Seismic Reth extends [Reth](https://github.com/paradigmxyz/reth) with shielded transaction and storage capabilities, allowing users to confidentially interact with smart contracts and transactions on the Seismic network while maintaining compatibility with existing infrastructure. Seismic Reth runs in a Trusted Execution Environment (TEE) for secure communication between users and the Seismic network.
 
-More historical context below:
-* We released 1.0 "production-ready" stable Reth in June 2024.
-    * Reth completed an audit with [Sigma Prime](https://sigmaprime.io/), the developers of [Lighthouse](https://github.com/sigp/lighthouse), the Rust Consensus Layer implementation. Find it [here](./audit/sigma_prime_audit_v2.pdf).
-    * Revm (the EVM used in Reth) underwent an audit with [Guido Vranken](https://twitter.com/guidovranken) (#1 [Ethereum Bug Bounty](https://ethereum.org/en/bug-bounty)). We will publish the results soon.
-* We released multiple iterative beta versions, up to [beta.9](https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.9) on Monday June 3rd 2024 the last beta release.
-* We released [beta](https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1) on Monday March 4th 2024, our first breaking change to the database model, providing faster query speed, smaller database footprint, and allowing "history" to be mounted on separate drives.
-* We shipped iterative improvements until the last alpha release on February 28th 2024, [0.1.0-alpha.21](https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.21).
-* We [initially announced](https://www.paradigm.xyz/2023/06/reth-alpha) [0.1.0-alpha.1](https://github.com/paradigmxyz/reth/releases/tag/v0.1.0-alpha.1) in June 20th 2023.
+## Seismic features
 
-### Database compatibility
-
-We do not have any breaking database changes since beta.1, and do not plan any in the near future.
-
-Reth [v0.2.0-beta.1](https://github.com/paradigmxyz/reth/releases/tag/v0.2.0-beta.1) includes
-a [set of breaking database changes](https://github.com/paradigmxyz/reth/pull/5191) that makes it impossible to use database files produced by earlier versions.
-
-If you had a database produced by alpha versions of Reth, you need to drop it with `reth db drop`
-(using the same arguments such as `--config` or `--datadir` that you passed to `reth node`), and resync using the same `reth node` command you've used before.
+See [seismic-features](./seismic-features.md) for a detailed overview of Seismic Reth's new features.
 
 ## For Users
 
-See the [Reth Book](https://paradigmxyz.github.io/reth) for instructions on how to install and run Reth.
+See the [Seismic Reth Book](https://seismicsystems.github.io/seismic-reth) for instructions on how to install and run Seismic Reth.
 
 ## For Developers
 
-### Using reth as a library
-
-You can use individual crates of reth in your project.
-
-The crate docs can be found [here](https://paradigmxyz.github.io/reth/docs).
-
-For a general overview of the crates, see [Project Layout](./docs/repo/layout.md).
-
-### Contributing
-
-If you want to contribute, or follow along with contributor discussion, you can use our [main telegram](https://t.me/paradigm_reth) to chat with us about the development of Reth!
-
-- Our contributor guidelines can be found in [`CONTRIBUTING.md`](./CONTRIBUTING.md).
-- See our [contributor docs](./docs) for more information on the project. A good starting point is [Project Layout](./docs/repo/layout.md).
-
 ### Building and testing
 
 <!--
@@ -89,36 +42,34 @@ When updating this, also update:
 
 The Minimum Supported Rust Version (MSRV) of this project is [1.82.0](https://blog.rust-lang.org/2024/10/17/Rust-1.82.0.html).
 
-See the book for detailed instructions on how to [build from source](https://paradigmxyz.github.io/reth/installation/source.html).
+See the book for detailed instructions on how to [build from source](https://seismicsystems.github.io/seismic-reth/installation/source.html).
 
-To fully test Reth, you will need to have [Geth installed](https://geth.ethereum.org/docs/getting-started/installing-geth), but it is possible to run a subset of tests without Geth.
+To fully test Seismic Reth, you will need to have [Geth installed](https://geth.ethereum.org/docs/getting-started/installing-geth), but it is possible to run a subset of tests without Geth.
 
 First, clone the repository:
 
 ```sh
-git clone https://github.com/paradigmxyz/reth
-cd reth
+git clone https://github.com/SeismicSystems/seismic-reth
+cd seismic-reth
 ```
 
 Next, run the tests:
 
 ```sh
 # Without Geth
-cargo test --workspace
+cargo nextest run --workspace
 
 # With Geth
-cargo test --workspace --features geth-tests
+cargo nextest run --workspace --features geth-tests
 
 # With Ethereum Foundation tests
 #
 # Note: Requires cloning https://github.com/ethereum/tests
 #
 #   cd testing/ef-tests && git clone https://github.com/ethereum/tests ethereum-tests
-cargo test -p ef-tests --features ef-tests
+cargo nextest run -p ef-tests --features ef-tests
 ```
 
-We recommend using [`cargo nextest`](https://nexte.st/) to speed up testing. With nextest installed, simply substitute `cargo test` with `cargo nextest run`.
-
 > **Note**
 >
 > Some tests use random number generators to generate test data. If you want to use a deterministic seed, you can set the `SEED` environment variable.
@@ -129,13 +80,15 @@ If you have any questions, first see if the answer to your question can be found
 
 If the answer is not there:
 
-- Join the [Telegram][tg-url] to get help, or
-- Open a [discussion](https://github.com/paradigmxyz/reth/discussions/new) with your question, or
-- Open an issue with [the bug](https://github.com/paradigmxyz/reth/issues/new?assignees=&labels=C-bug%2CS-needs-triage&projects=&template=bug.yml)
+-   Join the [Telegram][tg-url] to get help, or
+-   Open a [discussion](https://github.com/SeismicSystems/seismic-reth/discussions/new) with your question, or
+-   Open an issue with [the bug](https://github.com/SeismicSystems/seismic-reth/issues/new?assignees=&labels=C-bug%2CS-needs-triage&projects=&template=bug.yml)
 
 ## Security
 
-See [`SECURITY.md`](./SECURITY.md).
+### Report a Vulnerability
+
+Contact [p@seismic.systems](mailto:p@seismic.systems), [l@seismic.systems](mailto:l@seismic.systems)
 
 ## Acknowledgements
 
@@ -143,13 +96,7 @@ Reth is a new implementation of the Ethereum protocol. In the process of develop
 
 None of this would have been possible without them, so big shoutout to the teams below:
 
-- [Geth](https://github.com/ethereum/go-ethereum/): We would like to express our heartfelt gratitude to the go-ethereum team for their outstanding contributions to Ethereum over the years. Their tireless efforts and dedication have helped to shape the Ethereum ecosystem and make it the vibrant and innovative community it is today. Thank you for your hard work and commitment to the project.
-- [Erigon](https://github.com/ledgerwatch/erigon) (fka Turbo-Geth): Erigon pioneered the ["Staged Sync" architecture](https://erigon.substack.com/p/erigon-stage-sync-and-control-flows) that Reth is using, as well as [introduced MDBX](https://github.com/ledgerwatch/erigon/wiki/Choice-of-storage-engine) as the database of choice. We thank Erigon for pushing the state of the art research on the performance limits of Ethereum nodes.
-- [Akula](https://github.com/akula-bft/akula/): Reth uses forks of the Apache versions of Akula's [MDBX Bindings](https://github.com/paradigmxyz/reth/pull/132), [FastRLP](https://github.com/paradigmxyz/reth/pull/63) and [ECIES](https://github.com/paradigmxyz/reth/pull/80) . Given that these packages were already released under the Apache License, and they implement standardized solutions, we decided not to reimplement them to iterate faster. We thank the Akula team for their contributions to the Rust Ethereum ecosystem and for publishing these packages.
-
-## Warning
-
-The `NippyJar` and `Compact` encoding formats and their implementations are designed for storing and retrieving data internally. They are not hardened to safely read potentially malicious data.
+-   [Reth](https://github.com/paradigmxyz/reth): We would like to thank the Rust Ethereum community for their pioneering work in building Ethereum clients in Rust. Their dedication to pushing forward Rust implementations has helped pave the way for projects like Reth.
 
-[book]: https://paradigmxyz.github.io/reth/
-[tg-url]: https://t.me/paradigm_reth
+[book]: https://seismicsystems.github.io/seismic-reth/
+[tg-url]: https://t.me/+xpzfNO4pmRoyM2Ux
diff --git a/assets/seismic-reth-beta.png b/assets/seismic-reth-beta.png
new file mode 100644
index 000000000..c87ed634f
Binary files /dev/null and b/assets/seismic-reth-beta.png differ
diff --git a/assets/seismic-reth-prod.png b/assets/seismic-reth-prod.png
new file mode 100644
index 000000000..9121bd104
Binary files /dev/null and b/assets/seismic-reth-prod.png differ
diff --git a/bin/reth-bench/src/main.rs b/bin/reth-bench/src/main.rs
index c7335961d..c320c54fe 100644
--- a/bin/reth-bench/src/main.rs
+++ b/bin/reth-bench/src/main.rs
@@ -4,9 +4,10 @@
 //! These blocks are then fed into reth as a stream of execution payloads.
 
 #![doc(
+    // TODO: seismic
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/bin/reth/Cargo.toml b/bin/reth/Cargo.toml
index fb86a8ced..c4c6f329d 100644
--- a/bin/reth/Cargo.toml
+++ b/bin/reth/Cargo.toml
@@ -24,7 +24,7 @@ reth-fs-util.workspace = true
 reth-db = { workspace = true, features = ["mdbx"] }
 reth-db-api.workspace = true
 reth-exex.workspace = true
-reth-provider.workspace = true
+reth-provider = { workspace = true, features = ["test-utils"] }
 reth-evm.workspace = true
 reth-revm.workspace = true
 reth-stages.workspace = true
diff --git a/bin/reth/src/lib.rs b/bin/reth/src/lib.rs
index 53c592063..bc666e036 100644
--- a/bin/reth/src/lib.rs
+++ b/bin/reth/src/lib.rs
@@ -20,9 +20,10 @@
 //! - `min-trace-logs`: Disables all logs below `trace` level.
 
 #![doc(
+    // TODO: seismic
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/bin/seismic-reth/Cargo.toml b/bin/seismic-reth/Cargo.toml
new file mode 100644
index 000000000..2e1a743ee
--- /dev/null
+++ b/bin/seismic-reth/Cargo.toml
@@ -0,0 +1,54 @@
+[package]
+name = "seismic-reth"
+version.workspace = true
+edition.workspace = true
+rust-version.workspace = true
+license.workspace = true
+repository.workspace = true
+default-run = "seismic-reth"
+
+[dependencies]
+alloy-signer-local.workspace = true
+alloy-network.workspace = true
+alloy-primitives.workspace = true
+
+# reth
+reth-tracing.workspace = true
+reth-cli-util.workspace = true
+reth-cli-commands.workspace = true
+reth-node-builder.workspace = true
+reth-node-core.workspace = true
+reth-node-ethereum.workspace = true
+reth-node-metrics.workspace = true
+reth-enclave.workspace = true
+reth-provider.workspace = true
+reth-primitives.workspace = true
+reth.workspace = true
+
+# seismic
+seismic-node.workspace = true
+seismic-rpc-api = { workspace = true, features = ["client"] }
+
+# misc
+clap = { workspace = true, features = ["derive"] }
+eyre.workspace = true
+tracing.workspace = true
+tokio.workspace = true
+
+[features]
+default = ["jemalloc"]
+
+asm-keccak = ["reth-node-core/asm-keccak", "reth-primitives/asm-keccak"]
+
+jemalloc = ["reth-node-core/jemalloc", "reth-node-metrics/jemalloc"]
+jemalloc-prof = ["jemalloc"]
+
+min-error-logs = ["tracing/release_max_level_error"]
+min-warn-logs = ["tracing/release_max_level_warn"]
+min-info-logs = ["tracing/release_max_level_info"]
+min-debug-logs = ["tracing/release_max_level_debug"]
+min-trace-logs = ["tracing/release_max_level_trace"]
+
+[[bin]]
+name = "seismic-reth"
+path = "src/main.rs"
\ No newline at end of file
diff --git a/bin/seismic-reth/src/main.rs b/bin/seismic-reth/src/main.rs
new file mode 100644
index 000000000..eb5381827
--- /dev/null
+++ b/bin/seismic-reth/src/main.rs
@@ -0,0 +1,70 @@
+#![allow(missing_docs)]
+
+use reth_cli_commands::node::NoArgs;
+use reth_enclave::start_blocking_mock_enclave_server;
+use reth_node_builder::{engine_tree_config::TreeConfig, EngineNodeLauncher};
+use reth_provider::providers::BlockchainProvider2;
+use reth_tracing::tracing::*;
+use seismic_node::chainspec::SeismicChainSpecParser;
+use seismic_rpc_api::rpc::{EthApiExt, EthApiOverrideServer, SeismicApi, SeismicApiServer};
+
+fn main() {
+    use clap::Parser;
+    use reth::cli::Cli;
+    use reth_node_ethereum::{node::EthereumAddOns, EthereumNode};
+
+    reth_cli_util::sigsegv_handler::install();
+
+    // Enable backtraces unless a RUST_BACKTRACE value has already been explicitly provided.
+    if std::env::var_os("RUST_BACKTRACE").is_none() {
+        std::env::set_var("RUST_BACKTRACE", "1");
+    }
+
+    if let Err(err) = Cli::<SeismicChainSpecParser, NoArgs>::parse().run(|builder, _| async move {
+        let engine_tree_config = TreeConfig::default();
+
+        // building seismic api
+        let seismic_api = SeismicApi::new(builder.config());
+
+        let node = builder
+            .with_types_and_provider::<EthereumNode, BlockchainProvider2<_>>()
+            .with_components(EthereumNode::components())
+            .with_add_ons(EthereumAddOns::default())
+            .on_node_started(move |ctx| {
+                if ctx.config.enclave.mock_server {
+                    ctx.task_executor.spawn(async move {
+                        start_blocking_mock_enclave_server(
+                            ctx.config.enclave.enclave_server_addr,
+                            ctx.config.enclave.enclave_server_port,
+                        )
+                        .await;
+                    });
+                }
+                Ok(())
+            })
+            .extend_rpc_modules(move |ctx| {
+                // replace eth_ namespace
+                ctx.modules.replace_configured(
+                    EthApiExt::new(ctx.registry.eth_api().clone()).into_rpc(),
+                )?;
+
+                // add seismic_ namespace
+                ctx.modules.merge_configured(seismic_api.into_rpc())?;
+                info!(target: "reth::cli", "seismic api configured");
+                Ok(())
+            })
+            .launch_with_fn(|builder| {
+                let launcher = EngineNodeLauncher::new(
+                    builder.task_executor().clone(),
+                    builder.config().datadir(),
+                    engine_tree_config,
+                );
+                builder.launch_with(launcher)
+            })
+            .await?;
+        node.node_exit_future.await
+    }) {
+        eprintln!("Error: {err:?}");
+        std::process::exit(1);
+    }
+}
diff --git a/book.toml b/book.toml
index 00838b001..9fdd4b0d0 100644
--- a/book.toml
+++ b/book.toml
@@ -1,14 +1,14 @@
 [book]
-authors = ["reth Core Contributors"]
+authors = ["reth and seismic-reth Core Contributors"]
 language = "en"
 multilingual = false
 src = "book"
-title = "reth Book"
+title = "seismic-reth Book"
 description = "A book on all things Reth"
 
 [output.html]
 theme = "book/theme"
-git-repository-url = "https://github.com/paradigmxyz/reth"
+git-repository-url = "https://github.com/SeismicSystems/seismic-reth/"
 default-theme = "ayu"
 no-section-label = true
 
diff --git a/book/cli/SUMMARY.md b/book/cli/SUMMARY.md
index 5f338a0d1..000dcbdc5 100644
--- a/book/cli/SUMMARY.md
+++ b/book/cli/SUMMARY.md
@@ -1,46 +1,46 @@
-- [`reth`](./reth.md)
-  - [`reth node`](./reth/node.md)
-  - [`reth init`](./reth/init.md)
-  - [`reth init-state`](./reth/init-state.md)
-  - [`reth import`](./reth/import.md)
-  - [`reth dump-genesis`](./reth/dump-genesis.md)
-  - [`reth db`](./reth/db.md)
-    - [`reth db stats`](./reth/db/stats.md)
-    - [`reth db list`](./reth/db/list.md)
-    - [`reth db checksum`](./reth/db/checksum.md)
-    - [`reth db diff`](./reth/db/diff.md)
-    - [`reth db get`](./reth/db/get.md)
-      - [`reth db get mdbx`](./reth/db/get/mdbx.md)
-      - [`reth db get static-file`](./reth/db/get/static-file.md)
-    - [`reth db drop`](./reth/db/drop.md)
-    - [`reth db clear`](./reth/db/clear.md)
-      - [`reth db clear mdbx`](./reth/db/clear/mdbx.md)
-      - [`reth db clear static-file`](./reth/db/clear/static-file.md)
-    - [`reth db version`](./reth/db/version.md)
-    - [`reth db path`](./reth/db/path.md)
-  - [`reth stage`](./reth/stage.md)
-    - [`reth stage run`](./reth/stage/run.md)
-    - [`reth stage drop`](./reth/stage/drop.md)
-    - [`reth stage dump`](./reth/stage/dump.md)
-      - [`reth stage dump execution`](./reth/stage/dump/execution.md)
-      - [`reth stage dump storage-hashing`](./reth/stage/dump/storage-hashing.md)
-      - [`reth stage dump account-hashing`](./reth/stage/dump/account-hashing.md)
-      - [`reth stage dump merkle`](./reth/stage/dump/merkle.md)
-    - [`reth stage unwind`](./reth/stage/unwind.md)
-      - [`reth stage unwind to-block`](./reth/stage/unwind/to-block.md)
-      - [`reth stage unwind num-blocks`](./reth/stage/unwind/num-blocks.md)
-  - [`reth p2p`](./reth/p2p.md)
-    - [`reth p2p header`](./reth/p2p/header.md)
-    - [`reth p2p body`](./reth/p2p/body.md)
-    - [`reth p2p rlpx`](./reth/p2p/rlpx.md)
-      - [`reth p2p rlpx ping`](./reth/p2p/rlpx/ping.md)
-  - [`reth config`](./reth/config.md)
-  - [`reth debug`](./reth/debug.md)
-    - [`reth debug execution`](./reth/debug/execution.md)
-    - [`reth debug merkle`](./reth/debug/merkle.md)
-    - [`reth debug in-memory-merkle`](./reth/debug/in-memory-merkle.md)
-    - [`reth debug build-block`](./reth/debug/build-block.md)
-    - [`reth debug replay-engine`](./reth/debug/replay-engine.md)
-  - [`reth recover`](./reth/recover.md)
-    - [`reth recover storage-tries`](./reth/recover/storage-tries.md)
-  - [`reth prune`](./reth/prune.md)
+-   [`seismic-reth`](./reth.md)
+    -   [`seismic-reth node`](./reth/node.md)
+    -   [`seismic-reth init`](./reth/init.md)
+    -   [`seismic-reth init-state`](./reth/init-state.md)
+    -   [`seismic-reth import`](./reth/import.md)
+    -   [`seismic-reth dump-genesis`](./reth/dump-genesis.md)
+    -   [`seismic-reth db`](./reth/db.md)
+        -   [`seismic-reth db stats`](./reth/db/stats.md)
+        -   [`seismic-reth db list`](./reth/db/list.md)
+        -   [`seismic-reth db checksum`](./reth/db/checksum.md)
+        -   [`seismic-reth db diff`](./reth/db/diff.md)
+        -   [`seismic-reth db get`](./reth/db/get.md)
+            -   [`seismic-reth db get mdbx`](./reth/db/get/mdbx.md)
+            -   [`seismic-reth db get static-file`](./reth/db/get/static-file.md)
+        -   [`seismic-reth db drop`](./reth/db/drop.md)
+        -   [`seismic-reth db clear`](./reth/db/clear.md)
+            -   [`seismic-reth db clear mdbx`](./reth/db/clear/mdbx.md)
+            -   [`seismic-reth db clear static-file`](./reth/db/clear/static-file.md)
+        -   [`seismic-reth db version`](./reth/db/version.md)
+        -   [`seismic-reth db path`](./reth/db/path.md)
+    -   [`seismic-reth stage`](./reth/stage.md)
+        -   [`seismic-reth stage run`](./reth/stage/run.md)
+        -   [`seismic-reth stage drop`](./reth/stage/drop.md)
+        -   [`seismic-reth stage dump`](./reth/stage/dump.md)
+            -   [`seismic-reth stage dump execution`](./reth/stage/dump/execution.md)
+            -   [`seismic-reth stage dump storage-hashing`](./reth/stage/dump/storage-hashing.md)
+            -   [`seismic-reth stage dump account-hashing`](./reth/stage/dump/account-hashing.md)
+            -   [`seismic-reth stage dump merkle`](./reth/stage/dump/merkle.md)
+        -   [`seismic-reth stage unwind`](./reth/stage/unwind.md)
+            -   [`seismic-reth stage unwind to-block`](./reth/stage/unwind/to-block.md)
+            -   [`seismic-reth stage unwind num-blocks`](./reth/stage/unwind/num-blocks.md)
+    -   [`seismic-reth p2p`](./reth/p2p.md)
+        -   [`seismic-reth p2p header`](./reth/p2p/header.md)
+        -   [`seismic-reth p2p body`](./reth/p2p/body.md)
+        -   [`seismic-reth p2p rlpx`](./reth/p2p/rlpx.md)
+            -   [`seismic-reth p2p rlpx ping`](./reth/p2p/rlpx/ping.md)
+    -   [`seismic-reth config`](./reth/config.md)
+    -   [`seismic-reth debug`](./reth/debug.md)
+        -   [`seismic-reth debug execution`](./reth/debug/execution.md)
+        -   [`seismic-reth debug merkle`](./reth/debug/merkle.md)
+        -   [`seismic-reth debug in-memory-merkle`](./reth/debug/in-memory-merkle.md)
+        -   [`seismic-reth debug build-block`](./reth/debug/build-block.md)
+        -   [`seismic-reth debug replay-engine`](./reth/debug/replay-engine.md)
+    -   [`seismic-reth recover`](./reth/recover.md)
+        -   [`seismic-reth recover storage-tries`](./reth/recover/storage-tries.md)
+    -   [`seismic-reth prune`](./reth/prune.md)
diff --git a/book/cli/reth.md b/book/cli/reth.md
index 70a1dec4d..faa17505a 100644
--- a/book/cli/reth.md
+++ b/book/cli/reth.md
@@ -1,12 +1,13 @@
 # reth
 
-Reth
+Seismic Reth
 
 ```bash
-$ reth --help
+$ seismic-reth --help
 ```
+
 ```txt
-Usage: reth [OPTIONS] <COMMAND>
+Usage: seismic-reth [OPTIONS] <COMMAND>
 
 Commands:
   node          Start the node
@@ -126,4 +127,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/config.md b/book/cli/reth/config.md
index ebf76fae3..e4b0f37b4 100644
--- a/book/cli/reth/config.md
+++ b/book/cli/reth/config.md
@@ -5,8 +5,9 @@ Write config to stdout
 ```bash
 $ reth config --help
 ```
+
 ```txt
-Usage: reth config [OPTIONS]
+Usage: seismic-reth config [OPTIONS]
 
 Options:
       --config <FILE>
@@ -114,4 +115,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db.md b/book/cli/reth/db.md
index 17a6de4e6..7385594d8 100644
--- a/book/cli/reth/db.md
+++ b/book/cli/reth/db.md
@@ -5,8 +5,9 @@ Database debugging utilities
 ```bash
 $ reth db --help
 ```
+
 ```txt
-Usage: reth db [OPTIONS] <COMMAND>
+Usage: seismic-reth db [OPTIONS] <COMMAND>
 
 Commands:
   stats     Lists all the tables, their entry count and their size
@@ -166,4 +167,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/checksum.md b/book/cli/reth/db/checksum.md
index a422454fd..d067dad6a 100644
--- a/book/cli/reth/db/checksum.md
+++ b/book/cli/reth/db/checksum.md
@@ -5,8 +5,9 @@ Calculates the content checksum of a table
 ```bash
 $ reth db checksum --help
 ```
+
 ```txt
-Usage: reth db checksum [OPTIONS] <TABLE>
+Usage: seismic-reth db checksum [OPTIONS] <TABLE>
 
 Arguments:
   <TABLE>
@@ -112,4 +113,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/clear.md b/book/cli/reth/db/clear.md
index 554499a36..d208c64a6 100644
--- a/book/cli/reth/db/clear.md
+++ b/book/cli/reth/db/clear.md
@@ -5,8 +5,9 @@ Deletes all table entries
 ```bash
 $ reth db clear --help
 ```
+
 ```txt
-Usage: reth db clear [OPTIONS] <COMMAND>
+Usage: seismic-reth db clear [OPTIONS] <COMMAND>
 
 Commands:
   mdbx         Deletes all database table entries
@@ -104,4 +105,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/clear/mdbx.md b/book/cli/reth/db/clear/mdbx.md
index 50f373146..e46b2bf12 100644
--- a/book/cli/reth/db/clear/mdbx.md
+++ b/book/cli/reth/db/clear/mdbx.md
@@ -5,8 +5,9 @@ Deletes all database table entries
 ```bash
 $ reth db clear mdbx --help
 ```
+
 ```txt
-Usage: reth db clear mdbx [OPTIONS] <TABLE>
+Usage: seismic-reth db clear mdbx [OPTIONS] <TABLE>
 
 Arguments:
   <TABLE>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/clear/static-file.md b/book/cli/reth/db/clear/static-file.md
index c830af259..4963a5c70 100644
--- a/book/cli/reth/db/clear/static-file.md
+++ b/book/cli/reth/db/clear/static-file.md
@@ -5,8 +5,9 @@ Deletes all static file segment entries
 ```bash
 $ reth db clear static-file --help
 ```
+
 ```txt
-Usage: reth db clear static-file [OPTIONS] <SEGMENT>
+Usage: seismic-reth db clear static-file [OPTIONS] <SEGMENT>
 
 Arguments:
   <SEGMENT>
@@ -106,4 +107,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/diff.md b/book/cli/reth/db/diff.md
index efb9e7d32..e04f58924 100644
--- a/book/cli/reth/db/diff.md
+++ b/book/cli/reth/db/diff.md
@@ -5,8 +5,9 @@ Create a diff between two database tables or two entire databases
 ```bash
 $ reth db diff --help
 ```
+
 ```txt
-Usage: reth db diff [OPTIONS] --secondary-datadir <SECONDARY_DATADIR> --output <OUTPUT>
+Usage: seismic-reth db diff [OPTIONS] --secondary-datadir <SECONDARY_DATADIR> --output <OUTPUT>
 
 Options:
       --secondary-datadir <SECONDARY_DATADIR>
@@ -136,4 +137,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/drop.md b/book/cli/reth/db/drop.md
index c23f6d93c..a68b293c1 100644
--- a/book/cli/reth/db/drop.md
+++ b/book/cli/reth/db/drop.md
@@ -5,8 +5,9 @@ Deletes all database entries
 ```bash
 $ reth db drop --help
 ```
+
 ```txt
-Usage: reth db drop [OPTIONS]
+Usage: seismic-reth db drop [OPTIONS]
 
 Options:
   -f, --force
@@ -102,4 +103,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/get.md b/book/cli/reth/db/get.md
index 266e46e5c..78330fb7d 100644
--- a/book/cli/reth/db/get.md
+++ b/book/cli/reth/db/get.md
@@ -5,8 +5,9 @@ Gets the content of a table for the given key
 ```bash
 $ reth db get --help
 ```
+
 ```txt
-Usage: reth db get [OPTIONS] <COMMAND>
+Usage: seismic-reth db get [OPTIONS] <COMMAND>
 
 Commands:
   mdbx         Gets the content of a database table for the given key
@@ -104,4 +105,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/get/mdbx.md b/book/cli/reth/db/get/mdbx.md
index 18fa76eda..385d038b9 100644
--- a/book/cli/reth/db/get/mdbx.md
+++ b/book/cli/reth/db/get/mdbx.md
@@ -5,8 +5,9 @@ Gets the content of a database table for the given key
 ```bash
 $ reth db get mdbx --help
 ```
+
 ```txt
-Usage: reth db get mdbx [OPTIONS] <TABLE> <KEY> [SUBKEY]
+Usage: seismic-reth db get mdbx [OPTIONS] <TABLE> <KEY> [SUBKEY]
 
 Arguments:
   <TABLE>
@@ -112,4 +113,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/get/static-file.md b/book/cli/reth/db/get/static-file.md
index a50da0c0e..8c2fa65ab 100644
--- a/book/cli/reth/db/get/static-file.md
+++ b/book/cli/reth/db/get/static-file.md
@@ -5,8 +5,9 @@ Gets the content of a static file segment for the given key
 ```bash
 $ reth db get static-file --help
 ```
+
 ```txt
-Usage: reth db get static-file [OPTIONS] <SEGMENT> <KEY>
+Usage: seismic-reth db get static-file [OPTIONS] <SEGMENT> <KEY>
 
 Arguments:
   <SEGMENT>
@@ -112,4 +113,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/list.md b/book/cli/reth/db/list.md
index 9b64a70a0..ce891b688 100644
--- a/book/cli/reth/db/list.md
+++ b/book/cli/reth/db/list.md
@@ -5,8 +5,9 @@ Lists the contents of a table
 ```bash
 $ reth db list --help
 ```
+
 ```txt
-Usage: reth db list [OPTIONS] <TABLE>
+Usage: seismic-reth db list [OPTIONS] <TABLE>
 
 Arguments:
   <TABLE>
@@ -145,4 +146,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/path.md b/book/cli/reth/db/path.md
index a711acad0..71a7e175a 100644
--- a/book/cli/reth/db/path.md
+++ b/book/cli/reth/db/path.md
@@ -5,8 +5,9 @@ Returns the full database path
 ```bash
 $ reth db path --help
 ```
+
 ```txt
-Usage: reth db path [OPTIONS]
+Usage: seismic-reth db path [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -99,4 +100,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/stats.md b/book/cli/reth/db/stats.md
index 2ed087ae1..e45f8afb2 100644
--- a/book/cli/reth/db/stats.md
+++ b/book/cli/reth/db/stats.md
@@ -5,8 +5,9 @@ Lists all the tables, their entry count and their size
 ```bash
 $ reth db stats --help
 ```
+
 ```txt
-Usage: reth db stats [OPTIONS]
+Usage: seismic-reth db stats [OPTIONS]
 
 Options:
       --detailed-sizes
@@ -112,4 +113,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/db/version.md b/book/cli/reth/db/version.md
index 549f97091..9c12ddadd 100644
--- a/book/cli/reth/db/version.md
+++ b/book/cli/reth/db/version.md
@@ -5,8 +5,9 @@ Lists current and local database versions
 ```bash
 $ reth db version --help
 ```
+
 ```txt
-Usage: reth db version [OPTIONS]
+Usage: seismic-reth db version [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -99,4 +100,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug.md b/book/cli/reth/debug.md
index ab016d631..836601891 100644
--- a/book/cli/reth/debug.md
+++ b/book/cli/reth/debug.md
@@ -5,8 +5,9 @@ Various debug routines
 ```bash
 $ reth debug --help
 ```
+
 ```txt
-Usage: reth debug [OPTIONS] <COMMAND>
+Usage: seismic-reth debug [OPTIONS] <COMMAND>
 
 Commands:
   execution         Debug the roundtrip execution of blocks as well as the generated data
@@ -116,4 +117,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug/build-block.md b/book/cli/reth/debug/build-block.md
index 7bceb62b9..d10d21683 100644
--- a/book/cli/reth/debug/build-block.md
+++ b/book/cli/reth/debug/build-block.md
@@ -5,8 +5,9 @@ Debug block building
 ```bash
 $ reth debug build-block --help
 ```
+
 ```txt
-Usage: reth debug build-block [OPTIONS] --prev-randao <PREV_RANDAO> --timestamp <TIMESTAMP> --suggested-fee-recipient <SUGGESTED_FEE_RECIPIENT>
+Usage: seismic-reth debug build-block [OPTIONS] --prev-randao <PREV_RANDAO> --timestamp <TIMESTAMP> --suggested-fee-recipient <SUGGESTED_FEE_RECIPIENT>
 
 Options:
       --instance <INSTANCE>
@@ -175,4 +176,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug/execution.md b/book/cli/reth/debug/execution.md
index b8e1ce05d..c00c41942 100644
--- a/book/cli/reth/debug/execution.md
+++ b/book/cli/reth/debug/execution.md
@@ -5,8 +5,9 @@ Debug the roundtrip execution of blocks as well as the generated data
 ```bash
 $ reth debug execution --help
 ```
+
 ```txt
-Usage: reth debug execution [OPTIONS] --to <TO>
+Usage: seismic-reth debug execution [OPTIONS] --to <TO>
 
 Options:
       --instance <INSTANCE>
@@ -329,4 +330,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug/in-memory-merkle.md b/book/cli/reth/debug/in-memory-merkle.md
index a183db997..7fbc07dcc 100644
--- a/book/cli/reth/debug/in-memory-merkle.md
+++ b/book/cli/reth/debug/in-memory-merkle.md
@@ -5,8 +5,9 @@ Debug in-memory state root calculation
 ```bash
 $ reth debug in-memory-merkle --help
 ```
+
 ```txt
-Usage: reth debug in-memory-merkle [OPTIONS]
+Usage: seismic-reth debug in-memory-merkle [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -329,4 +330,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug/merkle.md b/book/cli/reth/debug/merkle.md
index d9a72794e..bec5c7cbc 100644
--- a/book/cli/reth/debug/merkle.md
+++ b/book/cli/reth/debug/merkle.md
@@ -5,8 +5,9 @@ Debug the clean & incremental state root calculations
 ```bash
 $ reth debug merkle --help
 ```
+
 ```txt
-Usage: reth debug merkle [OPTIONS] --to <TO>
+Usage: seismic-reth debug merkle [OPTIONS] --to <TO>
 
 Options:
       --instance <INSTANCE>
@@ -332,4 +333,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/debug/replay-engine.md b/book/cli/reth/debug/replay-engine.md
index b7a1266d3..b0a0d7117 100644
--- a/book/cli/reth/debug/replay-engine.md
+++ b/book/cli/reth/debug/replay-engine.md
@@ -5,8 +5,9 @@ Debug engine API by replaying stored messages
 ```bash
 $ reth debug replay-engine --help
 ```
+
 ```txt
-Usage: reth debug replay-engine [OPTIONS] --engine-api-store <PATH>
+Usage: seismic-reth debug replay-engine [OPTIONS] --engine-api-store <PATH>
 
 Options:
       --instance <INSTANCE>
@@ -329,4 +330,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/dump-genesis.md b/book/cli/reth/dump-genesis.md
index 0a45ffb32..7102f6b4d 100644
--- a/book/cli/reth/dump-genesis.md
+++ b/book/cli/reth/dump-genesis.md
@@ -5,8 +5,9 @@ Dumps genesis block JSON configuration to stdout
 ```bash
 $ reth dump-genesis --help
 ```
+
 ```txt
-Usage: reth dump-genesis [OPTIONS]
+Usage: seismic-reth dump-genesis [OPTIONS]
 
 Options:
       --chain <CHAIN_OR_PATH>
@@ -108,4 +109,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/import.md b/book/cli/reth/import.md
index 82a521ac0..0fb94dcb3 100644
--- a/book/cli/reth/import.md
+++ b/book/cli/reth/import.md
@@ -5,8 +5,9 @@ This syncs RLP encoded blocks from a file
 ```bash
 $ reth import --help
 ```
+
 ```txt
-Usage: reth import [OPTIONS] <IMPORT_PATH>
+Usage: seismic-reth import [OPTIONS] <IMPORT_PATH>
 
 Options:
       --instance <INSTANCE>
@@ -166,4 +167,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/init-state.md b/book/cli/reth/init-state.md
index 533c0f8f8..16efd1f0f 100644
--- a/book/cli/reth/init-state.md
+++ b/book/cli/reth/init-state.md
@@ -5,8 +5,9 @@ Initialize the database from a state dump file
 ```bash
 $ reth init-state --help
 ```
+
 ```txt
-Usage: reth init-state [OPTIONS] <STATE_DUMP_FILE>
+Usage: seismic-reth init-state [OPTIONS] <STATE_DUMP_FILE>
 
 Options:
       --instance <INSTANCE>
@@ -189,4 +190,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/init.md b/book/cli/reth/init.md
index ebe2a8386..9a9c71a88 100644
--- a/book/cli/reth/init.md
+++ b/book/cli/reth/init.md
@@ -5,8 +5,9 @@ Initialize the database from a genesis file
 ```bash
 $ reth init --help
 ```
+
 ```txt
-Usage: reth init [OPTIONS]
+Usage: seismic-reth init [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -154,4 +155,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/node.md b/book/cli/reth/node.md
index cf05ae66e..9167bf9e5 100644
--- a/book/cli/reth/node.md
+++ b/book/cli/reth/node.md
@@ -1,12 +1,13 @@
-# reth node
+# seismic-reth node
 
 Start the node
 
 ```bash
-$ reth node --help
+$ seismic-reth node --help
 ```
+
 ```txt
-Usage: reth node [OPTIONS]
+Usage: seismic-reth node [OPTIONS]
 
 Options:
       --config <FILE>
@@ -17,9 +18,9 @@ Options:
           Possible values are either a built-in chain or the path to a chain specification file.
 
           Built-in chains:
-              mainnet, sepolia, holesky, dev
+              seismic, dev
 
-          [default: mainnet]
+          [default: seismic]
 
       --instance <INSTANCE>
           Add a new instance of a node.
@@ -764,6 +765,23 @@ Logging:
           - auto:   Colors on
           - never:  Colors off
 
+Trusted Execution Environment Server:
+    The TEE Server provides secure encryption/decryption services for TxSeismic transactions in an isolated environment. Required for processing encrypted TxSeismic transaction data.
+
+      --enclave.endpoint-addr <ADDR>
+          TEE server address to listen on
+
+          [default: 127.0.0.1]
+
+      --enclave.endpoint-port <PORT>
+          TEE server port to listen on
+
+          [default: 8545]
+
+      --enclave.mock-server
+          Spin up mock TEE service for testing purpose at [--enclave.endpoint-addr]:[--enclave.endpoint-port]
+
+
 Display:
   -v, --verbosity...
           Set the minimum log level.
@@ -776,4 +794,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/p2p.md b/book/cli/reth/p2p.md
index 33639042a..1ee3ea199 100644
--- a/book/cli/reth/p2p.md
+++ b/book/cli/reth/p2p.md
@@ -5,8 +5,9 @@ P2P Debugging utilities
 ```bash
 $ reth p2p --help
 ```
+
 ```txt
-Usage: reth p2p [OPTIONS] <COMMAND>
+Usage: seismic-reth p2p [OPTIONS] <COMMAND>
 
 Commands:
   header  Download block header
@@ -332,4 +333,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/p2p/body.md b/book/cli/reth/p2p/body.md
index cb1a96d63..c09a7713c 100644
--- a/book/cli/reth/p2p/body.md
+++ b/book/cli/reth/p2p/body.md
@@ -5,8 +5,9 @@ Download block body
 ```bash
 $ reth p2p body --help
 ```
+
 ```txt
-Usage: reth p2p body [OPTIONS] <ID>
+Usage: seismic-reth p2p body [OPTIONS] <ID>
 
 Arguments:
   <ID>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/p2p/header.md b/book/cli/reth/p2p/header.md
index 69557c523..6e14b9130 100644
--- a/book/cli/reth/p2p/header.md
+++ b/book/cli/reth/p2p/header.md
@@ -5,8 +5,9 @@ Download block header
 ```bash
 $ reth p2p header --help
 ```
+
 ```txt
-Usage: reth p2p header [OPTIONS] <ID>
+Usage: seismic-reth p2p header [OPTIONS] <ID>
 
 Arguments:
   <ID>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/p2p/rlpx.md b/book/cli/reth/p2p/rlpx.md
index 71a164c64..c76b7f5c6 100644
--- a/book/cli/reth/p2p/rlpx.md
+++ b/book/cli/reth/p2p/rlpx.md
@@ -5,8 +5,9 @@ RLPx commands
 ```bash
 $ reth p2p rlpx --help
 ```
+
 ```txt
-Usage: reth p2p rlpx [OPTIONS] <COMMAND>
+Usage: seismic-reth p2p rlpx [OPTIONS] <COMMAND>
 
 Commands:
   ping  ping node
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/p2p/rlpx/ping.md b/book/cli/reth/p2p/rlpx/ping.md
index a7cef4bd3..db40fa6f2 100644
--- a/book/cli/reth/p2p/rlpx/ping.md
+++ b/book/cli/reth/p2p/rlpx/ping.md
@@ -5,8 +5,9 @@ ping node
 ```bash
 $ reth p2p rlpx ping --help
 ```
+
 ```txt
-Usage: reth p2p rlpx ping [OPTIONS] <NODE>
+Usage: seismic-reth p2p rlpx ping [OPTIONS] <NODE>
 
 Arguments:
   <NODE>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/prune.md b/book/cli/reth/prune.md
index 41684ecd9..6e0a74f23 100644
--- a/book/cli/reth/prune.md
+++ b/book/cli/reth/prune.md
@@ -5,8 +5,9 @@ Prune according to the configuration without any limits
 ```bash
 $ reth prune --help
 ```
+
 ```txt
-Usage: reth prune [OPTIONS]
+Usage: seismic-reth prune [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -154,4 +155,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/recover.md b/book/cli/reth/recover.md
index dcb9c3c73..1e25975ca 100644
--- a/book/cli/reth/recover.md
+++ b/book/cli/reth/recover.md
@@ -5,8 +5,9 @@ Scripts for node recovery
 ```bash
 $ reth recover --help
 ```
+
 ```txt
-Usage: reth recover [OPTIONS] <COMMAND>
+Usage: seismic-reth recover [OPTIONS] <COMMAND>
 
 Commands:
   storage-tries  Recover the node by deleting dangling storage tries
@@ -112,4 +113,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/recover/storage-tries.md b/book/cli/reth/recover/storage-tries.md
index 1afe94f55..d82f2229b 100644
--- a/book/cli/reth/recover/storage-tries.md
+++ b/book/cli/reth/recover/storage-tries.md
@@ -5,8 +5,9 @@ Recover the node by deleting dangling storage tries
 ```bash
 $ reth recover storage-tries --help
 ```
+
 ```txt
-Usage: reth recover storage-tries [OPTIONS]
+Usage: seismic-reth recover storage-tries [OPTIONS]
 
 Options:
       --instance <INSTANCE>
@@ -154,4 +155,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage.md b/book/cli/reth/stage.md
index 928ee0639..832e1d6b1 100644
--- a/book/cli/reth/stage.md
+++ b/book/cli/reth/stage.md
@@ -5,8 +5,9 @@ Manipulate individual stages
 ```bash
 $ reth stage --help
 ```
+
 ```txt
-Usage: reth stage [OPTIONS] <COMMAND>
+Usage: seismic-reth stage [OPTIONS] <COMMAND>
 
 Commands:
   run     Run a single stage
@@ -115,4 +116,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/drop.md b/book/cli/reth/stage/drop.md
index c22d6be66..184cca34b 100644
--- a/book/cli/reth/stage/drop.md
+++ b/book/cli/reth/stage/drop.md
@@ -5,8 +5,9 @@ Drop a stage's tables from the database
 ```bash
 $ reth stage drop --help
 ```
+
 ```txt
-Usage: reth stage drop [OPTIONS] <STAGE>
+Usage: seismic-reth stage drop [OPTIONS] <STAGE>
 
 Options:
       --instance <INSTANCE>
@@ -168,4 +169,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/dump.md b/book/cli/reth/stage/dump.md
index e3df5bf2d..1c13321c9 100644
--- a/book/cli/reth/stage/dump.md
+++ b/book/cli/reth/stage/dump.md
@@ -5,8 +5,9 @@ Dumps a stage from a range into a new database
 ```bash
 $ reth stage dump --help
 ```
+
 ```txt
-Usage: reth stage dump [OPTIONS] <COMMAND>
+Usage: seismic-reth stage dump [OPTIONS] <COMMAND>
 
 Commands:
   execution        Execution stage
@@ -161,4 +162,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/dump/account-hashing.md b/book/cli/reth/stage/dump/account-hashing.md
index 46145ed8d..880a7b293 100644
--- a/book/cli/reth/stage/dump/account-hashing.md
+++ b/book/cli/reth/stage/dump/account-hashing.md
@@ -5,8 +5,9 @@
 ```bash
 $ reth stage dump account-hashing --help
 ```
+
 ```txt
-Usage: reth stage dump account-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
+Usage: seismic-reth stage dump account-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
 
 Options:
       --output-datadir <OUTPUT_PATH>
@@ -111,4 +112,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/dump/execution.md b/book/cli/reth/stage/dump/execution.md
index 836265a6f..e58bf60ce 100644
--- a/book/cli/reth/stage/dump/execution.md
+++ b/book/cli/reth/stage/dump/execution.md
@@ -5,8 +5,9 @@ Execution stage
 ```bash
 $ reth stage dump execution --help
 ```
+
 ```txt
-Usage: reth stage dump execution [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
+Usage: seismic-reth stage dump execution [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
 
 Options:
       --output-datadir <OUTPUT_PATH>
@@ -111,4 +112,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/dump/merkle.md b/book/cli/reth/stage/dump/merkle.md
index 90fa0f0f5..3aca18d39 100644
--- a/book/cli/reth/stage/dump/merkle.md
+++ b/book/cli/reth/stage/dump/merkle.md
@@ -5,8 +5,9 @@ Merkle stage
 ```bash
 $ reth stage dump merkle --help
 ```
+
 ```txt
-Usage: reth stage dump merkle [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
+Usage: seismic-reth stage dump merkle [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
 
 Options:
       --output-datadir <OUTPUT_PATH>
@@ -111,4 +112,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/dump/storage-hashing.md b/book/cli/reth/stage/dump/storage-hashing.md
index 2b078570f..32c1378b8 100644
--- a/book/cli/reth/stage/dump/storage-hashing.md
+++ b/book/cli/reth/stage/dump/storage-hashing.md
@@ -5,8 +5,9 @@
 ```bash
 $ reth stage dump storage-hashing --help
 ```
+
 ```txt
-Usage: reth stage dump storage-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
+Usage: seismic-reth stage dump storage-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>
 
 Options:
       --output-datadir <OUTPUT_PATH>
@@ -111,4 +112,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/run.md b/book/cli/reth/stage/run.md
index 204efc968..5397b5bb4 100644
--- a/book/cli/reth/stage/run.md
+++ b/book/cli/reth/stage/run.md
@@ -5,8 +5,9 @@ Run a single stage.
 ```bash
 $ reth stage run --help
 ```
+
 ```txt
-Usage: reth stage run [OPTIONS] --from <FROM> --to <TO> <STAGE>
+Usage: seismic-reth stage run [OPTIONS] --from <FROM> --to <TO> <STAGE>
 
 Options:
       --instance <INSTANCE>
@@ -364,4 +365,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/unwind.md b/book/cli/reth/stage/unwind.md
index cb72b9313..d4ff75406 100644
--- a/book/cli/reth/stage/unwind.md
+++ b/book/cli/reth/stage/unwind.md
@@ -5,8 +5,9 @@ Unwinds a certain block range, deleting it from the database
 ```bash
 $ reth stage unwind --help
 ```
+
 ```txt
-Usage: reth stage unwind [OPTIONS] <COMMAND>
+Usage: seismic-reth stage unwind [OPTIONS] <COMMAND>
 
 Commands:
   to-block    Unwinds the database from the latest block, until the given block number or hash has been reached, that block is not included
@@ -329,4 +330,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/unwind/num-blocks.md b/book/cli/reth/stage/unwind/num-blocks.md
index c74f75556..09e30b530 100644
--- a/book/cli/reth/stage/unwind/num-blocks.md
+++ b/book/cli/reth/stage/unwind/num-blocks.md
@@ -5,8 +5,9 @@ Unwinds the database from the latest block, until the given number of blocks hav
 ```bash
 $ reth stage unwind num-blocks --help
 ```
+
 ```txt
-Usage: reth stage unwind num-blocks [OPTIONS] <AMOUNT>
+Usage: seismic-reth stage unwind num-blocks [OPTIONS] <AMOUNT>
 
 Arguments:
   <AMOUNT>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/stage/unwind/to-block.md b/book/cli/reth/stage/unwind/to-block.md
index ea710b953..e09d1e4fd 100644
--- a/book/cli/reth/stage/unwind/to-block.md
+++ b/book/cli/reth/stage/unwind/to-block.md
@@ -5,8 +5,9 @@ Unwinds the database from the latest block, until the given block number or hash
 ```bash
 $ reth stage unwind to-block --help
 ```
+
 ```txt
-Usage: reth stage unwind to-block [OPTIONS] <TARGET>
+Usage: seismic-reth stage unwind to-block [OPTIONS] <TARGET>
 
 Arguments:
   <TARGET>
@@ -103,4 +104,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/test-vectors.md b/book/cli/reth/test-vectors.md
index 844c5ed84..27d7b619e 100644
--- a/book/cli/reth/test-vectors.md
+++ b/book/cli/reth/test-vectors.md
@@ -4,7 +4,7 @@ Generate Test Vectors
 
 ```bash
 $ reth test-vectors --help
-Usage: reth test-vectors [OPTIONS] <COMMAND>
+Usage: seismic-reth test-vectors [OPTIONS] <COMMAND>
 
 Commands:
   tables  Generates test vectors for specified tables. If no table is specified, generate for all
@@ -110,4 +110,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/reth/test-vectors/tables.md b/book/cli/reth/test-vectors/tables.md
index 2a3023817..dacf0b385 100644
--- a/book/cli/reth/test-vectors/tables.md
+++ b/book/cli/reth/test-vectors/tables.md
@@ -4,7 +4,7 @@ Generates test vectors for specified tables. If no table is specified, generate
 
 ```bash
 $ reth test-vectors tables --help
-Usage: reth test-vectors tables [OPTIONS] [NAMES]...
+Usage: seismic-reth test-vectors tables [OPTIONS] [NAMES]...
 
 Arguments:
   [NAMES]...
@@ -110,4 +110,4 @@ Display:
 
   -q, --quiet
           Silence all log output
-```
\ No newline at end of file
+```
diff --git a/book/cli/seismic-reth/node.md b/book/cli/seismic-reth/node.md
new file mode 100644
index 000000000..e69de29bb
diff --git a/book/developers/seismic-developers.md b/book/developers/seismic-developers.md
new file mode 100644
index 000000000..07745bc5b
--- /dev/null
+++ b/book/developers/seismic-developers.md
@@ -0,0 +1,52 @@
+# Seismic Developer
+
+#### Table of Contents
+
+ - [Running a Local Full Node](#running-a-local-full-node)
+   - [Build a Reth Docker Image](#build-a-reth-docker-image)
+   - [Spin Up a Network of Nodes](#spin-up-a-network-of-nodes)
+   - [Debugging](#debugging)
+
+## Running a Local Full Node
+
+### Build a Reth Docker Image
+
+Add the ABSOLUTE file path to your SSH private key with GitHub as the value of the `src=` parameter when you run the following command. This is to build Reth's dependencies from Seismic's GitHub, if there are any.
+
+```bash
+docker buildx build --secret id=ssh_key,src=[ABSOLUTE_PATH_TO_YOUR_SSH_PK] -t seismic-reth:local .
+```
+
+1. Because we use multistage builds during the creation of the final image, the SSH key is only copied to the intermediate image, which means that the final image will not contain your SSH keys.
+2. In production environments, we can use `docker secret` to pass the same SSH keys.
+
+### Spin Up a Network of Nodes
+
+We use `kurtosis` and [ethereum-package](https://github.com/ethpandaops/ethereum-package) to spin up a network of nodes.
+
+```
+kurtosis run --enclave seismic-local github.com/ethpandaops/ethereum-package --args-file network_params.yaml
+```
+
+To verify that the nodes are brought up, you should be able to see the corresponding containers.
+
+* **vc-1**: Refers to Validator Client (VC). This is likely a Lighthouse validator client interacting with both the Reth execution client and Lighthouse beacon node for proposing and attesting blocks in Ethereum’s Proof of Stake consensus.
+* **cl-1**: Refers to the Consensus Layer (CL). This is probably the Lighthouse beacon node responsible for maintaining consensus and communicating with the Reth execution client.
+* **el-1**: Refers to the Execution Layer (EL). This is most likely the Reth execution client, which processes transactions, executes smart contracts, and maintains the Ethereum state.
+
+In particular, the above command does the following:
+
+1. Generates Execution Layer (EL) and Consensus Layer (CL) genesis information using [the Ethereum genesis generator](https://github.com/ethpandaops/ethereum-genesis-generator).
+2. Configures and bootstraps a network of Ethereum nodes of *n* size using the genesis data generated above.
+3. Spins up a [transaction spammer](https://github.com/MariusVanDerWijden/tx-fuzz) to send fake transactions to the network.
+4. Spins up and connects a [testnet verifier](https://github.com/ethereum/merge-testnet-verifier).
+5. Spins up a Grafana and Prometheus instance to observe the network.
+6. Spins up a Blobscan instance to analyze blob transactions (EIP-4844).
+
+For more information, please see the [ethereum-package](https://github.com/ethpandaops/ethereum-package) documentation. We might want to fork this package for Seismic for more customizable testing, especially when enclaves start to get involved.
+
+### Debugging
+
+You can run `docker exec -it [CONTAINER_ID] bash` to debug a specific container.
+
+TODO: I don't think you can bring up more than one node using Kurtosis. There is currently a bug.
\ No newline at end of file
diff --git a/book/installation/docker.md b/book/installation/docker.md
index 6ce2ae50a..61d433a7b 100644
--- a/book/installation/docker.md
+++ b/book/installation/docker.md
@@ -43,6 +43,11 @@ To build the image from source, navigate to the root of the repository and run:
 docker build . -t reth:local
 ```
 
+If your build requires ssh private key to clone private repo,
+```bash
+docker buildx build --secret id=ssh_key,src=$ABSOLUTE_PATH_TO_SSH_PK -t reth:local .
+```
+
 The build will likely take several minutes. Once it's built, test it with:
 
 ```bash
diff --git a/book/installation/source.md b/book/installation/source.md
index d9642c4bc..d8a3048f7 100644
--- a/book/installation/source.md
+++ b/book/installation/source.md
@@ -1,14 +1,14 @@
 # Build from Source
 
-You can build Reth on Linux, macOS, Windows, and Windows WSL2.
+You can build Seismic Reth on Linux, macOS, Windows, and Windows WSL2.
 
 > **Note**
 >
-> Reth does **not** work on Windows WSL1.
+> Seismic Reth does **not** work on Windows WSL1.
 
 ## Dependencies
 
-First, **install Rust** using [rustup](https://rustup.rs/)： 
+First, **install Rust** using [rustup](https://rustup.rs/)：
 
 ```bash
 curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
@@ -18,39 +18,39 @@ The rustup installer provides an easy way to update the Rust compiler, and works
 
 > **Tips**
 >
-> - During installation, when prompted, enter `1` for the default installation.
-> - After Rust installation completes, try running `cargo version` . If it cannot
->   be found, run `source $HOME/.cargo/env`. After that, running `cargo version` should return the version, for example `cargo 1.68.2`.
-> - It's generally advisable to append `source $HOME/.cargo/env` to `~/.bashrc`.
+> -   During installation, when prompted, enter `1` for the default installation.
+> -   After Rust installation completes, try running `cargo version` . If it cannot
+>     be found, run `source $HOME/.cargo/env`. After that, running `cargo version` should return the version, for example `cargo 1.68.2`.
+> -   It's generally advisable to append `source $HOME/.cargo/env` to `~/.bashrc`.
 
 With Rust installed, follow the instructions below to install dependencies relevant to your
 operating system:
 
-- **Ubuntu**: `apt-get install libclang-dev pkg-config build-essential`
-- **macOS**: `brew install llvm pkg-config`
-- **Windows**: `choco install llvm` or `winget install LLVM.LLVM`
+-   **Ubuntu**: `apt-get install libclang-dev pkg-config build-essential`
+-   **macOS**: `brew install llvm pkg-config`
+-   **Windows**: `choco install llvm` or `winget install LLVM.LLVM`
 
-These are needed to build bindings for Reth's database.
+These are needed to build bindings for Seismic Reth's database.
 
 The Minimum Supported Rust Version (MSRV) of this project is 1.80.0. If you already have a version of Rust installed,
 you can check your version by running `rustc --version`. To update your version of Rust, run `rustup update`.
 
-## Build Reth
+## Build Seismic Reth
 
 With Rust and the dependencies installed, you're ready to build Reth. First, clone the repository:
 
 ```bash
-git clone https://github.com/paradigmxyz/reth
-cd reth
+git clone https://github.com/SeismicSystems/seismic-reth
+cd seismic-reth
 ```
 
 Then, install Reth into your `PATH` directly via:
 
 ```bash
-cargo install --locked --path bin/reth --bin reth
+cargo install --locked --path seismic-reth --bin seismic-reth
 ```
 
-The binary will now be accessible as `reth` via the command line, and exist under your default `.cargo/bin` folder.
+The binary will now be accessible as `seismic-reth` via the command line, and exist under your default `.cargo/bin` folder.
 
 Alternatively, you can build yourself with:
 
@@ -58,9 +58,9 @@ Alternatively, you can build yourself with:
 cargo build --release
 ```
 
-This will place the reth binary under `./target/release/reth`, and you can copy it to your directory of preference after that.
+This will place the seismic-reth binary under `./target/release/seismic-reth`, and you can copy it to your directory of preference after that.
 
-Compilation may take around 10 minutes. Installation was successful if `reth --help` displays the [command-line documentation](../cli/cli.md).
+Compilation may take around 10 minutes. Installation was successful if `seismic-reth --help` displays the [command-line documentation](../cli/cli.md).
 
 If you run into any issues, please check the [Troubleshooting](#troubleshooting) section, or reach out to us on [Telegram](https://t.me/paradigm_reth).
 
@@ -88,11 +88,11 @@ You can customise the compiler settings used to compile Reth via
 
 Reth includes several profiles which can be selected via the Cargo flag `--profile`.
 
-* `release`: default for source builds, enables most optimisations while not taking too long to
-  compile.
-* `maxperf`: default for binary releases, enables aggressive optimisations including full LTO.
-  Although compiling with this profile improves some benchmarks by around 20% compared to `release`,
-  it imposes a _significant_ cost at compile time and is only recommended if you have a fast CPU.
+-   `release`: default for source builds, enables most optimisations while not taking too long to
+    compile.
+-   `maxperf`: default for binary releases, enables aggressive optimisations including full LTO.
+    Although compiling with this profile improves some benchmarks by around 20% compared to `release`,
+    it imposes a _significant_ cost at compile time and is only recommended if you have a fast CPU.
 
 **Rust compiler flags**
 
@@ -107,9 +107,10 @@ RUSTFLAGS="-C target-cpu=native" cargo build --profile maxperf
 
 Finally, some optional features are present that may improve performance, but may not very portable,
 and as such might not compile on your particular system. These are currently:
-- `jemalloc`: replaces the default system memory allocator with [`jemalloc`](https://jemalloc.net/); this feature is unstable on Windows
-- `asm-keccak`: replaces the default, pure-Rust implementation of Keccak256 with one implemented in assembly; see [the `keccak-asm` crate](https://github.com/DaniPopes/keccak-asm) for more details and supported targets
-- `min-LEVEL-logs`, where `LEVEL` is one of `error`, `warn`, `info`, `debug`, `trace`: disables compilation of logs of lower level than the given one; this in general isn't that significant, and is not recommended due to the loss of debugging that the logs would provide
+
+-   `jemalloc`: replaces the default system memory allocator with [`jemalloc`](https://jemalloc.net/); this feature is unstable on Windows
+-   `asm-keccak`: replaces the default, pure-Rust implementation of Keccak256 with one implemented in assembly; see [the `keccak-asm` crate](https://github.com/DaniPopes/keccak-asm) for more details and supported targets
+-   `min-LEVEL-logs`, where `LEVEL` is one of `error`, `warn`, `info`, `debug`, `trace`: disables compilation of logs of lower level than the given one; this in general isn't that significant, and is not recommended due to the loss of debugging that the logs would provide
 
 You can activate features by passing them to the `--features` or `-F` Cargo flag;
 multiple features can be activated with a space- or comma-separated list to the flag:
@@ -122,7 +123,7 @@ RUSTFLAGS="-C target-cpu=native" cargo build --profile maxperf --features jemall
 
 ### Command is not found
 
-Reth will be installed to `CARGO_HOME` or `$HOME/.cargo`. This directory needs to be on your `PATH` before you can run `$ reth`.
+Seismic Reth will be installed to `CARGO_HOME` or `$HOME/.cargo`. This directory needs to be on your `PATH` before you can run `$ seismic-reth`.
 
 See ["Configuring the `PATH` environment variable"](https://www.rust-lang.org/tools/install) for more information.
 
@@ -131,7 +132,7 @@ See ["Configuring the `PATH` environment variable"](https://www.rust-lang.org/to
 Make sure you are running the latest version of Rust. If you have installed Rust using rustup, simply run `rustup update`.
 
 If you can't install the latest version of Rust you can instead compile using the Minimum Supported
-Rust Version (MSRV) which is listed under the `rust-version` key in Reth's
+Rust Version (MSRV) which is listed under the `rust-version` key in Seismic Reth's
 [Cargo.toml](https://github.com/paradigmxyz/reth/blob/main/Cargo.toml).
 
 If compilation fails with `(signal: 9, SIGKILL: kill)`, this could mean your machine ran out of
@@ -147,8 +148,8 @@ _(Thanks to Sigma Prime for this section from [their Lighthouse book](https://li
 
 ### Bus error (WSL2)
 
-In WSL 2 on Windows, the default virtual disk size is set to 1TB. 
+In WSL 2 on Windows, the default virtual disk size is set to 1TB.
 
-You must increase the allocated disk size for your WSL2 instance before syncing reth.
+You must increase the allocated disk size for your WSL2 instance before syncing seismic-reth.
 
 You can follow the instructions here: [how to expand the size of your WSL2 virtual hard disk.](https://learn.microsoft.com/en-us/windows/wsl/disk-space#how-to-expand-the-size-of-your-wsl-2-virtual-hard-disk)
diff --git a/book/intro.md b/book/intro.md
index 077cfed30..f4ddadbdc 100644
--- a/book/intro.md
+++ b/book/intro.md
@@ -1,100 +1,63 @@
-# Reth Book
-_Documentation for Reth users and developers._
+# Seismic Reth Book
 
-[![Telegram Chat][tg-badge]][tg-url]
+_Documentation for Reth users and developers._
 
-Reth (short for Rust Ethereum, [pronunciation](https://twitter.com/kelvinfichter/status/1597653609411268608)) is an **Ethereum full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient.**
+Seismic Reth is an **Seismic full node implementation that is focused on being user-friendly, highly modular, as well as being fast and efficient.**
 
-Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.
+Seismic Reth is production ready, and suitable for usage in mission-critical environments such as staking or high-uptime services. We also actively recommend professional node operators to switch to Reth in production for performance and cost reasons in use cases where high performance with great margins is required such as RPC, MEV, Indexing, Simulations, and P2P activities.
 
-<img src="https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-prod.png" style="border-radius: 20px">
+<img src="https://raw.githubusercontent.com/SeismicSystems/seismic-reth/seismic/assets/seismic-reth-beta.png" style="border-radius: 20px">
 
 <!-- Add a quick description about Reth, what it is, the goals of the build, and any other quick overview information   -->
 
 ## What is this about?
 
-[Reth](https://github.com/paradigmxyz/reth/) is an execution layer (EL) implementation that is compatible with all Ethereum consensus layer (CL) implementations that support the [Engine API](https://github.com/ethereum/execution-apis/tree/59e3a719021f48c1ef5653840e3ea5750e6af693/src/engine).
+[Seismic Reth](https://github.com/SeismicSystems/seismic-reth) is an execution layer (EL) implementation that is compatible with all Ethereum consensus layer (CL) implementations that support the [Engine API](https://github.com/ethereum/execution-apis/tree/59e3a719021f48c1ef5653840e3ea5750e6af693/src/engine).
 
-It is originally built and driven forward by [Paradigm](https://paradigm.xyz/), and is licensed under the Apache and MIT licenses.
+It is originally built and driven forward by [Seismic Systems](https://www.seismic.systems/).
 
-As a full Ethereum node, Reth allows users to connect to the Ethereum network and interact with the Ethereum blockchain.
+As a full Seismic node, Reth allows users to connect to the Seismic network and interact with the Seismic blockchain.
 
-This includes sending and receiving transactions, querying logs and traces, as well as accessing and interacting with smart contracts.
+This includes sending and receiving encrypted transactions, querying logs, as well as accessing and interacting with smart contracts.
 
-Building a successful Ethereum node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.
+Building a successful Seismic node requires creating a high-quality implementation that is both secure and efficient, as well as being easy to use on consumer hardware. It also requires building a strong community of contributors who can help support and improve the software.
 
-## What are the goals of Reth?
+## What are the goals of Seismic Reth?
 
 **1. Modularity**
 
-Every component of Reth is built to be used as a library: well-tested, heavily documented and benchmarked. We envision that developers will import the node's crates, mix and match, and innovate on top of them.
-
-Examples of such usage include, but are not limited to, spinning up standalone P2P networks, talking directly to a node's database, or "unbundling" the node into the components you need.
-
-To achieve that, we are licensing Reth under the Apache/MIT permissive license.
+Changes to the upstream Reth is minimized refactoring is continuously pushed to maintain the modularity of the upstream repository
 
 **2. Performance**
 
-Reth aims to be fast, so we used Rust and the [Erigon staged-sync](https://erigon.substack.com/p/erigon-stage-sync-and-control-flows) node architecture.
-
-We also use our Ethereum libraries (including [Alloy](https://github.com/alloy-rs/alloy/) and [revm](https://github.com/bluealloy/revm/)) which we’ve battle-tested and optimized via [Foundry](https://github.com/foundry-rs/foundry/).
-
-**3. Free for anyone to use any way they want**
-
-Reth is free open source software, built for the community, by the community.
-
-By licensing the software under the Apache/MIT license, we want developers to use it without being bound by business licenses, or having to think about the implications of GPL-like licenses.
-
-**4. Client Diversity**
-
-The Ethereum protocol becomes more antifragile when no node implementation dominates. This ensures that if there's a software bug, the network does not finalize a bad block. By building a new client, we hope to contribute to Ethereum's antifragility.
-
-**5. Used by a wide demographic**
-
-We want to solve for node operators that care about fast historical queries, but also for hobbyists who cannot operate on large hardware.
-
-We also want to support teams and individuals who want both sync from genesis and via "fast sync".
-
-We envision that Reth will be configurable enough for the tradeoffs that each team faces.
+Seismic Reth aims to be fast, adding minimal overhead over Reth
 
 ## Who is this for?
 
-Reth is a new Ethereum full node that allows users to sync and interact with the entire blockchain, including its historical state if in archive mode.
-- Full node: It can be used as a full node, which stores and processes the entire blockchain, validates blocks and transactions, and participates in the consensus process.
-- Archive node: It can also be used as an archive node, which stores the entire history of the blockchain and is useful for applications that need access to historical data.
+Seismic Reth is a new Seismic full node that allows users to sync and interact with the entire blockchain, including its historical state if in archive mode.
+
+-   Full node: It can be used as a full node, which stores and processes the entire blockchain, validates blocks and transactions, and participates in the consensus process.
+-   Archive node: It can also be used as an archive node, which stores the entire history of the blockchain and is useful for applications that need access to historical data.
 
 As a data engineer/analyst, or as a data indexer, you'll want to use Archive mode. For all other use cases where historical access is not needed, you can use Full mode.
 
 ## Is this secure?
 
-Reth implements the specification of Ethereum as defined in the [ethereum/execution-specs](https://github.com/ethereum/execution-specs/) repository. To make sure the node is built securely, we run the following tests:
-
-1. EVM state tests are run on every [Revm Pull Request](https://github.com/bluealloy/revm/blob/main/.github/workflows/ethereum-tests.yml)
-1. Hive tests are [run every 24 hours](https://github.com/paradigmxyz/reth/blob/main/.github/workflows/hive.yml) in the main Reth repository.
-1. We regularly re-sync multiple nodes from scratch.
-1. We operate multiple nodes at the tip of Ethereum mainnet and various testnets.
-1. We extensively unit test, fuzz test and document all our code, while also restricting PRs with aggressive lint rules.
-
-We have completed an audit of the [Reth v1.0.0-rc.2](https://github.com/paradigmxyz/reth/releases/tag/v1.0.0-rc.2) with [Sigma Prime](https://sigmaprime.io/), the developers of [Lighthouse](https://github.com/sigp/lighthouse), the Rust Consensus Layer implementation. Find it [here](https://github.com/paradigmxyz/reth/blob/main/audit/sigma_prime_audit_v2.pdf).
-
-[Revm](https://github.com/bluealloy/revm) (the EVM used in Reth) underwent an audit with [Guido Vranken](https://twitter.com/guidovranken) (#1 [Ethereum Bug Bounty](https://ethereum.org/en/bug-bounty)). We will publish the results soon.
-
+To make sure the node is built securely, we run extensive unit and integration tests against seismic components. Our auditing process is on the way.
 
 ## Sections
 
 Here are some useful sections to jump to:
 
-- Install Reth by following the [guide](./installation/installation.md).
-- Sync your node on any [official network](./run/run-a-node.md).
-- View [statistics and metrics](./run/observability.md) about your node.
-- Query the [JSON-RPC](./jsonrpc/intro.md) using Foundry's `cast` or `curl`.
-- Set up your [development environment and contribute](./developers/contribute.md)!
+-   Install Seismic Reth by following the [guide](./installation/installation.md).
+-   Sync your node on any [official network](./run/run-a-node.md).
+-   View [statistics and metrics](./run/observability.md) about your node.
+-   Query the [JSON-RPC](./jsonrpc/intro.md) using Foundry's `cast` or `curl`.
+-   Set up your [development environment and contribute](./developers/contribute.md)!
 
 > 📖 **About this book**
 >
-> The book is continuously rendered [here](https://paradigmxyz.github.io/reth/)!
+> The book is continuously rendered [here](https://seismicsystems.github.io/seismic-reth/)!
 > You can contribute to this book on [GitHub][gh-book].
 
-[tg-badge]: https://img.shields.io/endpoint?color=neon&logo=telegram&label=chat&url=https%3A%2F%2Ftg.sumanjay.workers.dev%2Fparadigm%5Freth
-[tg-url]: https://t.me/paradigm_reth
-[gh-book]: https://github.com/paradigmxyz/reth/tree/main/book
+[gh-book]: https://github.com/SeismicSystems/seismic-reth/tree/seismic/book
diff --git a/crates/blockchain-tree-api/src/lib.rs b/crates/blockchain-tree-api/src/lib.rs
index 7e1d0d714..b014efdb9 100644
--- a/crates/blockchain-tree-api/src/lib.rs
+++ b/crates/blockchain-tree-api/src/lib.rs
@@ -2,7 +2,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/blockchain-tree/src/lib.rs b/crates/blockchain-tree/src/lib.rs
index 3f501bead..cbd9895c6 100644
--- a/crates/blockchain-tree/src/lib.rs
+++ b/crates/blockchain-tree/src/lib.rs
@@ -13,7 +13,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/chain-state/src/in_memory.rs b/crates/chain-state/src/in_memory.rs
index 5b8bb1508..1226b80b5 100644
--- a/crates/chain-state/src/in_memory.rs
+++ b/crates/chain-state/src/in_memory.rs
@@ -944,7 +944,7 @@ mod tests {
     use super::*;
     use crate::test_utils::TestBlockBuilder;
     use alloy_eips::eip7685::Requests;
-    use alloy_primitives::{map::B256HashMap, BlockNumber, Bytes, StorageKey, StorageValue};
+    use alloy_primitives::{map::B256HashMap, BlockNumber, Bytes, StorageKey};
     use rand::Rng;
     use reth_errors::ProviderResult;
     use reth_primitives::{Account, Bytecode, EthPrimitives, Receipt};
@@ -956,6 +956,7 @@ mod tests {
         AccountProof, HashedStorage, MultiProof, MultiProofTargets, StorageMultiProof,
         StorageProof, TrieInput,
     };
+    use revm::primitives::FlaggedStorage;
 
     fn create_mock_state(
         test_block_builder: &mut TestBlockBuilder<EthPrimitives>,
@@ -995,7 +996,7 @@ mod tests {
             &self,
             _address: Address,
             _storage_key: StorageKey,
-        ) -> ProviderResult<Option<StorageValue>> {
+        ) -> ProviderResult<Option<FlaggedStorage>> {
             Ok(None)
         }
 
diff --git a/crates/chain-state/src/lib.rs b/crates/chain-state/src/lib.rs
index ea52aab8f..04998429e 100644
--- a/crates/chain-state/src/lib.rs
+++ b/crates/chain-state/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/chain-state/src/memory_overlay.rs b/crates/chain-state/src/memory_overlay.rs
index da4c2c9fe..49ae675fd 100644
--- a/crates/chain-state/src/memory_overlay.rs
+++ b/crates/chain-state/src/memory_overlay.rs
@@ -1,7 +1,7 @@
 use super::ExecutedBlock;
 use alloy_consensus::BlockHeader;
 use alloy_primitives::{
-    keccak256, map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, StorageValue, B256,
+    keccak256, map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, B256,
 };
 use reth_errors::ProviderResult;
 use reth_primitives::{Account, Bytecode, NodePrimitives};
@@ -13,7 +13,7 @@ use reth_trie::{
     updates::TrieUpdates, AccountProof, HashedPostState, HashedStorage, MultiProof,
     MultiProofTargets, StorageMultiProof, TrieInput,
 };
-use revm::db::BundleState;
+use revm::{db::BundleState, primitives::FlaggedStorage};
 use std::sync::OnceLock;
 
 /// A state provider that stores references to in-memory blocks along with their state as well as a
@@ -228,7 +228,7 @@ macro_rules! impl_state_provider {
                 &self,
                 address: Address,
                 storage_key: StorageKey,
-            ) -> ProviderResult<Option<StorageValue>> {
+            ) -> ProviderResult<Option<FlaggedStorage>> {
                 for block in &self.in_memory {
                     if let Some(value) = block.execution_output.storage(&address, storage_key.into()) {
                         return Ok(Some(value))
diff --git a/crates/chainspec/src/lib.rs b/crates/chainspec/src/lib.rs
index 2e97caba0..a91f07401 100644
--- a/crates/chainspec/src/lib.rs
+++ b/crates/chainspec/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -37,7 +37,8 @@ pub use info::ChainInfo;
 pub use spec::test_fork_ids;
 pub use spec::{
     BaseFeeParams, BaseFeeParamsKind, ChainSpec, ChainSpecBuilder, ChainSpecProvider,
-    DepositContract, ForkBaseFeeParams, DEV, HOLESKY, MAINNET, SEPOLIA,
+    DepositContract, ForkBaseFeeParams, DEV, HOLESKY, MAINNET, SEISMIC_DEV, SEISMIC_MAINNET,
+    SEPOLIA,
 };
 
 /// Simple utility to create a thread-safe sync cell with a value set.
diff --git a/crates/chainspec/src/spec.rs b/crates/chainspec/src/spec.rs
index 06abf129c..a74d531c6 100644
--- a/crates/chainspec/src/spec.rs
+++ b/crates/chainspec/src/spec.rs
@@ -120,6 +120,49 @@ pub static DEV: LazyLock<Arc<ChainSpec>> = LazyLock::new(|| {
     .into()
 });
 
+/// Seismic testnet specification
+pub static SEISMIC_DEV: LazyLock<Arc<ChainSpec>> = LazyLock::new(|| {
+    ChainSpec {
+        chain: Chain::from_id(5124),
+        genesis: serde_json::from_str(include_str!("../res/genesis/dev.json"))
+            .expect("Can't deserialize Dev testnet genesis json"),
+        genesis_hash: once_cell_set(DEV_GENESIS_HASH),
+        paris_block_and_final_difficulty: Some((0, U256::from(0))),
+        hardforks: DEV_HARDFORKS.clone(),
+        base_fee_params: BaseFeeParamsKind::Constant(BaseFeeParams::ethereum()),
+        deposit_contract: None, // TODO: do we even have?
+        ..Default::default()
+    }
+    .into()
+});
+
+/// Seismic mainnet specification
+pub static SEISMIC_MAINNET: LazyLock<Arc<ChainSpec>> = LazyLock::new(|| {
+    let mut spec = ChainSpec {
+        chain: Chain::from_id(5123),
+        genesis: serde_json::from_str(include_str!("../res/genesis/mainnet.json"))
+            .expect("Can't deserialize Mainnet genesis json"),
+        genesis_hash: once_cell_set(MAINNET_GENESIS_HASH),
+        genesis_header: Default::default(),
+        // <https://etherscan.io/block/15537394>
+        paris_block_and_final_difficulty: Some((
+            15537394,
+            U256::from(58_750_003_716_598_352_816_469u128),
+        )),
+        hardforks: EthereumHardfork::mainnet().into(),
+        // https://etherscan.io/tx/0xe75fb554e433e03763a1560646ee22dcb74e5274b34c5ad644e7c0f619a7e1d0
+        deposit_contract: Some(DepositContract::new(
+            MAINNET_DEPOSIT_CONTRACT_ADDRESS,
+            11052984,
+            b256!("649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"),
+        )),
+        base_fee_params: BaseFeeParamsKind::Constant(BaseFeeParams::ethereum()),
+        prune_delete_limit: 20000,
+    };
+    spec.genesis.config.dao_fork_support = true;
+    spec.into()
+});
+
 /// A wrapper around [`BaseFeeParams`] that allows for specifying constant or dynamic EIP-1559
 /// parameters based on the active [Hardfork].
 #[derive(Clone, Debug, PartialEq, Eq)]
@@ -566,6 +609,11 @@ impl ChainSpec {
             _ => None,
         }
     }
+
+    /// Returns true if the chain spec is a seismic chain.
+    pub fn is_seismic(&self) -> bool {
+        self.chain == SEISMIC_DEV.chain || self.chain == SEISMIC_MAINNET.chain
+    }
 }
 
 impl From<Genesis> for ChainSpec {
diff --git a/crates/cli/cli/src/lib.rs b/crates/cli/cli/src/lib.rs
index e2c55057a..8b709cd5c 100644
--- a/crates/cli/cli/src/lib.rs
+++ b/crates/cli/cli/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/cli/commands/src/lib.rs b/crates/cli/commands/src/lib.rs
index 166ea438f..9f2e1ba7f 100644
--- a/crates/cli/commands/src/lib.rs
+++ b/crates/cli/commands/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/cli/commands/src/node.rs b/crates/cli/commands/src/node.rs
index b099a2c05..93a7eef9b 100644
--- a/crates/cli/commands/src/node.rs
+++ b/crates/cli/commands/src/node.rs
@@ -10,8 +10,8 @@ use reth_ethereum_cli::chainspec::EthereumChainSpecParser;
 use reth_node_builder::{NodeBuilder, WithLaunchContext};
 use reth_node_core::{
     args::{
-        DatabaseArgs, DatadirArgs, DebugArgs, DevArgs, NetworkArgs, PayloadBuilderArgs,
-        PruningArgs, RpcServerArgs, TxPoolArgs,
+        DatabaseArgs, DatadirArgs, DebugArgs, DevArgs, EnclaveArgs, NetworkArgs,
+        PayloadBuilderArgs, PruningArgs, RpcServerArgs, TxPoolArgs,
     },
     node_config::NodeConfig,
     version,
@@ -110,6 +110,10 @@ pub struct NodeCommand<
     /// Additional cli arguments
     #[command(flatten, next_help_heading = "Extension")]
     pub ext: Ext,
+
+    /// All enclave related arguments
+    #[command(flatten)]
+    pub enclave: EnclaveArgs,
 }
 
 impl<C: ChainSpecParser> NodeCommand<C> {
@@ -160,6 +164,7 @@ impl<
             dev,
             pruning,
             ext,
+            enclave,
         } = self;
 
         // set up node config
@@ -177,6 +182,7 @@ impl<
             db,
             dev,
             pruning,
+            enclave,
         };
 
         let data_dir = node_config.datadir();
diff --git a/crates/cli/runner/src/lib.rs b/crates/cli/runner/src/lib.rs
index a848ad0b2..eea30da48 100644
--- a/crates/cli/runner/src/lib.rs
+++ b/crates/cli/runner/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/cli/util/src/lib.rs b/crates/cli/util/src/lib.rs
index a5bc2452f..bb63cafdb 100644
--- a/crates/cli/util/src/lib.rs
+++ b/crates/cli/util/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/config/src/lib.rs b/crates/config/src/lib.rs
index 1e81e18ec..55a352c01 100644
--- a/crates/config/src/lib.rs
+++ b/crates/config/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/consensus/beacon/src/lib.rs b/crates/consensus/beacon/src/lib.rs
index f62a75f94..a2512b343 100644
--- a/crates/consensus/beacon/src/lib.rs
+++ b/crates/consensus/beacon/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/consensus/common/src/lib.rs b/crates/consensus/common/src/lib.rs
index e3503656b..2ac27c185 100644
--- a/crates/consensus/common/src/lib.rs
+++ b/crates/consensus/common/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/consensus/consensus/src/lib.rs b/crates/consensus/consensus/src/lib.rs
index ba1b1321e..7d493a1c8 100644
--- a/crates/consensus/consensus/src/lib.rs
+++ b/crates/consensus/consensus/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/consensus/debug-client/src/lib.rs b/crates/consensus/debug-client/src/lib.rs
index e4fa5f44a..7ada721ab 100644
--- a/crates/consensus/debug-client/src/lib.rs
+++ b/crates/consensus/debug-client/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/e2e-test-utils/Cargo.toml b/crates/e2e-test-utils/Cargo.toml
index 7cb851681..0b33b8b78 100644
--- a/crates/e2e-test-utils/Cargo.toml
+++ b/crates/e2e-test-utils/Cargo.toml
@@ -35,7 +35,7 @@ reth-engine-local.workspace = true
 reth-tasks.workspace = true
 
 # currently need to enable this for workspace level
-reth-optimism-primitives  = { workspace = true, features = ["arbitrary"] }
+reth-optimism-primitives  = { workspace = true, features = ["arbitrary"], optional = true }
 
 # rpc
 jsonrpsee.workspace = true
@@ -45,7 +45,7 @@ url.workspace = true
 alloy-primitives.workspace = true
 alloy-eips.workspace = true
 alloy-rlp.workspace = true
-op-alloy-rpc-types-engine.workspace = true
+op-alloy-rpc-types-engine = { workspace = true, optional = true }
 
 futures-util.workspace = true
 eyre.workspace = true
@@ -60,3 +60,6 @@ alloy-network.workspace = true
 alloy-consensus = { workspace = true, features = ["kzg"] }
 tracing.workspace = true
 derive_more.workspace = true
+
+[features]
+optimism = ["dep:op-alloy-rpc-types-engine", "dep:reth-optimism-primitives"]
diff --git a/crates/e2e-test-utils/src/node.rs b/crates/e2e-test-utils/src/node.rs
index b5dd44841..f5b1eb138 100644
--- a/crates/e2e-test-utils/src/node.rs
+++ b/crates/e2e-test-utils/src/node.rs
@@ -18,7 +18,7 @@ use reth_primitives::EthPrimitives;
 use reth_provider::{
     BlockReader, BlockReaderIdExt, CanonStateSubscriptions, StageCheckpointReader,
 };
-use reth_rpc_eth_api::helpers::{EthApiSpec, EthTransactions, TraceExt};
+use reth_rpc_eth_api::helpers::{EthApiSpec, FullEthApi, TraceExt};
 use reth_stages_types::StageId;
 use std::{marker::PhantomData, pin::Pin};
 use tokio_stream::StreamExt;
@@ -98,7 +98,7 @@ where
         Engine::ExecutionPayloadEnvelopeV3: From<Engine::BuiltPayload> + PayloadEnvelopeExt,
         Engine::ExecutionPayloadEnvelopeV4: From<Engine::BuiltPayload> + PayloadEnvelopeExt,
         AddOns::EthApi: EthApiSpec<Provider: BlockReader<Block = reth_primitives::Block>>
-            + EthTransactions
+            + FullEthApi
             + TraceExt,
     {
         let mut chain = Vec::with_capacity(length as usize);
@@ -279,7 +279,7 @@ where
         {
             tokio::time::sleep(std::time::Duration::from_millis(100)).await;
 
-            assert!(start.elapsed() <= std::time::Duration::from_secs(10), "timed out");
+            assert!(start.elapsed() <= std::time::Duration::from_secs(30), "timed out");
         }
 
         // Hack to make sure that all components have time to process canonical state update.
diff --git a/crates/e2e-test-utils/src/payload.rs b/crates/e2e-test-utils/src/payload.rs
index 45889a171..01f6c69a4 100644
--- a/crates/e2e-test-utils/src/payload.rs
+++ b/crates/e2e-test-utils/src/payload.rs
@@ -3,6 +3,7 @@ use reth_payload_builder::{PayloadBuilderHandle, PayloadId};
 use reth_payload_builder_primitives::{Events, PayloadBuilder};
 use reth_payload_primitives::{BuiltPayload, PayloadBuilderAttributes, PayloadTypes};
 use tokio_stream::wrappers::BroadcastStream;
+use tracing::debug;
 
 /// Helper for payload operations
 #[derive(derive_more::Debug)]
@@ -56,6 +57,7 @@ impl<T: PayloadTypes> PayloadTestContext<T> {
     /// Wait until the best built payload is ready
     pub async fn wait_for_built_payload(&self, payload_id: PayloadId) {
         loop {
+            debug!("Waiting for payload {:?}", payload_id);
             let payload = self.payload_builder.best_payload(payload_id).await.unwrap().unwrap();
             if payload.block().body.transactions.is_empty() {
                 tokio::time::sleep(std::time::Duration::from_millis(20)).await;
diff --git a/crates/e2e-test-utils/src/rpc.rs b/crates/e2e-test-utils/src/rpc.rs
index cdc72a295..4edc4f7a0 100644
--- a/crates/e2e-test-utils/src/rpc.rs
+++ b/crates/e2e-test-utils/src/rpc.rs
@@ -1,14 +1,16 @@
 use alloy_consensus::TxEnvelope;
+use alloy_eips::{BlockId, BlockNumberOrTag};
 use alloy_network::eip2718::Decodable2718;
-use alloy_primitives::{Bytes, B256};
+use alloy_primitives::{Address, Bytes, B256};
+use alloy_rpc_types_eth::Account;
 use reth_chainspec::EthereumHardforks;
 use reth_node_api::{FullNodeComponents, NodePrimitives};
 use reth_node_builder::{rpc::RpcRegistry, NodeTypes};
 use reth_provider::BlockReader;
 use reth_rpc_api::DebugApiServer;
 use reth_rpc_eth_api::{
-    helpers::{EthApiSpec, EthTransactions, TraceExt},
-    EthApiTypes,
+    helpers::{EthApiSpec, EthState, FullEthApi, TraceExt},
+    EthApiTypes, RpcReceipt,
 };
 
 #[allow(missing_debug_implementations)]
@@ -27,9 +29,8 @@ where
             >,
         >,
     >,
-    EthApi: EthApiSpec<Provider: BlockReader<Block = reth_primitives::Block>>
-        + EthTransactions
-        + TraceExt,
+    EthApi:
+        EthApiSpec<Provider: BlockReader<Block = reth_primitives::Block>> + FullEthApi + TraceExt,
 {
     /// Injects a raw transaction into the node tx pool via RPC server
     pub async fn inject_tx(&self, raw_tx: Bytes) -> Result<B256, EthApi::Error> {
@@ -43,4 +44,53 @@ where
         let tx = tx.to_vec();
         Ok(TxEnvelope::decode_2718(&mut tx.as_ref()).unwrap())
     }
+
+    /// get transaction receipt
+    pub async fn transaction_receipt(
+        &self,
+        tx_hash: B256,
+    ) -> Result<Option<RpcReceipt<EthApi::NetworkTypes>>, EthApi::Error> {
+        let eth_api = self.inner.eth_api();
+        eth_api.transaction_receipt(tx_hash).await
+    }
+
+    /// get code
+    pub async fn get_code(
+        &self,
+        address: Address,
+        block_number: u64,
+    ) -> Result<Bytes, EthApi::Error> {
+        let eth_api = self.inner.eth_api();
+        EthState::get_code(
+            eth_api,
+            address,
+            Some(BlockId::Number(BlockNumberOrTag::Number(block_number.into()))),
+        )
+        .await
+    }
+
+    pub async fn get_account(
+        &self,
+        address: Address,
+        block_number: u64,
+    ) -> Result<Option<Account>, EthApi::Error> {
+        let eth_api = self.inner.eth_api();
+        EthState::get_account(
+            eth_api,
+            address,
+            BlockId::Number(BlockNumberOrTag::Number(block_number.into())),
+        )
+        .await
+    }
+
+    /// call a raw transaction RPC server
+    pub async fn signed_call(
+        &self,
+        raw_tx: Bytes,
+        block_number: u64,
+    ) -> Result<Bytes, EthApi::Error> {
+        let eth_api = self.inner.eth_api();
+        let block_id = Some(BlockId::Number(BlockNumberOrTag::Number(block_number.into())));
+        eth_api.signed_call(raw_tx, block_id).await
+    }
 }
diff --git a/crates/e2e-test-utils/src/traits.rs b/crates/e2e-test-utils/src/traits.rs
index 6d9bf14db..eea2218b8 100644
--- a/crates/e2e-test-utils/src/traits.rs
+++ b/crates/e2e-test-utils/src/traits.rs
@@ -1,6 +1,8 @@
 use alloy_rpc_types_engine::{
     ExecutionPayloadEnvelopeV3, ExecutionPayloadEnvelopeV4, ExecutionPayloadV3,
 };
+
+#[cfg(feature = "optimism")]
 use op_alloy_rpc_types_engine::{OpExecutionPayloadEnvelopeV3, OpExecutionPayloadEnvelopeV4};
 
 /// The execution payload envelope type.
@@ -9,12 +11,14 @@ pub trait PayloadEnvelopeExt: Send + Sync + std::fmt::Debug {
     fn execution_payload(&self) -> ExecutionPayloadV3;
 }
 
+#[cfg(feature = "optimism")]
 impl PayloadEnvelopeExt for OpExecutionPayloadEnvelopeV3 {
     fn execution_payload(&self) -> ExecutionPayloadV3 {
         self.execution_payload.clone()
     }
 }
 
+#[cfg(feature = "optimism")]
 impl PayloadEnvelopeExt for OpExecutionPayloadEnvelopeV4 {
     fn execution_payload(&self) -> ExecutionPayloadV3 {
         self.execution_payload.clone()
diff --git a/crates/enclave/Cargo.toml b/crates/enclave/Cargo.toml
new file mode 100644
index 000000000..1f11bcb62
--- /dev/null
+++ b/crates/enclave/Cargo.toml
@@ -0,0 +1,40 @@
+[package]
+name = "reth-enclave"
+version.workspace = true
+edition.workspace = true
+rust-version.workspace = true
+license.workspace = true
+homepage.workspace = true
+repository.workspace = true
+description = "Additional utilities for working with enclave in reth."
+
+[lints]
+workspace = true
+
+[dependencies]
+alloy-rlp = { workspace = true, features = ["arrayvec"] }
+seismic-enclave.workspace = true
+
+anyhow = "1.0"
+derive_more.workspace = true
+once_cell.workspace = true
+serde_json = {workspace = true}
+serde = { workspace = true, features = ["derive"]}
+tracing.workspace = true
+
+hyper = { version = "0.14", features = ["full"] }
+routerify = "3.0.0"
+reqwest.workspace = true
+tokio = { workspace = true, features = ["full"] }
+warp = "0.3"
+
+aes-gcm = "0.10"
+hkdf = "0.12"
+secp256k1 = {workspace = true, features = ["rand", "recovery", "std", "serde"]}
+sha2 = "0.10"
+futures = "0.3.12"
+eyre.workspace = true
+
+
+[dev-dependencies]
+tokio = { workspace = true, features = ["full", "macros"] }
diff --git a/crates/enclave/src/lib.rs b/crates/enclave/src/lib.rs
new file mode 100644
index 000000000..80021590e
--- /dev/null
+++ b/crates/enclave/src/lib.rs
@@ -0,0 +1,79 @@
+//! This crate provides functionalities related to the Enclave service.
+//! It includes modules and API for interacting with wallet operations and HTTP clients.
+
+use std::net::{IpAddr, TcpListener};
+
+use derive_more::Display;
+pub use seismic_enclave::{
+    client::{
+        rpc::{BuildableServer, SyncEnclaveApiClient},
+        EnclaveClient, MockEnclaveServer, ENCLAVE_DEFAULT_ENDPOINT_ADDR,
+        ENCLAVE_DEFAULT_ENDPOINT_PORT,
+    },
+    SchnorrkelKeypair,
+};
+use tracing::error;
+
+/// Custom error type for reth error handling.
+#[derive(Clone, Debug, Eq, PartialEq, Display)]
+pub enum EnclaveError {
+    /// enclave encryption fails
+    EncryptionError,
+    /// enclave decryption fails
+    DecryptionError,
+    /// Ephemereal keypair generation fails
+    EphRngKeypairGenerationError(String),
+    /// Custom error.
+    Custom(&'static str),
+}
+
+/// Get the test enclave endpoint
+fn get_random_port() -> u16 {
+    TcpListener::bind("127.0.0.1:0") // 0 means OS assigns a free port
+        .expect("Failed to bind to a port")
+        .local_addr()
+        .unwrap()
+        .port()
+}
+
+/// Start the mock enclave server
+pub async fn start_mock_enclave_server_random_port() -> EnclaveClient {
+    let port = get_random_port();
+    tokio::spawn(async move {
+        start_blocking_mock_enclave_server(ENCLAVE_DEFAULT_ENDPOINT_ADDR, port).await;
+    });
+    EnclaveClient::builder().addr(ENCLAVE_DEFAULT_ENDPOINT_ADDR.to_string()).port(port).build()
+}
+
+/// Start the mock enclave server
+pub async fn start_default_mock_enclave_server() -> EnclaveClient {
+    let client = EnclaveClient::builder()
+        .addr(ENCLAVE_DEFAULT_ENDPOINT_ADDR.to_string())
+        .port(ENCLAVE_DEFAULT_ENDPOINT_PORT)
+        .build();
+    tokio::spawn(async move {
+        start_blocking_mock_enclave_server(
+            ENCLAVE_DEFAULT_ENDPOINT_ADDR,
+            ENCLAVE_DEFAULT_ENDPOINT_PORT,
+        )
+        .await;
+    });
+    client
+}
+
+/// Start the mock enclave server
+pub async fn start_blocking_mock_enclave_server(addr: IpAddr, port: u16) {
+    let enclave_server = MockEnclaveServer::new((addr, port));
+
+    let addr = enclave_server.addr();
+
+    match enclave_server.start().await {
+        Ok(handle) => {
+            handle.stopped().await;
+        }
+        Err(err) => {
+            let err = eyre::eyre!("Failed to start mock enclave server at {}: {}", addr, err);
+            error!("{:?}", err);
+        }
+    }
+}
diff --git a/crates/engine/invalid-block-hooks/src/witness.rs b/crates/engine/invalid-block-hooks/src/witness.rs
index 632428d6b..228ef032b 100644
--- a/crates/engine/invalid-block-hooks/src/witness.rs
+++ b/crates/engine/invalid-block-hooks/src/witness.rs
@@ -94,11 +94,13 @@ where
         // Re-execute all of the transactions in the block to load all touched accounts into
         // the cache DB.
         for tx in block.transactions() {
-            self.evm_config.fill_tx_env(
-                evm.tx_mut(),
-                tx,
-                tx.recover_signer().ok_or_eyre("failed to recover sender")?,
-            );
+            self.evm_config
+                .fill_tx_env(
+                    evm.tx_mut(),
+                    tx,
+                    tx.recover_signer().ok_or_eyre("failed to recover sender")?,
+                )
+                .map_err(|err| eyre::eyre!("failed to fill tx env: {:?}", err))?;
             let result = evm.transact()?;
             evm.db_mut().commit(result.state);
         }
diff --git a/crates/engine/local/Cargo.toml b/crates/engine/local/Cargo.toml
index b3ad169e3..079c82f2b 100644
--- a/crates/engine/local/Cargo.toml
+++ b/crates/engine/local/Cargo.toml
@@ -17,6 +17,7 @@ reth-engine-primitives.workspace = true
 reth-engine-service.workspace = true
 reth-engine-tree.workspace = true
 reth-node-types.workspace = true
+reth-node-core.workspace = true
 reth-evm.workspace = true
 reth-ethereum-engine-primitives.workspace = true
 reth-payload-builder.workspace = true
diff --git a/crates/engine/local/src/lib.rs b/crates/engine/local/src/lib.rs
index 26c84d50c..33837ea09 100644
--- a/crates/engine/local/src/lib.rs
+++ b/crates/engine/local/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/engine/local/src/service.rs b/crates/engine/local/src/service.rs
index 3c7bc72ba..94955db06 100644
--- a/crates/engine/local/src/service.rs
+++ b/crates/engine/local/src/service.rs
@@ -22,6 +22,7 @@ use reth_consensus::FullConsensus;
 use reth_engine_primitives::{BeaconEngineMessage, EngineValidator};
 use reth_engine_service::service::EngineMessageStream;
 use reth_engine_tree::{
+    backup::BackupHandle,
     chain::{ChainEvent, HandlerEvent},
     engine::{
         EngineApiKind, EngineApiRequest, EngineApiRequestHandler, EngineRequestHandler, FromEngine,
@@ -31,6 +32,7 @@ use reth_engine_tree::{
     tree::{EngineApiTreeHandler, InvalidBlockHook, TreeConfig},
 };
 use reth_evm::execute::BlockExecutorProvider;
+use reth_node_core::dirs::{ChainPath, DataDirPath};
 use reth_node_types::BlockTy;
 use reth_payload_builder::PayloadBuilderHandle;
 use reth_payload_primitives::{PayloadAttributesBuilder, PayloadTypes};
@@ -78,6 +80,7 @@ where
         from_engine: EngineMessageStream<N::Engine>,
         mode: MiningMode,
         payload_attributes_builder: B,
+        data_dir: ChainPath<DataDirPath>,
     ) -> Self
     where
         B: PayloadAttributesBuilder<<N::Engine as PayloadTypes>::PayloadAttributes>,
@@ -90,6 +93,7 @@ where
         let persistence_handle =
             PersistenceHandle::<N::Primitives>::spawn_service(provider, pruner, sync_metrics_tx);
         let canonical_in_memory_state = blockchain_db.canonical_in_memory_state();
+        let backup_handle = BackupHandle::spawn_service(data_dir);
 
         let (to_tree_tx, from_tree) = EngineApiTreeHandler::<N::Primitives, _, _, _, _>::spawn_new(
             blockchain_db.clone(),
@@ -102,6 +106,7 @@ where
             tree_config,
             invalid_block_hook,
             engine_kind,
+            backup_handle,
         );
 
         let handler = EngineApiRequestHandler::new(to_tree_tx, from_tree);
diff --git a/crates/engine/primitives/src/lib.rs b/crates/engine/primitives/src/lib.rs
index 2bd642cfa..462991eff 100644
--- a/crates/engine/primitives/src/lib.rs
+++ b/crates/engine/primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/engine/service/Cargo.toml b/crates/engine/service/Cargo.toml
index 326bc06b5..6d4b252df 100644
--- a/crates/engine/service/Cargo.toml
+++ b/crates/engine/service/Cargo.toml
@@ -24,6 +24,7 @@ reth-prune.workspace = true
 reth-stages-api.workspace = true
 reth-tasks.workspace = true
 reth-node-types.workspace = true
+reth-node-core.workspace = true
 reth-chainspec.workspace = true
 reth-engine-primitives.workspace = true
 
diff --git a/crates/engine/service/src/lib.rs b/crates/engine/service/src/lib.rs
index a707ae9ff..73e7ed474 100644
--- a/crates/engine/service/src/lib.rs
+++ b/crates/engine/service/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/engine/service/src/service.rs b/crates/engine/service/src/service.rs
index aeaf364a8..b21fa28c0 100644
--- a/crates/engine/service/src/service.rs
+++ b/crates/engine/service/src/service.rs
@@ -6,6 +6,7 @@ use reth_consensus::FullConsensus;
 use reth_engine_primitives::{BeaconEngineMessage, EngineValidator};
 use reth_engine_tree::{
     backfill::PipelineSync,
+    backup::BackupHandle,
     download::BasicBlockDownloader,
     engine::{EngineApiKind, EngineApiRequest, EngineApiRequestHandler, EngineHandler},
     persistence::PersistenceHandle,
@@ -17,6 +18,7 @@ pub use reth_engine_tree::{
 };
 use reth_evm::execute::BlockExecutorProvider;
 use reth_network_p2p::BlockClient;
+use reth_node_core::dirs::{ChainPath, DataDirPath};
 use reth_node_types::{BlockTy, BodyTy, HeaderTy, NodeTypes, NodeTypesWithEngine};
 use reth_payload_builder::PayloadBuilderHandle;
 use reth_primitives::EthPrimitives;
@@ -84,6 +86,7 @@ where
         tree_config: TreeConfig,
         invalid_block_hook: Box<dyn InvalidBlockHook<N::Primitives>>,
         sync_metrics_tx: MetricEventsSender,
+        data_dir: ChainPath<DataDirPath>,
     ) -> Self
     where
         V: EngineValidator<N::Engine, Block = BlockTy<N>>,
@@ -98,6 +101,8 @@ where
 
         let canonical_in_memory_state = blockchain_db.canonical_in_memory_state();
 
+        let backup_handle = BackupHandle::spawn_service(data_dir);
+
         let (to_tree_tx, from_tree) = EngineApiTreeHandler::<N::Primitives, _, _, _, _>::spawn_new(
             blockchain_db,
             executor_factory,
@@ -109,6 +114,7 @@ where
             tree_config,
             invalid_block_hook,
             engine_kind,
+            backup_handle,
         );
 
         let engine_handler = EngineApiRequestHandler::new(to_tree_tx, from_tree);
@@ -158,6 +164,7 @@ mod tests {
     use reth_evm_ethereum::execute::EthExecutorProvider;
     use reth_exex_types::FinishedExExHeight;
     use reth_network_p2p::test_utils::TestFullBlockClient;
+    use reth_node_core::dirs::MaybePlatformPath;
     use reth_primitives::SealedHeader;
     use reth_provider::{
         providers::BlockchainProvider2, test_utils::create_test_provider_factory_with_chain_spec,
@@ -201,7 +208,7 @@ mod tests {
         let _eth_service = EngineService::new(
             consensus,
             executor_factory,
-            chain_spec,
+            chain_spec.clone(),
             client,
             Box::pin(incoming_requests),
             pipeline,
@@ -214,6 +221,7 @@ mod tests {
             TreeConfig::default(),
             Box::new(NoopInvalidBlockHook::default()),
             sync_metrics_tx,
+            MaybePlatformPath::chain_default(chain_spec.chain.clone()),
         );
     }
 }
diff --git a/crates/engine/tree/Cargo.toml b/crates/engine/tree/Cargo.toml
index 73f0a5268..bcaf3e346 100644
--- a/crates/engine/tree/Cargo.toml
+++ b/crates/engine/tree/Cargo.toml
@@ -37,6 +37,7 @@ reth-trie-db.workspace = true
 reth-trie-parallel.workspace = true
 reth-trie-sparse.workspace = true
 reth-trie.workspace = true
+reth-node-core.workspace = true
 
 # alloy
 alloy-consensus.workspace = true
diff --git a/crates/engine/tree/benches/channel_perf.rs b/crates/engine/tree/benches/channel_perf.rs
index c1c65e0a6..682dfa3f9 100644
--- a/crates/engine/tree/benches/channel_perf.rs
+++ b/crates/engine/tree/benches/channel_perf.rs
@@ -4,8 +4,8 @@
 
 use criterion::{criterion_group, criterion_main, BatchSize, BenchmarkId, Criterion};
 use revm_primitives::{
-    Account, AccountInfo, AccountStatus, Address, EvmState, EvmStorage, EvmStorageSlot, HashMap,
-    B256, U256,
+    Account, AccountInfo, AccountStatus, Address, EvmState, EvmStorage, EvmStorageSlot,
+    FlaggedStorage, HashMap, B256, U256,
 };
 use std::thread;
 
@@ -14,8 +14,10 @@ fn create_bench_state(num_accounts: usize) -> EvmState {
     let mut state_changes = HashMap::default();
 
     for i in 0..num_accounts {
-        let storage =
-            EvmStorage::from_iter([(U256::from(i), EvmStorageSlot::new(U256::from(i + 1)))]);
+        let storage = EvmStorage::from_iter([(
+            U256::from(i),
+            EvmStorageSlot::new(FlaggedStorage::new_from_value(i + 1)),
+        )]);
 
         let account = Account {
             info: AccountInfo {
diff --git a/crates/engine/tree/benches/state_root_task.rs b/crates/engine/tree/benches/state_root_task.rs
index 9055190fb..02d835872 100644
--- a/crates/engine/tree/benches/state_root_task.rs
+++ b/crates/engine/tree/benches/state_root_task.rs
@@ -19,8 +19,8 @@ use reth_trie::{
 };
 use reth_trie_db::{DatabaseHashedCursorFactory, DatabaseTrieCursorFactory};
 use revm_primitives::{
-    Account as RevmAccount, AccountInfo, AccountStatus, Address, EvmState, EvmStorageSlot, HashMap,
-    B256, KECCAK_EMPTY, U256,
+    Account as RevmAccount, AccountInfo, AccountStatus, Address, EvmState, EvmStorageSlot,
+    FlaggedStorage, HashMap, B256, KECCAK_EMPTY, U256,
 };
 use std::sync::Arc;
 
@@ -48,7 +48,10 @@ fn create_bench_state_updates(params: &BenchParams) -> Vec<EvmState> {
                 let slot = U256::from(rng.gen::<u64>());
                 storage.insert(
                     slot,
-                    EvmStorageSlot::new_changed(U256::ZERO, U256::from(rng.gen::<u64>())),
+                    EvmStorageSlot::new_changed(
+                        FlaggedStorage::ZERO,
+                        FlaggedStorage::new_from_value(rng.gen::<u64>()),
+                    ),
                 );
             }
 
@@ -99,7 +102,8 @@ fn setup_provider(
         let storage_updates = update.iter().map(|(address, account)| {
             let storage_entries = account.storage.iter().map(|(slot, value)| StorageEntry {
                 key: B256::from(*slot),
-                value: value.present_value,
+                value: value.present_value.value,
+                is_private: value.present_value.is_private,
             });
             (*address, storage_entries)
         });
diff --git a/crates/engine/tree/src/backup.rs b/crates/engine/tree/src/backup.rs
new file mode 100644
index 000000000..d6ace24a7
--- /dev/null
+++ b/crates/engine/tree/src/backup.rs
@@ -0,0 +1,253 @@
+//! reth's database backup functionality
+use alloy_eips::BlockNumHash;
+use reth_errors::ProviderError;
+use reth_node_core::dirs::{ChainPath, DataDirPath};
+use reth_tracing::tracing::*;
+use std::{
+    path::PathBuf,
+    sync::mpsc::{Receiver, Sender},
+    time::Instant,
+};
+use thiserror::Error;
+use tokio::sync::oneshot;
+
+/// Configuration for the backup service
+#[derive(Debug, Clone)]
+pub struct BackupConfig {
+    /// Source directory to backup
+    pub source_dir: PathBuf,
+    /// Destination directory for backups
+    pub dest_dir: PathBuf,
+}
+
+/// Service that handles database backups based on block events
+#[derive(Debug)]
+pub struct BackupService {
+    /// Incoming backup requests
+    incoming: Receiver<BackupAction>,
+    /// The data directory for the engine tree.
+    data_dir: ChainPath<DataDirPath>,
+}
+/// A signal to the backup service that a backup should be performed.
+#[derive(Debug)]
+pub enum BackupAction {
+    /// Perform a backup at the given block number.
+    BackupAtBlock(BlockNumHash, oneshot::Sender<Option<BlockNumHash>>),
+}
+impl BackupService {
+    /// Create a new backup service
+    pub fn new(incoming: Receiver<BackupAction>, data_dir: ChainPath<DataDirPath>) -> Self {
+        Self { incoming, data_dir }
+    }
+
+    /// Main loop that processes backup actions
+    pub fn run(self) -> Result<(), ProviderError> {
+        debug!(target: "engine::backup", service=?self, "Backup service starting to run");
+        while let Ok(action) = self.incoming.recv() {
+            debug!(target: "engine::backup", action=?action, "Backup service received action");
+            match action {
+                BackupAction::BackupAtBlock(block_number, sender) => {
+                    let result = self.perform_backup(block_number);
+                    if let Err(e) = result {
+                        error!(target: "engine::backup", ?e, "Backup failed");
+                        let _ = sender.send(None);
+                    } else {
+                        let _ = sender.send(Some(block_number));
+                    }
+                }
+            }
+        }
+        Ok(())
+    }
+
+    /// Perform the actual backup operation
+    fn perform_backup(&self, block_number: BlockNumHash) -> Result<(), ProviderError> {
+        debug!(target: "engine::backup", ?block_number, "Starting backup");
+        let backup_path = PathBuf::from(format!("{}_backup", self.data_dir.data_dir().display(),));
+
+        // Perform the actual backup using the provider
+        BackupService::backup_dir(&PathBuf::from(self.data_dir.data_dir()), &backup_path)?;
+
+        info!(
+            target: "engine::backup",
+            ?block_number,
+            "Backup completed successfully"
+        );
+
+        Ok(())
+    }
+
+    /// Recursively copies the source directory to the destination directory.
+    ///
+    /// This function uses asynchronous file operations to perform the backup.
+    ///
+    /// # Arguments
+    ///
+    /// * `source` - The source directory to backup.
+    /// * `destination` - The destination directory where the backup will be stored.
+    ///
+    /// # Returns
+    ///
+    /// * `Ok(())` if the backup is successful.
+    /// * `Err(anyhow::Error)` if an error occurs during the backup.
+    pub fn backup_dir(source: &PathBuf, destination: &PathBuf) -> Result<(), ProviderError> {
+        debug!(target: "engine::backup", ?source, ?destination);
+
+        let source_path = source.as_path();
+        let destination_path = destination.as_path();
+
+        // Retrieve the metadata of the source path
+        let metadata = std::fs::metadata(source_path).map_err(|e| {
+            ProviderError::FsPathError(format!(
+                "Failed to access source path: {} : {}",
+                source_path.display(),
+                e,
+            ))
+        })?;
+
+        // If the source is a directory, create the destination directory if it does not exist
+        if metadata.is_dir() {
+            if !destination_path.exists() {
+                std::fs::create_dir_all(destination_path).map_err(|e| {
+                    ProviderError::FsPathError(format!(
+                        "Failed to create destination directory: {}",
+                        e
+                    ))
+                })?;
+            }
+
+            // Stack to manage recursive copying
+            let mut entries_stack =
+                vec![(source_path.to_path_buf(), destination_path.to_path_buf())];
+
+            while let Some((current_src, current_dst)) = entries_stack.pop() {
+                let mut entries = std::fs::read_dir(&current_src).map_err(|e| {
+                    ProviderError::FsPathError(format!(
+                        "Failed to read directory {}: {}",
+                        current_src.display(),
+                        e
+                    ))
+                })?;
+
+                while let Some(entry) = entries.next().transpose().map_err(|e| {
+                    ProviderError::FsPathError(format!("Failed to get diredctory entry: {}", e))
+                })? {
+                    let entry_path = entry.path();
+                    let entry_name = entry.file_name();
+                    let dst_path = current_dst.join(&entry_name);
+                    let entry_metadata = entry.metadata().map_err(|e| {
+                        ProviderError::FsPathError(format!("Failed to get diredctory entry: {}", e))
+                    })?;
+
+                    if entry_metadata.is_dir() {
+                        if !dst_path.exists() {
+                            std::fs::create_dir_all(&dst_path).map_err(|e| {
+                                ProviderError::FsPathError(format!(
+                                    "Failed to create directory {}: {}",
+                                    dst_path.display(),
+                                    e
+                                ))
+                            })?;
+                        }
+                        entries_stack.push((entry_path, dst_path));
+                    } else {
+                        std::fs::copy(&entry_path, &dst_path).map_err(|e| {
+                            ProviderError::FsPathError(format!(
+                                "Failed to copy file from {} to {}: {}",
+                                entry_path.display(),
+                                dst_path.display(),
+                                e
+                            ))
+                        })?;
+                    }
+                }
+            }
+        } else {
+            // If the source is a file, copy it directly, creating parent directories if necessary
+            if let Some(parent) = destination_path.parent() {
+                if !parent.exists() {
+                    std::fs::create_dir_all(parent).map_err(|e| {
+                        ProviderError::FsPathError(format!(
+                            "Failed to create parent directory {}: {}",
+                            parent.display(),
+                            e
+                        ))
+                    })?;
+                }
+            }
+            std::fs::copy(source_path, destination_path).map_err(|e| {
+                ProviderError::FsPathError(format!(
+                    "Failed to copy file from {} to {}: {}",
+                    source_path.display(),
+                    destination_path.display(),
+                    e
+                ))
+            })?;
+        }
+
+        Ok(())
+    }
+}
+
+/// Errors that can occur during backup operations
+#[derive(Debug, Error)]
+pub enum BackupError {
+    /// IO error
+    #[error(transparent)]
+    Io(#[from] std::io::Error),
+    /// Provider error
+    #[error(transparent)]
+    Provider(#[from] reth_provider::ProviderError),
+}
+
+/// Handle to interact with the backup service
+#[derive(Debug)]
+pub struct BackupHandle {
+    /// The sender for backup actions
+    pub sender: Sender<BackupAction>,
+    /// The receiver from backup service
+    pub rx: Option<(oneshot::Receiver<Option<BlockNumHash>>, Instant)>,
+    /// The latest backup block number
+    pub latest_backup_block: BlockNumHash,
+}
+
+impl BackupHandle {
+    /// Create a new backup handle
+    pub fn new(sender: Sender<BackupAction>) -> Self {
+        Self { sender, rx: None, latest_backup_block: BlockNumHash::default() }
+    }
+
+    /// Spawn a new backup service
+    pub fn spawn_service(data_dir: ChainPath<DataDirPath>) -> BackupHandle {
+        let (tx, rx) = std::sync::mpsc::channel();
+        let handle = BackupHandle::new(tx);
+
+        let service = BackupService::new(rx, data_dir);
+        std::thread::Builder::new()
+            .name("Backup Service".to_string())
+            .spawn(move || {
+                if let Err(err) = service.run() {
+                    error!(target: "engine::backup", ?err, "Backup service failed");
+                }
+            })
+            .unwrap();
+
+        handle
+    }
+
+    /// Checks if a backup is currently in progress.
+    pub fn in_progress(&self) -> bool {
+        self.rx.is_some()
+    }
+
+    /// Sets state for a started backup task.
+    pub(crate) fn start(&mut self, rx: oneshot::Receiver<Option<BlockNumHash>>) {
+        self.rx = Some((rx, Instant::now()));
+    }
+
+    /// Sets state for a finished backup task.
+    pub fn finish(&mut self, block_number: BlockNumHash) {
+        self.latest_backup_block = block_number;
+        self.rx = None;
+    }
+}
diff --git a/crates/engine/tree/src/lib.rs b/crates/engine/tree/src/lib.rs
index 100b71604..c65d98d67 100644
--- a/crates/engine/tree/src/lib.rs
+++ b/crates/engine/tree/src/lib.rs
@@ -87,7 +87,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
@@ -97,6 +97,8 @@ pub use reth_blockchain_tree_api::*;
 
 /// Support for backfill sync mode.
 pub mod backfill;
+/// The background backup service
+pub mod backup;
 /// The type that drives the chain forward.
 pub mod chain;
 /// Support for downloading blocks on demand for live sync.
diff --git a/crates/engine/tree/src/tree/config.rs b/crates/engine/tree/src/tree/config.rs
index d252b65a8..1f8b28c5c 100644
--- a/crates/engine/tree/src/tree/config.rs
+++ b/crates/engine/tree/src/tree/config.rs
@@ -3,6 +3,9 @@
 /// Triggers persistence when the number of canonical blocks in memory exceeds this threshold.
 pub const DEFAULT_PERSISTENCE_THRESHOLD: u64 = 2;
 
+/// Triggers backup when the number of canonical blocks persisted exceeds this threshold.
+pub const DEFAULT_BACKUP_THRESHOLD: u64 = 10;
+
 /// How close to the canonical head we persist blocks.
 pub const DEFAULT_MEMORY_BLOCK_BUFFER_TARGET: u64 = 2;
 
@@ -32,6 +35,8 @@ pub struct TreeConfig {
     /// This is used as a cutoff to prevent long-running sequential block execution when we receive
     /// a batch of downloaded blocks.
     max_execute_block_batch_size: usize,
+    /// Maximum number of blocks to be persisted without triggering a backup
+    backup_threshold: u64,
 }
 
 impl Default for TreeConfig {
@@ -42,6 +47,7 @@ impl Default for TreeConfig {
             block_buffer_limit: DEFAULT_BLOCK_BUFFER_LIMIT,
             max_invalid_header_cache_length: DEFAULT_MAX_INVALID_HEADER_CACHE_LENGTH,
             max_execute_block_batch_size: DEFAULT_MAX_EXECUTE_BLOCK_BATCH_SIZE,
+            backup_threshold: DEFAULT_BACKUP_THRESHOLD,
         }
     }
 }
@@ -54,6 +60,7 @@ impl TreeConfig {
         block_buffer_limit: u32,
         max_invalid_header_cache_length: u32,
         max_execute_block_batch_size: usize,
+        backup_threshold: u64,
     ) -> Self {
         Self {
             persistence_threshold,
@@ -61,6 +68,7 @@ impl TreeConfig {
             block_buffer_limit,
             max_invalid_header_cache_length,
             max_execute_block_batch_size,
+            backup_threshold,
         }
     }
 
@@ -89,6 +97,11 @@ impl TreeConfig {
         self.max_execute_block_batch_size
     }
 
+    /// Return the backup threshold.
+    pub const fn backup_threshold(&self) -> u64 {
+        self.backup_threshold
+    }
+
     /// Setter for persistence threshold.
     pub const fn with_persistence_threshold(mut self, persistence_threshold: u64) -> Self {
         self.persistence_threshold = persistence_threshold;
@@ -127,4 +140,10 @@ impl TreeConfig {
         self.max_execute_block_batch_size = max_execute_block_batch_size;
         self
     }
+
+    /// Setter for backup threshold.
+    pub const fn with_backup_threshold(mut self, backup_threshold: u64) -> Self {
+        self.backup_threshold = backup_threshold;
+        self
+    }
 }
diff --git a/crates/engine/tree/src/tree/mod.rs b/crates/engine/tree/src/tree/mod.rs
index 234a96a47..2303f5074 100644
--- a/crates/engine/tree/src/tree/mod.rs
+++ b/crates/engine/tree/src/tree/mod.rs
@@ -1,5 +1,6 @@
 use crate::{
     backfill::{BackfillAction, BackfillSyncState},
+    backup::{BackupAction, BackupHandle},
     chain::FromOrchestrator,
     engine::{DownloadRequest, EngineApiEvent, EngineApiKind, EngineApiRequest, FromEngine},
     persistence::PersistenceHandle,
@@ -511,6 +512,8 @@ where
     invalid_block_hook: Box<dyn InvalidBlockHook<N>>,
     /// The engine API variant of this handler
     engine_kind: EngineApiKind,
+    /// The backup handler
+    backup: BackupHandle,
 }
 
 impl<N, P: Debug, E: Debug, T: EngineTypes + Debug, V: Debug> std::fmt::Debug
@@ -571,6 +574,7 @@ where
         payload_builder: PayloadBuilderHandle<T>,
         config: TreeConfig,
         engine_kind: EngineApiKind,
+        backup: BackupHandle,
     ) -> Self {
         let (incoming_tx, incoming) = std::sync::mpsc::channel();
 
@@ -592,6 +596,7 @@ where
             incoming_tx,
             invalid_block_hook: Box::new(NoopInvalidBlockHook),
             engine_kind,
+            backup,
         }
     }
 
@@ -617,6 +622,7 @@ where
         config: TreeConfig,
         invalid_block_hook: Box<dyn InvalidBlockHook<N>>,
         kind: EngineApiKind,
+        backup: BackupHandle,
     ) -> (Sender<FromEngine<EngineApiRequest<T, N>, N::Block>>, UnboundedReceiver<EngineApiEvent<N>>)
     {
         let best_block_number = provider.best_block_number().unwrap_or(0);
@@ -648,6 +654,7 @@ where
             payload_builder,
             config,
             kind,
+            backup,
         );
         task.set_invalid_block_hook(invalid_block_hook);
         let incoming = task.incoming_tx.clone();
@@ -686,6 +693,10 @@ where
                 error!(target: "engine::tree", %err, "Advancing persistence failed");
                 return
             }
+            if let Err(err) = self.advance_backup() {
+                error!(target: "engine::tree", %err, "Advancing backup failed");
+                return
+            }
         }
     }
 
@@ -1130,7 +1141,7 @@ where
     fn try_recv_engine_message(
         &self,
     ) -> Result<Option<FromEngine<EngineApiRequest<T, N>, N::Block>>, RecvError> {
-        if self.persistence_state.in_progress() {
+        if self.persistence_state.in_progress() || self.backup.in_progress() {
             // try to receive the next request with a timeout to not block indefinitely
             match self.incoming.recv_timeout(std::time::Duration::from_millis(500)) {
                 Ok(msg) => Ok(Some(msg)),
@@ -1204,6 +1215,52 @@ where
         Ok(())
     }
 
+    fn advance_backup(&mut self) -> Result<(), AdvancePersistenceError> {
+        debug!(target: "engine::tree", "advance_backup called");
+        if !self.backup.in_progress() {
+            debug!(target: "engine::tree", "checking if we should backup");
+            if self.should_backup() {
+                debug!(target: "engine::tree", "sending backup action");
+                let (tx, rx) = oneshot::channel();
+                let _ = self.backup.sender.send(BackupAction::BackupAtBlock(
+                    self.persistence_state.last_persisted_block,
+                    tx,
+                ));
+                self.backup.start(rx);
+            }
+        }
+
+        if self.backup.in_progress() {
+            let (mut rx, start_time) = self
+                .backup
+                .rx
+                .take()
+                .expect("if a backup task is in progress Receiver must be Some");
+            // Check if persistence has complete
+            match rx.try_recv() {
+                Ok(last_backup_hash_num) => {
+                    let Some(BlockNumHash {
+                        hash: last_backup_block_hash,
+                        number: last_backup_block_number,
+                    }) = last_backup_hash_num
+                    else {
+                        warn!(target: "engine::tree", "Backup task completed but did not backup any blocks");
+                        return Ok(())
+                    };
+
+                    debug!(target: "engine::tree", ?last_backup_hash_num, "Finished backup, calling finish");
+                    self.backup.finish(BlockNumHash::new(
+                        last_backup_block_number,
+                        last_backup_block_hash,
+                    ));
+                }
+                Err(TryRecvError::Closed) => return Err(TryRecvError::Closed.into()),
+                Err(TryRecvError::Empty) => self.backup.rx = Some((rx, start_time)),
+            }
+        }
+        Ok(())
+    }
+
     /// Handles a message from the engine.
     fn on_engine_message(
         &mut self,
@@ -1489,6 +1546,25 @@ where
             self.config.persistence_threshold()
     }
 
+    /// Returns true if the canonical chain length minus the last persisted
+    /// block is greater than or equal to the backup threshold and
+    /// backfill is not running.
+    fn should_backup(&self) -> bool {
+        debug!(target: "engine::tree", "checking if we should backup");
+        if !self.backfill_sync_state.is_idle() {
+            // can't backup if backfill is running
+            return false
+        }
+
+        let min_block = self.backup.latest_backup_block.number;
+        let last_persisted_block = self.persistence_state.last_persisted_block.number;
+        let diff = last_persisted_block.saturating_sub(min_block);
+        debug!(target: "engine::tree", min_block=?min_block, last_persisted_block=?last_persisted_block, diff=?diff, threshold=?self.config.backup_threshold(), "min block");
+
+        self.persistence_state.last_persisted_block.number.saturating_sub(min_block) >=
+            self.config.backup_threshold()
+    }
+
     /// Returns a batch of consecutive canonical blocks to persist in the range
     /// `(last_persisted_number .. canonical_head - threshold]` . The expected
     /// order is oldest -> newest.
@@ -2645,6 +2721,7 @@ mod tests {
     use reth_engine_primitives::ForkchoiceStatus;
     use reth_ethereum_engine_primitives::{EthEngineTypes, EthereumEngineValidator};
     use reth_evm::test_utils::MockExecutorProvider;
+    use reth_node_core::dirs::MaybePlatformPath;
     use reth_primitives::{Block, BlockExt, EthPrimitives};
     use reth_provider::test_utils::MockEthProvider;
     use reth_rpc_types_compat::engine::{block_to_payload_v1, payload::block_to_payload_v3};
@@ -2745,6 +2822,10 @@ mod tests {
         ) -> Self {
             let persistence_handle = PersistenceHandle::new(action_tx);
 
+            let backup_handle = BackupHandle::spawn_service(MaybePlatformPath::chain_default(
+                chain_spec.chain.clone(),
+            ));
+
             let consensus = Arc::new(EthBeaconConsensus::new(chain_spec.clone()));
 
             let provider = MockEthProvider::default();
@@ -2775,6 +2856,7 @@ mod tests {
                 payload_builder,
                 TreeConfig::default(),
                 EngineApiKind::Ethereum,
+                backup_handle,
             );
 
             let block_builder = TestBlockBuilder::default().with_chain_spec((*chain_spec).clone());
diff --git a/crates/engine/tree/src/tree/root.rs b/crates/engine/tree/src/tree/root.rs
index 723d70ac5..7deb3cbd8 100644
--- a/crates/engine/tree/src/tree/root.rs
+++ b/crates/engine/tree/src/tree/root.rs
@@ -1,6 +1,6 @@
 //! State root task related functionality.
 
-use alloy_primitives::map::{HashMap, HashSet};
+use alloy_primitives::map::HashSet;
 use rayon::iter::{ParallelBridge, ParallelIterator};
 use reth_evm::system_calls::OnStateHook;
 use reth_execution_errors::StateProofError;
@@ -75,14 +75,7 @@ pub enum StateRootMessage<BPF: BlindedProviderFactory> {
     /// New state update from transaction execution
     StateUpdate(EvmState),
     /// Proof calculation completed for a specific state update
-    ProofCalculated {
-        /// The calculated proof
-        proof: MultiProof,
-        /// The state update that was used to calculate the proof
-        state_update: HashedPostState,
-        /// The index of this proof in the sequence of state updates
-        sequence_number: u64,
-    },
+    ProofCalculated(Box<ProofCalculated>),
     /// Error during proof calculation
     ProofCalculationError(StateProofError),
     /// State root calculation completed
@@ -98,6 +91,19 @@ pub enum StateRootMessage<BPF: BlindedProviderFactory> {
     FinishedStateUpdates,
 }
 
+/// Message about completion of proof calculation for a specific state update
+#[derive(Debug)]
+pub struct ProofCalculated {
+    /// The state update that was used to calculate the proof
+    state_update: HashedPostState,
+    /// The proof targets
+    targets: MultiProofTargets,
+    /// The calculated proof
+    proof: MultiProof,
+    /// The index of this proof in the sequence of state updates
+    sequence_number: u64,
+}
+
 /// Handle to track proof calculation ordering
 #[derive(Debug, Default)]
 pub(crate) struct ProofSequencer {
@@ -106,7 +112,7 @@ pub(crate) struct ProofSequencer {
     /// The next sequence number expected to be delivered.
     next_to_deliver: u64,
     /// Buffer for out-of-order proofs and corresponding state updates
-    pending_proofs: BTreeMap<u64, (MultiProof, HashedPostState)>,
+    pending_proofs: BTreeMap<u64, (HashedPostState, MultiProofTargets, MultiProof)>,
 }
 
 impl ProofSequencer {
@@ -127,11 +133,12 @@ impl ProofSequencer {
     pub(crate) fn add_proof(
         &mut self,
         sequence: u64,
-        proof: MultiProof,
         state_update: HashedPostState,
-    ) -> Vec<(MultiProof, HashedPostState)> {
+        targets: MultiProofTargets,
+        proof: MultiProof,
+    ) -> Vec<(HashedPostState, MultiProofTargets, MultiProof)> {
         if sequence >= self.next_to_deliver {
-            self.pending_proofs.insert(sequence, (proof, state_update));
+            self.pending_proofs.insert(sequence, (state_update, targets, proof));
         }
 
         // return early if we don't have the next expected proof
@@ -143,8 +150,8 @@ impl ProofSequencer {
         let mut current_sequence = self.next_to_deliver;
 
         // keep collecting proofs and state updates as long as we have consecutive sequence numbers
-        while let Some((proof, state_update)) = self.pending_proofs.remove(&current_sequence) {
-            consecutive_proofs.push((proof, state_update));
+        while let Some(pending) = self.pending_proofs.remove(&current_sequence) {
+            consecutive_proofs.push(pending);
             current_sequence += 1;
 
             // if we don't have the next number, stop collecting
@@ -319,9 +326,7 @@ where
         let hashed_state_update = evm_state_to_hashed_post_state(update);
 
         let proof_targets = get_proof_targets(&hashed_state_update, fetched_proof_targets);
-        for (address, slots) in &proof_targets {
-            fetched_proof_targets.entry(*address).or_default().extend(slots)
-        }
+        fetched_proof_targets.extend_ref(&proof_targets);
 
         // Dispatch proof gathering for this state update
         scope.spawn(move |_| {
@@ -338,15 +343,18 @@ where
                 provider.tx_ref(),
                 // TODO(alexey): this clone can be expensive, we should avoid it
                 input.as_ref().clone(),
-                proof_targets,
+                proof_targets.clone(),
             );
             match result {
                 Ok(proof) => {
-                    let _ = state_root_message_sender.send(StateRootMessage::ProofCalculated {
-                        proof,
-                        state_update: hashed_state_update,
-                        sequence_number: proof_sequence_number,
-                    });
+                    let _ = state_root_message_sender.send(StateRootMessage::ProofCalculated(
+                        Box::new(ProofCalculated {
+                            state_update: hashed_state_update,
+                            targets: proof_targets,
+                            proof,
+                            sequence_number: proof_sequence_number,
+                        }),
+                    ));
                 }
                 Err(e) => {
                     let _ =
@@ -360,18 +368,21 @@ where
     fn on_proof(
         &mut self,
         sequence_number: u64,
-        proof: MultiProof,
         state_update: HashedPostState,
-    ) -> Option<(MultiProof, HashedPostState)> {
-        let ready_proofs = self.proof_sequencer.add_proof(sequence_number, proof, state_update);
+        targets: MultiProofTargets,
+        proof: MultiProof,
+    ) -> Option<(HashedPostState, MultiProofTargets, MultiProof)> {
+        let ready_proofs =
+            self.proof_sequencer.add_proof(sequence_number, state_update, targets, proof);
 
         if ready_proofs.is_empty() {
             None
         } else {
             // Merge all ready proofs and state updates
-            ready_proofs.into_iter().reduce(|mut acc, (proof, state_update)| {
-                acc.0.extend(proof);
-                acc.1.extend(state_update);
+            ready_proofs.into_iter().reduce(|mut acc, (state_update, targets, proof)| {
+                acc.0.extend(state_update);
+                acc.1.extend(targets);
+                acc.2.extend(proof);
                 acc
             })
         }
@@ -382,6 +393,7 @@ where
         &mut self,
         scope: &rayon::Scope<'env>,
         state: HashedPostState,
+        targets: MultiProofTargets,
         multiproof: MultiProof,
     ) {
         let Some(trie) = self.sparse_trie.take() else { return };
@@ -394,7 +406,7 @@ where
         );
 
         // TODO(alexey): store proof targets in `ProofSequecner` to avoid recomputing them
-        let targets = get_proof_targets(&state, &HashMap::default());
+        let targets = get_proof_targets(&state, &targets);
 
         let tx = self.tx.clone();
         scope.spawn(move |_| {
@@ -417,6 +429,7 @@ where
 
     fn run(mut self, scope: &rayon::Scope<'env>) -> StateRootResult {
         let mut current_state_update = HashedPostState::default();
+        let mut current_proof_targets = MultiProofTargets::default();
         let mut current_multiproof = MultiProof::default();
         let mut updates_received = 0;
         let mut proofs_processed = 0;
@@ -447,27 +460,36 @@ where
                     StateRootMessage::FinishedStateUpdates => {
                         updates_finished = true;
                     }
-                    StateRootMessage::ProofCalculated { proof, state_update, sequence_number } => {
+                    StateRootMessage::ProofCalculated(proof_calculated) => {
                         proofs_processed += 1;
                         trace!(
                             target: "engine::root",
-                            sequence = sequence_number,
+                            sequence = proof_calculated.sequence_number,
                             total_proofs = proofs_processed,
                             "Processing calculated proof"
                         );
 
-                        trace!(target: "engine::root", ?proof, "Proof calculated");
-
-                        if let Some((combined_proof, combined_state_update)) =
-                            self.on_proof(sequence_number, proof, state_update)
-                        {
+                        trace!(target: "engine::root", proof = ?proof_calculated.proof, "Proof calculated");
+
+                        if let Some((
+                            combined_state_update,
+                            combined_proof_targets,
+                            combined_proof,
+                        )) = self.on_proof(
+                            proof_calculated.sequence_number,
+                            proof_calculated.state_update,
+                            proof_calculated.targets,
+                            proof_calculated.proof,
+                        ) {
                             if self.sparse_trie.is_none() {
-                                current_multiproof.extend(combined_proof);
                                 current_state_update.extend(combined_state_update);
+                                current_proof_targets.extend(combined_proof_targets);
+                                current_multiproof.extend(combined_proof);
                             } else {
                                 self.spawn_root_calculation(
                                     scope,
                                     combined_state_update,
+                                    combined_proof_targets,
                                     combined_proof,
                                 );
                             }
@@ -509,6 +531,7 @@ where
                             self.spawn_root_calculation(
                                 scope,
                                 std::mem::take(&mut current_state_update),
+                                std::mem::take(&mut current_proof_targets),
                                 std::mem::take(&mut current_multiproof),
                             );
                         } else if all_proofs_received && no_pending && updates_finished {
@@ -564,7 +587,7 @@ fn get_proof_targets(
     state_update: &HashedPostState,
     fetched_proof_targets: &MultiProofTargets,
 ) -> MultiProofTargets {
-    let mut targets = HashMap::default();
+    let mut targets = MultiProofTargets::default();
 
     // first collect all new accounts (not previously fetched)
     for &hashed_address in state_update.accounts.keys() {
@@ -631,7 +654,7 @@ fn update_sparse_trie<
                 } else {
                     trace!(target: "engine::root::sparse", ?address, ?slot, "Updating storage slot");
                     storage_trie
-                        .update_leaf(slot_nibbles, alloy_rlp::encode_fixed_size(&value).to_vec())?;
+                        .update_leaf(slot_nibbles, alloy_rlp::encode_fixed_size(&value.value).to_vec())?;
                 }
             }
 
@@ -675,7 +698,7 @@ mod tests {
     use reth_trie_db::{DatabaseHashedCursorFactory, DatabaseTrieCursorFactory};
     use revm_primitives::{
         Account as RevmAccount, AccountInfo, AccountStatus, Address, EvmState, EvmStorageSlot,
-        HashMap, B256, KECCAK_EMPTY, U256,
+        FlaggedStorage, HashMap, B256, KECCAK_EMPTY, U256,
     };
     use std::sync::Arc;
 
@@ -709,7 +732,10 @@ mod tests {
                         let slot = U256::from(rng.gen::<u64>());
                         storage.insert(
                             slot,
-                            EvmStorageSlot::new_changed(U256::ZERO, U256::from(rng.gen::<u64>())),
+                            EvmStorageSlot::new_changed(
+                                FlaggedStorage::ZERO,
+                                FlaggedStorage::new_from_value(rng.gen::<u64>()),
+                            ),
                         );
                     }
                 }
@@ -757,9 +783,12 @@ mod tests {
                     .expect("failed to insert accounts");
 
                 let storage_updates = update.iter().map(|(address, account)| {
-                    let storage_entries = account.storage.iter().map(|(slot, value)| {
-                        StorageEntry { key: B256::from(*slot), value: value.present_value }
-                    });
+                    let storage_entries =
+                        account.storage.iter().map(|(slot, value)| StorageEntry {
+                            key: B256::from(*slot),
+                            value: value.present_value.value,
+                            is_private: value.present_value.is_private,
+                        });
                     (*address, storage_entries)
                 });
                 provider_rw
@@ -776,7 +805,7 @@ mod tests {
                 let storage: HashMap<B256, U256> = account
                     .storage
                     .iter()
-                    .map(|(k, v)| (B256::from(*k), v.present_value))
+                    .map(|(k, v)| (B256::from(*k), v.present_value.value))
                     .collect();
 
                 let entry = accumulated_state.entry(*address).or_default();
@@ -830,11 +859,21 @@ mod tests {
         let proof2 = MultiProof::default();
         sequencer.next_sequence = 2;
 
-        let ready = sequencer.add_proof(0, proof1, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof1,
+        );
         assert_eq!(ready.len(), 1);
         assert!(!sequencer.has_pending());
 
-        let ready = sequencer.add_proof(1, proof2, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            1,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof2,
+        );
         assert_eq!(ready.len(), 1);
         assert!(!sequencer.has_pending());
     }
@@ -847,15 +886,30 @@ mod tests {
         let proof3 = MultiProof::default();
         sequencer.next_sequence = 3;
 
-        let ready = sequencer.add_proof(2, proof3, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            2,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof3,
+        );
         assert_eq!(ready.len(), 0);
         assert!(sequencer.has_pending());
 
-        let ready = sequencer.add_proof(0, proof1, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof1,
+        );
         assert_eq!(ready.len(), 1);
         assert!(sequencer.has_pending());
 
-        let ready = sequencer.add_proof(1, proof2, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            1,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof2,
+        );
         assert_eq!(ready.len(), 2);
         assert!(!sequencer.has_pending());
     }
@@ -867,10 +921,20 @@ mod tests {
         let proof3 = MultiProof::default();
         sequencer.next_sequence = 3;
 
-        let ready = sequencer.add_proof(0, proof1, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof1,
+        );
         assert_eq!(ready.len(), 1);
 
-        let ready = sequencer.add_proof(2, proof3, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            2,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof3,
+        );
         assert_eq!(ready.len(), 0);
         assert!(sequencer.has_pending());
     }
@@ -881,10 +945,20 @@ mod tests {
         let proof1 = MultiProof::default();
         let proof2 = MultiProof::default();
 
-        let ready = sequencer.add_proof(0, proof1, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof1,
+        );
         assert_eq!(ready.len(), 1);
 
-        let ready = sequencer.add_proof(0, proof2, HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proof2,
+        );
         assert_eq!(ready.len(), 0);
         assert!(!sequencer.has_pending());
     }
@@ -895,12 +969,37 @@ mod tests {
         let proofs: Vec<_> = (0..5).map(|_| MultiProof::default()).collect();
         sequencer.next_sequence = 5;
 
-        sequencer.add_proof(4, proofs[4].clone(), HashedPostState::default());
-        sequencer.add_proof(2, proofs[2].clone(), HashedPostState::default());
-        sequencer.add_proof(1, proofs[1].clone(), HashedPostState::default());
-        sequencer.add_proof(3, proofs[3].clone(), HashedPostState::default());
+        sequencer.add_proof(
+            4,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proofs[4].clone(),
+        );
+        sequencer.add_proof(
+            2,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proofs[2].clone(),
+        );
+        sequencer.add_proof(
+            1,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proofs[1].clone(),
+        );
+        sequencer.add_proof(
+            3,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proofs[3].clone(),
+        );
 
-        let ready = sequencer.add_proof(0, proofs[0].clone(), HashedPostState::default());
+        let ready = sequencer.add_proof(
+            0,
+            HashedPostState::default(),
+            MultiProofTargets::default(),
+            proofs[0].clone(),
+        );
         assert_eq!(ready.len(), 5);
         assert!(!sequencer.has_pending());
     }
@@ -916,8 +1015,8 @@ mod tests {
         let mut storage = HashedStorage::default();
         let slot1 = B256::random();
         let slot2 = B256::random();
-        storage.storage.insert(slot1, U256::ZERO);
-        storage.storage.insert(slot2, U256::from(1));
+        storage.storage.insert(slot1, FlaggedStorage::ZERO);
+        storage.storage.insert(slot2, FlaggedStorage::new_from_value(1));
         state.storages.insert(addr1, storage);
 
         state
@@ -926,7 +1025,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_new_account_targets() {
         let state = create_get_proof_targets_state();
-        let fetched = HashMap::default();
+        let fetched = MultiProofTargets::default();
 
         let targets = get_proof_targets(&state, &fetched);
 
@@ -940,7 +1039,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_new_storage_targets() {
         let state = create_get_proof_targets_state();
-        let fetched = HashMap::default();
+        let fetched = MultiProofTargets::default();
 
         let targets = get_proof_targets(&state, &fetched);
 
@@ -958,7 +1057,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_filter_already_fetched_accounts() {
         let state = create_get_proof_targets_state();
-        let mut fetched = HashMap::default();
+        let mut fetched = MultiProofTargets::default();
 
         // select an account that has no storage updates
         let fetched_addr = state
@@ -981,7 +1080,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_filter_already_fetched_storage() {
         let state = create_get_proof_targets_state();
-        let mut fetched = HashMap::default();
+        let mut fetched = MultiProofTargets::default();
 
         // mark one storage slot as already fetched
         let (addr, storage) = state.storages.iter().next().unwrap();
@@ -1001,7 +1100,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_empty_state() {
         let state = HashedPostState::default();
-        let fetched = HashMap::default();
+        let fetched = MultiProofTargets::default();
 
         let targets = get_proof_targets(&state, &fetched);
 
@@ -1011,7 +1110,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_mixed_fetched_state() {
         let mut state = HashedPostState::default();
-        let mut fetched = HashMap::default();
+        let mut fetched = MultiProofTargets::default();
 
         let addr1 = B256::random();
         let addr2 = B256::random();
@@ -1022,8 +1121,8 @@ mod tests {
         state.accounts.insert(addr2, Some(Default::default()));
 
         let mut storage = HashedStorage::default();
-        storage.storage.insert(slot1, U256::ZERO);
-        storage.storage.insert(slot2, U256::from(1));
+        storage.storage.insert(slot1, FlaggedStorage::ZERO);
+        storage.storage.insert(slot2, FlaggedStorage::new_from_value(1));
         state.storages.insert(addr1, storage);
 
         let mut fetched_slots = HashSet::default();
@@ -1040,7 +1139,7 @@ mod tests {
     #[test]
     fn test_get_proof_targets_unmodified_account_with_storage() {
         let mut state = HashedPostState::default();
-        let fetched = HashMap::default();
+        let fetched = MultiProofTargets::default();
 
         let addr = B256::random();
         let slot1 = B256::random();
@@ -1049,8 +1148,8 @@ mod tests {
         // don't add the account to state.accounts (simulating unmodified account)
         // but add storage updates for this account
         let mut storage = HashedStorage::default();
-        storage.storage.insert(slot1, U256::from(1));
-        storage.storage.insert(slot2, U256::from(2));
+        storage.storage.insert(slot1, FlaggedStorage::new_from_value(1));
+        storage.storage.insert(slot2, FlaggedStorage::new_from_value(2));
         state.storages.insert(addr, storage);
 
         assert!(!state.accounts.contains_key(&addr));
diff --git a/crates/engine/util/src/reorg.rs b/crates/engine/util/src/reorg.rs
index 84a8a0f34..38fec0c74 100644
--- a/crates/engine/util/src/reorg.rs
+++ b/crates/engine/util/src/reorg.rs
@@ -327,7 +327,16 @@ where
         let tx_recovered = tx.clone().try_into_ecrecovered().map_err(|_| {
             BlockExecutionError::Validation(BlockValidationError::SenderRecoveryError)
         })?;
-        evm_config.fill_tx_env(evm.tx_mut(), &tx_recovered, tx_recovered.signer());
+        evm_config.fill_tx_env(evm.tx_mut(), &tx_recovered, tx_recovered.signer()).map_err(
+            |err| {
+                return RethError::Execution(BlockExecutionError::Validation(
+                    BlockValidationError::EVM {
+                        hash: tx.hash(),
+                        error: Box::new(err.map_db_err(|e| e.into())),
+                    },
+                ))
+            },
+        )?;
         let exec_result = match evm.transact() {
             Ok(result) => result,
             error @ Err(EVMError::Transaction(_) | EVMError::Header(_)) => {
diff --git a/crates/errors/src/lib.rs b/crates/errors/src/lib.rs
index 9dc0ce0ca..0547e0412 100644
--- a/crates/errors/src/lib.rs
+++ b/crates/errors/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum-forks/src/lib.rs b/crates/ethereum-forks/src/lib.rs
index ea7fb6515..28be6c319 100644
--- a/crates/ethereum-forks/src/lib.rs
+++ b/crates/ethereum-forks/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum/cli/src/lib.rs b/crates/ethereum/cli/src/lib.rs
index 48d4b938e..a5de5de54 100644
--- a/crates/ethereum/cli/src/lib.rs
+++ b/crates/ethereum/cli/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum/consensus/src/lib.rs b/crates/ethereum/consensus/src/lib.rs
index 2eef91886..677912754 100644
--- a/crates/ethereum/consensus/src/lib.rs
+++ b/crates/ethereum/consensus/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum/engine-primitives/src/lib.rs b/crates/ethereum/engine-primitives/src/lib.rs
index 59c870f4d..77ab16cc3 100644
--- a/crates/ethereum/engine-primitives/src/lib.rs
+++ b/crates/ethereum/engine-primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum/evm/Cargo.toml b/crates/ethereum/evm/Cargo.toml
index 4ee072599..ba6d7a57c 100644
--- a/crates/ethereum/evm/Cargo.toml
+++ b/crates/ethereum/evm/Cargo.toml
@@ -19,6 +19,8 @@ reth-primitives = { workspace = true, features = ["reth-codec"] }
 reth-revm.workspace = true
 reth-ethereum-consensus.workspace = true
 reth-consensus.workspace = true
+reth-enclave.workspace = true
+reth-tracing.workspace = true
 
 # Ethereum
 revm-primitives.workspace = true
@@ -29,16 +31,21 @@ alloy-eips.workspace = true
 alloy-sol-types.workspace = true
 alloy-consensus.workspace = true
 
+# misc
+secp256k1.workspace = true
+
 [dev-dependencies]
 reth-testing-utils.workspace = true
 reth-evm = { workspace = true, features = ["test-utils"] }
 reth-revm = { workspace = true, features = ["test-utils"] }
 reth-primitives = { workspace = true, features = ["secp256k1"] }
 reth-execution-types.workspace = true
-secp256k1.workspace = true
-serde_json.workspace = true
+
 alloy-genesis.workspace = true
 
+serde_json.workspace = true
+tokio.workspace = true
+
 [features]
 default = ["std"]
 std = [
diff --git a/crates/ethereum/evm/src/config.rs b/crates/ethereum/evm/src/config.rs
index 9d6b6d879..6667aa7cc 100644
--- a/crates/ethereum/evm/src/config.rs
+++ b/crates/ethereum/evm/src/config.rs
@@ -1,6 +1,5 @@
 use reth_chainspec::{ChainSpec, EthereumHardforks};
 use reth_ethereum_forks::{EthereumHardfork, Head};
-
 /// Returns the revm [`SpecId`](revm_primitives::SpecId) at the given timestamp.
 ///
 /// # Note
@@ -11,7 +10,9 @@ pub fn revm_spec_by_timestamp_after_merge(
     chain_spec: &ChainSpec,
     timestamp: u64,
 ) -> revm_primitives::SpecId {
-    if chain_spec.is_osaka_active_at_timestamp(timestamp) {
+    let spec_id = if chain_spec.is_seismic() {
+        revm_primitives::MERCURY
+    } else if chain_spec.is_osaka_active_at_timestamp(timestamp) {
         revm_primitives::OSAKA
     } else if chain_spec.is_prague_active_at_timestamp(timestamp) {
         revm_primitives::PRAGUE
@@ -21,12 +22,16 @@ pub fn revm_spec_by_timestamp_after_merge(
         revm_primitives::SHANGHAI
     } else {
         revm_primitives::MERGE
-    }
+    };
+    // println!("revm_spec_by_timestamp_after_merge: {:?} spec_id: {:?}", chain_spec, spec_id);
+    spec_id
 }
 
 /// Map the latest active hardfork at the given block to a revm [`SpecId`](revm_primitives::SpecId).
 pub fn revm_spec(chain_spec: &ChainSpec, block: &Head) -> revm_primitives::SpecId {
-    if chain_spec.fork(EthereumHardfork::Prague).active_at_head(block) {
+    let spec_id = if chain_spec.is_seismic() {
+        revm_primitives::MERCURY
+    } else if chain_spec.fork(EthereumHardfork::Prague).active_at_head(block) {
         revm_primitives::PRAGUE
     } else if chain_spec.fork(EthereumHardfork::Cancun).active_at_head(block) {
         revm_primitives::CANCUN
@@ -57,7 +62,9 @@ pub fn revm_spec(chain_spec: &ChainSpec, block: &Head) -> revm_primitives::SpecI
             "invalid hardfork chainspec: expected at least one hardfork, got {:?}",
             chain_spec.hardforks
         )
-    }
+    };
+    // println!("revm_spec: {:?} spec_id: {:?}", chain_spec, spec_id);
+    spec_id
 }
 
 #[cfg(test)]
diff --git a/crates/ethereum/evm/src/execute.rs b/crates/ethereum/evm/src/execute.rs
index 99818ef54..1557d1d35 100644
--- a/crates/ethereum/evm/src/execute.rs
+++ b/crates/ethereum/evm/src/execute.rs
@@ -189,7 +189,14 @@ where
                 .into())
             }
 
-            self.evm_config.fill_tx_env(evm.tx_mut(), transaction, *sender);
+            self.evm_config.fill_tx_env(evm.tx_mut(), transaction, *sender).map_err(
+                move |err| {
+                    BlockExecutionError::Validation(BlockValidationError::EVM {
+                        hash: transaction.recalculate_hash(),
+                        error: Box::new(err.map_db_err(|e| e.into())),
+                    })
+                },
+            )?;
 
             if let Some(tx_env_overrides) = &mut self.tx_env_overrides {
                 tx_env_overrides.apply(evm.tx_mut());
@@ -348,7 +355,7 @@ mod tests {
         database::StateProviderDatabase, test_utils::StateProviderTest, TransitionState,
     };
     use reth_testing_utils::generators::{self, sign_tx_with_key_pair};
-    use revm_primitives::{address, EvmState, BLOCKHASH_SERVE_WINDOW};
+    use revm_primitives::{address, EvmState, FlaggedStorage, BLOCKHASH_SERVE_WINDOW};
     use secp256k1::{Keypair, Secp256k1};
     use std::{collections::HashMap, sync::mpsc};
 
@@ -482,7 +489,7 @@ mod tests {
         let timestamp_storage = executor.with_state_mut(|state| {
             state.storage(BEACON_ROOTS_ADDRESS, U256::from(timestamp_index)).unwrap()
         });
-        assert_eq!(timestamp_storage, U256::from(header.timestamp));
+        assert_eq!(timestamp_storage, FlaggedStorage::new_from_value(header.timestamp));
 
         // get parent beacon block root storage and compare
         let parent_beacon_block_root_storage = executor.with_state_mut(|state| {
@@ -490,7 +497,7 @@ mod tests {
                 .storage(BEACON_ROOTS_ADDRESS, U256::from(parent_beacon_block_root_index))
                 .expect("storage value should exist")
         });
-        assert_eq!(parent_beacon_block_root_storage, U256::from(0x69));
+        assert_eq!(parent_beacon_block_root_storage, FlaggedStorage::new_from_value(0x69));
     }
 
     #[test]
@@ -721,13 +728,13 @@ mod tests {
         let timestamp_storage = executor.with_state_mut(|state| {
             state.storage(BEACON_ROOTS_ADDRESS, U256::from(timestamp_index)).unwrap()
         });
-        assert_eq!(timestamp_storage, U256::from(header.timestamp));
+        assert_eq!(timestamp_storage, FlaggedStorage::new_from_value(header.timestamp));
 
         // get parent beacon block root storage and compare
         let parent_beacon_block_root_storage = executor.with_state_mut(|state| {
             state.storage(BEACON_ROOTS_ADDRESS, U256::from(parent_beacon_block_root_index)).unwrap()
         });
-        assert_eq!(parent_beacon_block_root_storage, U256::from(0x69));
+        assert_eq!(parent_beacon_block_root_storage, FlaggedStorage::new_from_value(0x69));
     }
 
     /// Create a state provider with blockhashes and the EIP-2935 system contract.
@@ -885,7 +892,7 @@ mod tests {
             executor.with_state_mut(|state| state
                 .storage(HISTORY_STORAGE_ADDRESS, U256::from(fork_activation_block - 1))
                 .unwrap()),
-            U256::ZERO
+            FlaggedStorage::ZERO
         );
 
         // the hash of the block itself should not be in storage
@@ -944,7 +951,7 @@ mod tests {
                     U256::from(fork_activation_block % BLOCKHASH_SERVE_WINDOW as u64 - 1)
                 )
                 .unwrap()),
-            U256::ZERO
+            FlaggedStorage::ZERO
         );
     }
 
@@ -1024,7 +1031,7 @@ mod tests {
             executor.with_state_mut(|state| state
                 .storage(HISTORY_STORAGE_ADDRESS, U256::ZERO)
                 .unwrap()),
-            U256::ZERO
+            FlaggedStorage::ZERO
         );
         assert!(executor.with_state_mut(|state| state
             .storage(HISTORY_STORAGE_ADDRESS, U256::from(1))
@@ -1062,13 +1069,13 @@ mod tests {
             executor.with_state_mut(|state| state
                 .storage(HISTORY_STORAGE_ADDRESS, U256::ZERO)
                 .unwrap()),
-            U256::ZERO
+            FlaggedStorage::ZERO
         );
         assert_ne!(
             executor.with_state_mut(|state| state
                 .storage(HISTORY_STORAGE_ADDRESS, U256::from(1))
                 .unwrap()),
-            U256::ZERO
+            FlaggedStorage::ZERO
         );
         assert!(executor.with_state_mut(|state| state
             .storage(HISTORY_STORAGE_ADDRESS, U256::from(2))
diff --git a/crates/ethereum/evm/src/lib.rs b/crates/ethereum/evm/src/lib.rs
index 509b61cb2..2b4a96bcf 100644
--- a/crates/ethereum/evm/src/lib.rs
+++ b/crates/ethereum/evm/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -17,22 +17,26 @@
 
 extern crate alloc;
 
-use core::convert::Infallible;
+use core::{convert::Infallible, net::IpAddr};
 
 use alloc::{sync::Arc, vec::Vec};
-use alloy_consensus::Header;
-use alloy_primitives::{Address, Bytes, TxKind, U256};
+use alloy_consensus::{transaction::TxSeismicElements, Header, TxSeismic};
+use alloy_primitives::{Address, Bytes, TxHash, TxKind, U256};
 use reth_chainspec::{ChainSpec, Head};
+use reth_enclave::{EnclaveClient, EnclaveError, SchnorrkelKeypair, SyncEnclaveApiClient};
 use reth_evm::{ConfigureEvm, ConfigureEvmEnv, NextBlockEnvAttributes};
-use reth_primitives::{transaction::FillTxEnv, TransactionSigned};
+use reth_primitives::{transaction::FillTxEnv, Transaction, TransactionSigned};
+use reth_tracing::tracing::debug;
 use revm_primitives::{
-    AnalysisKind, BlobExcessGasAndPrice, BlockEnv, CfgEnv, CfgEnvWithHandlerCfg, Env, SpecId, TxEnv,
+    AnalysisKind, BlobExcessGasAndPrice, BlockEnv, CfgEnv, CfgEnvWithHandlerCfg, EVMError,
+    EVMResultGeneric, Env, SpecId, TxEnv,
 };
 
 mod config;
 use alloy_eips::eip1559::INITIAL_BASE_FEE;
 pub use config::{revm_spec, revm_spec_by_timestamp_after_merge};
 use reth_ethereum_forks::EthereumHardfork;
+use secp256k1::PublicKey;
 
 pub mod execute;
 
@@ -46,18 +50,55 @@ pub mod eip6110;
 #[derive(Debug, Clone)]
 pub struct EthEvmConfig {
     chain_spec: Arc<ChainSpec>,
+    enclave_client: EnclaveClient,
 }
 
 impl EthEvmConfig {
     /// Creates a new Ethereum EVM configuration with the given chain spec.
-    pub const fn new(chain_spec: Arc<ChainSpec>) -> Self {
-        Self { chain_spec }
+    pub fn new(chain_spec: Arc<ChainSpec>) -> Self {
+        Self { chain_spec, enclave_client: EnclaveClient::default() }
+    }
+
+    /// Creates a new Ethereum EVM configuration with the given chain spec.
+    pub fn new_with_enclave_client(
+        chain_spec: Arc<ChainSpec>,
+        enclave_client: EnclaveClient,
+    ) -> Self {
+        Self { chain_spec, enclave_client }
+    }
+
+    /// Creates a new Ethereum EVM configuration with the given chain spec and enclave address and
+    /// port.
+    pub fn new_with_enclave_addr_port(
+        chain_spec: Arc<ChainSpec>,
+        enclave_addr: IpAddr,
+        enclave_port: u16,
+        enclave_server_timeout: u64,
+    ) -> Self {
+        debug!(target: "reth::evm", ?enclave_addr, ?enclave_port, "Creating new enclave client");
+
+        let enclave_client = EnclaveClient::builder()
+            .addr(enclave_addr.to_string())
+            .port(enclave_port)
+            .timeout(std::time::Duration::from_secs(enclave_server_timeout))
+            .build();
+        Self::new_with_enclave_client(chain_spec, enclave_client)
     }
 
     /// Returns the chain spec associated with this configuration.
     pub const fn chain_spec(&self) -> &Arc<ChainSpec> {
         &self.chain_spec
     }
+
+    /// Returns the public key from the signature.
+    pub fn recover_pubkey(&self, tx: &TransactionSigned) -> Option<PublicKey> {
+        let signature_hash = tx.signature_hash();
+
+        tx.signature.recover_from_prehash(&signature_hash).ok().and_then(|verifying_key| {
+            let pbk_bytes = verifying_key.to_encoded_point(false);
+            PublicKey::from_slice(pbk_bytes.as_bytes()).ok()
+        })
+    }
 }
 
 impl ConfigureEvmEnv for EthEvmConfig {
@@ -65,8 +106,82 @@ impl ConfigureEvmEnv for EthEvmConfig {
     type Transaction = TransactionSigned;
     type Error = Infallible;
 
-    fn fill_tx_env(&self, tx_env: &mut TxEnv, transaction: &TransactionSigned, sender: Address) {
-        transaction.fill_tx_env(tx_env, sender);
+    fn encrypt(
+        &self,
+        data: &Bytes,
+        seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        Ok(seismic_elements
+            .server_encrypt(&self.enclave_client, &data)
+            .map_err(|_| EVMError::Database(EnclaveError::EncryptionError))?)
+    }
+    fn decrypt(
+        &self,
+        data: &Bytes,
+        seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        Ok(seismic_elements
+            .server_decrypt(&self.enclave_client, &data)
+            .map_err(|_| EVMError::Database(EnclaveError::DecryptionError))?)
+    }
+
+    /// Get current eph_rng_keypair
+    fn get_eph_rng_keypair(&self) -> EVMResultGeneric<SchnorrkelKeypair, EnclaveError> {
+        Ok(self.enclave_client.get_eph_rng_keypair().map_err(|e| {
+            EVMError::Database(EnclaveError::EphRngKeypairGenerationError(e.to_string()))
+        })?)
+    }
+
+    /// seismic feature decrypt the transaction
+    fn fill_seismic_tx_env(
+        &self,
+        tx_env: &mut TxEnv,
+        tx: &TxSeismic,
+        sender: Address,
+        tx_hash: TxHash,
+    ) -> EVMResultGeneric<(), EnclaveError> {
+        debug!(target: "reth::fill_tx_env", ?tx, "Parsing Seismic transaction");
+
+        let enclave_decryption = self.decrypt(&tx.input, &tx.seismic_elements)?;
+
+        let data = Bytes::from(enclave_decryption.clone());
+
+        debug!(target: "reth::fill_tx_env", ?data, ?enclave_decryption, ?tx.input, "Decrypted input data");
+
+        tx_env.caller = sender;
+        tx_env.gas_limit = tx.gas_limit;
+        tx_env.gas_price = U256::from(tx.gas_price);
+        tx_env.gas_priority_fee = None;
+        tx_env.transact_to = tx.to;
+        tx_env.value = tx.value;
+        tx_env.data = data;
+        tx_env.chain_id = Some(tx.chain_id);
+        tx_env.nonce = Some(tx.nonce);
+        tx_env.access_list.clear();
+        tx_env.blob_hashes.clear();
+        tx_env.max_fee_per_blob_gas.take();
+        tx_env.authorization_list = None;
+        tx_env.tx_hash = tx_hash;
+
+        debug!(target: "reth::fill_tx_env", ?tx_env, "Filled Seismic transaction");
+
+        Ok(())
+    }
+
+    fn fill_tx_env(
+        &self,
+        tx_env: &mut TxEnv,
+        transaction: &TransactionSigned,
+        sender: Address,
+    ) -> EVMResultGeneric<(), EnclaveError> {
+        debug!(target: "reth::fill_tx_env", ?transaction, "Parsing transaction");
+        match &transaction.transaction {
+            Transaction::Seismic(tx) => {
+                self.fill_seismic_tx_env(tx_env, tx, sender, transaction.hash())?;
+                Ok(())
+            }
+            _ => Ok(transaction.fill_tx_env(tx_env, sender)),
+        }
     }
 
     fn fill_tx_env_system_contract_call(
@@ -201,12 +316,15 @@ mod tests {
     use alloy_genesis::Genesis;
     use alloy_primitives::{B256, U256};
     use reth_chainspec::{Chain, ChainSpec, MAINNET};
+    use reth_enclave::start_mock_enclave_server_random_port;
     use reth_evm::execute::ProviderError;
     use reth_revm::{
         db::{CacheDB, EmptyDBTyped},
+        handler::register::EvmHandler,
         inspectors::NoOpInspector,
+        precompile::u64_to_address,
         primitives::{BlockEnv, CfgEnv, SpecId},
-        JournaledState,
+        Evm, Handler, JournaledState,
     };
     use revm_primitives::{EnvWithHandlerCfg, HandlerCfg};
     use std::collections::HashSet;
@@ -333,6 +451,8 @@ mod tests {
     #[test]
     #[allow(clippy::needless_update)]
     fn test_evm_with_env_custom_block_and_tx() {
+        // start server
+
         let evm_config = EthEvmConfig::new(MAINNET.clone());
 
         let db = CacheDB::<EmptyDBTyped<ProviderError>>::default();
@@ -529,4 +649,59 @@ mod tests {
             HandlerCfg { spec_id: SpecId::CONSTANTINOPLE, ..Default::default() }
         );
     }
+
+    #[tokio::test(flavor = "multi_thread")]
+    #[allow(clippy::needless_update)]
+    async fn test_evm_with_spec_id_seismic() {
+        // expect a call to hit the mock enclave server
+        let enclave_client = start_mock_enclave_server_random_port().await;
+
+        let evm_config = EthEvmConfig::new_with_enclave_client(MAINNET.clone(), enclave_client);
+
+        let db = CacheDB::<EmptyDBTyped<Infallible>>::default();
+
+        let handler_cfg = HandlerCfg { spec_id: SpecId::MERCURY, ..Default::default() };
+
+        let env_with_handler = EnvWithHandlerCfg { env: Box::new(Env::default()), handler_cfg };
+
+        let evm = evm_config.evm_with_env(db.clone(), env_with_handler);
+
+        // Check that the spec ID is setup properly
+        assert_eq!(evm.handler.spec_id(), SpecId::MERCURY);
+        assert!(evm.handler.is_seismic());
+
+        // Check that standard way of generating evm works
+        type DB = CacheDB<EmptyDBTyped<Infallible>>;
+        type EXT = ();
+
+        let seismic_handler: Handler<'_, reth_revm::Context<EXT, DB>, EXT, DB> =
+            EvmHandler::seismic_with_spec(SpecId::MERCURY);
+        let seismic_evm = Evm::builder().with_db(db).with_handler(seismic_handler).build();
+
+        let precompile_addresses =
+            [u64_to_address(101), u64_to_address(102), u64_to_address(103), u64_to_address(104)];
+
+        let precompiles = seismic_evm.handler.pre_execution().load_precompiles();
+
+        for &addr in &precompile_addresses {
+            let is_contained = precompiles.contains(&addr);
+            assert!(
+                is_contained,
+                "Expected Precompile at address for standard evm generation {addr:?}"
+            );
+        }
+        assert_eq!(evm.handler.spec_id(), seismic_evm.handler.spec_id());
+        assert_eq!(evm.handler.is_seismic(), seismic_evm.handler.is_seismic());
+
+        //Check that RETH way of generating evm works
+        let precompiles = evm.handler.pre_execution().load_precompiles();
+
+        for &addr in &precompile_addresses {
+            let is_contained = precompiles.contains(&addr);
+            assert!(
+                is_contained,
+                "Expected Precompile at address for RETH evm generation {addr:?}"
+            );
+        }
+    }
 }
diff --git a/crates/ethereum/node/src/lib.rs b/crates/ethereum/node/src/lib.rs
index 8dae60315..91494e131 100644
--- a/crates/ethereum/node/src/lib.rs
+++ b/crates/ethereum/node/src/lib.rs
@@ -6,7 +6,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/ethereum/node/src/node.rs b/crates/ethereum/node/src/node.rs
index 7b1ce7d89..c6e864850 100644
--- a/crates/ethereum/node/src/node.rs
+++ b/crates/ethereum/node/src/node.rs
@@ -147,7 +147,13 @@ where
         ctx: &BuilderContext<Node>,
     ) -> eyre::Result<(Self::EVM, Self::Executor)> {
         let chain_spec = ctx.chain_spec();
-        let evm_config = EthEvmConfig::new(ctx.chain_spec());
+        let enclave_args = ctx.config().enclave;
+        let evm_config = EthEvmConfig::new_with_enclave_addr_port(
+            ctx.chain_spec(),
+            enclave_args.enclave_server_addr,
+            enclave_args.enclave_server_port,
+            enclave_args.enclave_timeout,
+        );
         let strategy_factory = EthExecutionStrategyFactory::new(chain_spec, evm_config.clone());
         let executor = BasicBlockExecutorProvider::new(strategy_factory);
 
@@ -314,7 +320,17 @@ where
         ctx: &BuilderContext<Node>,
         pool: Pool,
     ) -> eyre::Result<PayloadBuilderHandle<Types::Engine>> {
-        self.spawn(EthEvmConfig::new(ctx.chain_spec()), ctx, pool)
+        let enclave_args = ctx.config().enclave;
+        self.spawn(
+            EthEvmConfig::new_with_enclave_addr_port(
+                ctx.chain_spec(),
+                enclave_args.enclave_server_addr,
+                enclave_args.enclave_server_port,
+                enclave_args.enclave_timeout,
+            ),
+            ctx,
+            pool,
+        )
     }
 }
 
diff --git a/crates/ethereum/node/tests/e2e/blobs.rs b/crates/ethereum/node/tests/e2e/blobs.rs
index 111810514..a5eacfffa 100644
--- a/crates/ethereum/node/tests/e2e/blobs.rs
+++ b/crates/ethereum/node/tests/e2e/blobs.rs
@@ -13,7 +13,7 @@ use reth_tasks::TaskManager;
 use reth_transaction_pool::TransactionPool;
 use std::sync::Arc;
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn can_handle_blobs() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
     let tasks = TaskManager::current();
diff --git a/crates/ethereum/node/tests/e2e/dev.rs b/crates/ethereum/node/tests/e2e/dev.rs
index 325575998..8a015e544 100644
--- a/crates/ethereum/node/tests/e2e/dev.rs
+++ b/crates/ethereum/node/tests/e2e/dev.rs
@@ -14,7 +14,7 @@ use reth_rpc_eth_api::helpers::EthTransactions;
 use reth_tasks::TaskManager;
 use std::sync::Arc;
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn can_run_dev_node() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
     let tasks = TaskManager::current();
diff --git a/crates/ethereum/node/tests/e2e/eth.rs b/crates/ethereum/node/tests/e2e/eth.rs
index a91ccf6e3..c47f11f5b 100644
--- a/crates/ethereum/node/tests/e2e/eth.rs
+++ b/crates/ethereum/node/tests/e2e/eth.rs
@@ -10,7 +10,7 @@ use reth_node_ethereum::EthereumNode;
 use reth_tasks::TaskManager;
 use std::sync::Arc;
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn can_run_eth_node() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
@@ -46,7 +46,7 @@ async fn can_run_eth_node() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 #[cfg(unix)]
 async fn can_run_eth_node_with_auth_engine_api_over_ipc() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
@@ -94,7 +94,7 @@ async fn can_run_eth_node_with_auth_engine_api_over_ipc() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 #[cfg(unix)]
 async fn test_failed_run_eth_node_with_no_auth_engine_api_over_ipc_opts() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
diff --git a/crates/ethereum/node/tests/e2e/p2p.rs b/crates/ethereum/node/tests/e2e/p2p.rs
index 343521ef8..f9dd31fec 100644
--- a/crates/ethereum/node/tests/e2e/p2p.rs
+++ b/crates/ethereum/node/tests/e2e/p2p.rs
@@ -6,7 +6,7 @@ use reth_e2e_test_utils::{setup, setup_engine, transaction::TransactionTestConte
 use reth_node_ethereum::EthereumNode;
 use std::sync::Arc;
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn can_sync() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
@@ -49,7 +49,7 @@ async fn can_sync() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn e2e_test_send_transactions() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
@@ -87,7 +87,7 @@ async fn e2e_test_send_transactions() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn test_long_reorg() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
diff --git a/crates/ethereum/node/tests/e2e/rpc.rs b/crates/ethereum/node/tests/e2e/rpc.rs
index 664f447cf..4e6009b16 100644
--- a/crates/ethereum/node/tests/e2e/rpc.rs
+++ b/crates/ethereum/node/tests/e2e/rpc.rs
@@ -30,7 +30,7 @@ alloy_sol_types::sol! {
     }
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn test_fee_history() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
@@ -117,7 +117,7 @@ async fn test_fee_history() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn test_flashbots_validate_v3() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
@@ -191,7 +191,7 @@ async fn test_flashbots_validate_v3() -> eyre::Result<()> {
     Ok(())
 }
 
-#[tokio::test]
+#[tokio::test(flavor = "multi_thread")]
 async fn test_flashbots_validate_v4() -> eyre::Result<()> {
     reth_tracing::init_test_tracing();
 
diff --git a/crates/ethereum/payload/src/lib.rs b/crates/ethereum/payload/src/lib.rs
index 757b75018..79dedb0b8 100644
--- a/crates/ethereum/payload/src/lib.rs
+++ b/crates/ethereum/payload/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -127,6 +127,7 @@ where
         client: &Client,
         config: PayloadConfig<Self::Attributes>,
     ) -> Result<EthBuiltPayload, PayloadBuilderError> {
+        debug!("build_empty_payload called");
         let args = BuildArguments::new(
             client,
             // we use defaults here because for the empty payload we don't need to execute anything
@@ -284,11 +285,17 @@ where
         }
 
         // Configure the environment for the tx.
-        *evm.tx_mut() = evm_config.tx_env(tx.as_signed(), tx.signer());
+        *evm.tx_mut() = evm_config.tx_env(tx.as_signed(), tx.signer()).map_err(|err| {
+            warn!(target: "payload_builder", %err, ?tx, "failed to configure tx environment for payload");
+            PayloadBuilderError::EvmExecutionError(err.map_db_err(|err|err.into()))
+        })?;
+
+        debug!(target: "payload_builder", tx=?evm.tx(), "executing transaction");
 
         let ResultAndState { result, state } = match evm.transact() {
             Ok(res) => res,
             Err(err) => {
+                debug!(target: "payload_builder", %err, ?tx, "failed to execute transaction");
                 match err {
                     EVMError::Transaction(err) => {
                         if matches!(err, InvalidTransaction::NonceTooLow { .. }) {
diff --git a/crates/ethereum/primitives/src/lib.rs b/crates/ethereum/primitives/src/lib.rs
index 03cbade3f..6fa238f6b 100644
--- a/crates/ethereum/primitives/src/lib.rs
+++ b/crates/ethereum/primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/etl/src/lib.rs b/crates/etl/src/lib.rs
index 46d41d704..6e57f33d0 100644
--- a/crates/etl/src/lib.rs
+++ b/crates/etl/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/evm/Cargo.toml b/crates/evm/Cargo.toml
index 39add9396..acf964c28 100644
--- a/crates/evm/Cargo.toml
+++ b/crates/evm/Cargo.toml
@@ -17,13 +17,13 @@ reth-consensus.workspace = true
 reth-consensus-common.workspace = true
 reth-execution-errors.workspace = true
 reth-execution-types.workspace = true
+reth-enclave.workspace = true
 reth-metrics = { workspace = true, optional = true }
 reth-primitives.workspace = true
 reth-primitives-traits.workspace = true
 reth-prune-types.workspace = true
 reth-revm.workspace = true
 reth-storage-errors.workspace = true
-
 reth-storage-api = { workspace = true, optional = true }
 
 revm.workspace = true
diff --git a/crates/evm/execution-errors/src/lib.rs b/crates/evm/execution-errors/src/lib.rs
index db7887d1b..7435a8958 100644
--- a/crates/evm/execution-errors/src/lib.rs
+++ b/crates/evm/execution-errors/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/evm/execution-types/src/execution_outcome.rs b/crates/evm/execution-types/src/execution_outcome.rs
index 43c78a5d9..14dfd2576 100644
--- a/crates/evm/execution-types/src/execution_outcome.rs
+++ b/crates/evm/execution-types/src/execution_outcome.rs
@@ -6,7 +6,7 @@ use reth_primitives_traits::{Account, Bytecode, Receipt, StorageEntry};
 use reth_trie::{HashedPostState, KeyHasher};
 use revm::{
     db::{states::BundleState, BundleAccount},
-    primitives::AccountInfo,
+    primitives::{AccountInfo, FlaggedStorage},
 };
 use std::collections::HashMap;
 
@@ -66,8 +66,10 @@ impl<T> Default for ExecutionOutcome<T> {
 }
 
 /// Type used to initialize revms bundle state.
-pub type BundleStateInit =
-    HashMap<Address, (Option<Account>, Option<Account>, HashMap<B256, (U256, U256)>)>;
+pub type BundleStateInit = HashMap<
+    Address,
+    (Option<Account>, Option<Account>, HashMap<B256, ((U256, bool), (U256, bool))>),
+>;
 
 /// Types used inside `RevertsInit` to initialize revms reverts.
 pub type AccountRevertInit = (Option<Option<Account>>, Vec<StorageEntry>);
@@ -112,7 +114,18 @@ impl<T> ExecutionOutcome<T> {
                     address,
                     original.map(Into::into),
                     present.map(Into::into),
-                    storage.into_iter().map(|(k, s)| (k.into(), s)).collect(),
+                    storage
+                        .into_iter()
+                        .map(|(k, (orig_value, new_value))| {
+                            (
+                                k.into(),
+                                (
+                                    FlaggedStorage::new_from_tuple(orig_value),
+                                    FlaggedStorage::new_from_tuple(new_value),
+                                ),
+                            )
+                        })
+                        .collect(),
                 )
             }),
             reverts.into_iter().map(|(_, reverts)| {
@@ -121,7 +134,12 @@ impl<T> ExecutionOutcome<T> {
                     (
                         address,
                         original.map(|i| i.map(Into::into)),
-                        storage.into_iter().map(|entry| (entry.key.into(), entry.value)),
+                        storage.into_iter().map(|entry| {
+                            (
+                                entry.key.into(),
+                                FlaggedStorage { value: entry.value, is_private: entry.is_private },
+                            )
+                        }),
                     )
                 })
             }),
@@ -164,7 +182,7 @@ impl<T> ExecutionOutcome<T> {
     /// Get storage if value is known.
     ///
     /// This means that depending on status we can potentially return `U256::ZERO`.
-    pub fn storage(&self, address: &Address, storage_key: U256) -> Option<U256> {
+    pub fn storage(&self, address: &Address, storage_key: U256) -> Option<FlaggedStorage> {
         self.bundle.account(address).and_then(|a| a.storage_slot(storage_key))
     }
 
diff --git a/crates/evm/execution-types/src/lib.rs b/crates/evm/execution-types/src/lib.rs
index fb872cd59..0c137abf9 100644
--- a/crates/evm/execution-types/src/lib.rs
+++ b/crates/evm/execution-types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/evm/src/builder.rs b/crates/evm/src/builder.rs
index b955e41a2..6aac3c417 100644
--- a/crates/evm/src/builder.rs
+++ b/crates/evm/src/builder.rs
@@ -44,6 +44,8 @@ where
     pub fn build<'a>(self) -> Evm<'a, EXT, DB> {
         let mut builder =
             EvmBuilder::default().with_db(self.db).with_external_context(self.external_context);
+
+        //hardcoding for now
         if let Some(env) = self.env {
             builder = builder.with_spec_id(env.spec_id());
             builder = builder.with_env(env.env);
diff --git a/crates/evm/src/lib.rs b/crates/evm/src/lib.rs
index 29f6d7c65..65382fee8 100644
--- a/crates/evm/src/lib.rs
+++ b/crates/evm/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -18,11 +18,15 @@
 extern crate alloc;
 
 use crate::builder::RethEvmBuilder;
-use alloy_consensus::BlockHeader as _;
-use alloy_primitives::{Address, Bytes, B256, U256};
+use alloy_consensus::{transaction::TxSeismicElements, BlockHeader as _, TxSeismic};
+use alloy_primitives::{Address, Bytes, TxHash, B256, U256};
+use reth_enclave::{EnclaveError, SchnorrkelKeypair};
 use reth_primitives_traits::BlockHeader;
-use revm::{Database, Evm, GetInspector};
-use revm_primitives::{BlockEnv, CfgEnvWithHandlerCfg, Env, EnvWithHandlerCfg, SpecId, TxEnv};
+use revm::{seismic::RngContainer, Database, Evm, GetInspector};
+use revm_primitives::{
+    BlockEnv, CfgEnvWithHandlerCfg, EVMError, EVMResultGeneric, Env, EnvWithHandlerCfg, SpecId,
+    TxEnv,
+};
 
 pub mod builder;
 pub mod either;
@@ -63,6 +67,27 @@ pub trait ConfigureEvm: ConfigureEvmEnv {
     ) -> Evm<'_, Self::DefaultExternalContext<'_>, DB> {
         let mut evm = self.evm(db);
         evm.modify_spec_id(env.spec_id());
+
+        // Check if the spec ID is enabled in MERCURY
+        // println!(
+        //     "Checking spec ID for MERCURY: {:?} is enabled: {:?} env spec id: {} mercurry spec
+        // id: {}",     env.spec_id(),
+        //     env.spec_id().is_enabled_in(SpecId::MERCURY),
+        //     env.spec_id() as u8,
+        //     SpecId::MERCURY as u8
+        // );
+
+        // This will change if we use our own spec id
+        if env.spec_id() == SpecId::MERCURY {
+            let keypair = match self.get_eph_rng_keypair() {
+                Ok(kp) => kp,
+                Err(err) => {
+                    panic!("Failed to get ephemeral RNG keypair: {err:?}");
+                }
+            };
+            evm.context.evm = evm.context.evm.with_rng_container(RngContainer::new(keypair));
+        }
+
         evm.context.evm.env = env.env;
         evm
     }
@@ -121,15 +146,52 @@ pub trait ConfigureEvmEnv: Send + Sync + Unpin + Clone + 'static {
     /// The error type that is returned by [`Self::next_cfg_and_block_env`].
     type Error: core::error::Error + Send + Sync;
 
+    /// seismic feature encrypt the transaction
+    fn encrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError>;
+
+    /// seismic feature decrypt the transaction
+    fn decrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError>;
+
+    /// Get current eph_rng_keypair
+    fn get_eph_rng_keypair(&self) -> EVMResultGeneric<SchnorrkelKeypair, EnclaveError>;
+
+    /// seismic feature decrypt the transaction
+    fn fill_seismic_tx_env(
+        &self,
+        _tx_env: &mut TxEnv,
+        _tx: &TxSeismic,
+        _sender: Address,
+        _tx_hash: TxHash,
+    ) -> EVMResultGeneric<(), EnclaveError> {
+        Err(EVMError::Database(EnclaveError::DecryptionError))
+    }
+
     /// Returns a [`TxEnv`] from a transaction and [`Address`].
-    fn tx_env(&self, transaction: &Self::Transaction, signer: Address) -> TxEnv {
+    fn tx_env(
+        &self,
+        transaction: &Self::Transaction,
+        signer: Address,
+    ) -> EVMResultGeneric<TxEnv, EnclaveError> {
         let mut tx_env = TxEnv::default();
-        self.fill_tx_env(&mut tx_env, transaction, signer);
-        tx_env
+        self.fill_tx_env(&mut tx_env, transaction, signer)?;
+        Ok(tx_env)
     }
 
     /// Fill transaction environment from a transaction  and the given sender address.
-    fn fill_tx_env(&self, tx_env: &mut TxEnv, transaction: &Self::Transaction, sender: Address);
+    fn fill_tx_env(
+        &self,
+        tx_env: &mut TxEnv,
+        transaction: &Self::Transaction,
+        sender: Address,
+    ) -> EVMResultGeneric<(), EnclaveError>;
 
     /// Fill transaction environment with a system contract call.
     fn fill_tx_env_system_contract_call(
diff --git a/crates/evm/src/metrics.rs b/crates/evm/src/metrics.rs
index 1f21cb4d3..7e9cabcb5 100644
--- a/crates/evm/src/metrics.rs
+++ b/crates/evm/src/metrics.rs
@@ -154,7 +154,8 @@ mod tests {
     use metrics_util::debugging::{DebugValue, DebuggingRecorder, Snapshotter};
     use revm::db::BundleState;
     use revm_primitives::{
-        Account, AccountInfo, AccountStatus, EvmState, EvmStorage, EvmStorageSlot, B256, U256,
+        Account, AccountInfo, AccountStatus, EvmState, EvmStorage, EvmStorageSlot, FlaggedStorage,
+        B256, U256,
     };
     use std::sync::mpsc;
 
@@ -248,8 +249,10 @@ mod tests {
 
         let state = {
             let mut state = EvmState::default();
-            let storage =
-                EvmStorage::from_iter([(U256::from(1), EvmStorageSlot::new(U256::from(2)))]);
+            let storage = EvmStorage::from_iter([(
+                U256::from(1),
+                EvmStorageSlot::new(FlaggedStorage::new_from_value(2)),
+            )]);
             state.insert(
                 Default::default(),
                 Account {
diff --git a/crates/exex/exex/src/backfill/stream.rs b/crates/exex/exex/src/backfill/stream.rs
index 0e27954eb..0fefd4c21 100644
--- a/crates/exex/exex/src/backfill/stream.rs
+++ b/crates/exex/exex/src/backfill/stream.rs
@@ -255,7 +255,7 @@ mod tests {
     use reth_testing_utils::generators;
     use secp256k1::Keypair;
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn test_single_blocks() -> eyre::Result<()> {
         reth_tracing::init_test_tracing();
 
@@ -296,7 +296,7 @@ mod tests {
         Ok(())
     }
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn test_batch() -> eyre::Result<()> {
         reth_tracing::init_test_tracing();
 
diff --git a/crates/exex/exex/src/lib.rs b/crates/exex/exex/src/lib.rs
index ce6641ff6..51362c0fb 100644
--- a/crates/exex/exex/src/lib.rs
+++ b/crates/exex/exex/src/lib.rs
@@ -29,7 +29,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/exex/exex/src/notifications.rs b/crates/exex/exex/src/notifications.rs
index 05892e2f9..350489a57 100644
--- a/crates/exex/exex/src/notifications.rs
+++ b/crates/exex/exex/src/notifications.rs
@@ -452,7 +452,7 @@ mod tests {
     use reth_testing_utils::generators::{self, random_block, BlockParams};
     use tokio::sync::mpsc;
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn exex_notifications_behind_head_canonical() -> eyre::Result<()> {
         let mut rng = generators::rng();
 
@@ -591,7 +591,7 @@ mod tests {
         Ok(())
     }
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn exex_notifications_same_head_non_canonical() -> eyre::Result<()> {
         let mut rng = generators::rng();
 
diff --git a/crates/exex/test-utils/src/lib.rs b/crates/exex/test-utils/src/lib.rs
index 939bf21c0..1baef8b76 100644
--- a/crates/exex/test-utils/src/lib.rs
+++ b/crates/exex/test-utils/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/exex/types/src/lib.rs b/crates/exex/types/src/lib.rs
index ffed819d6..69e182f31 100644
--- a/crates/exex/types/src/lib.rs
+++ b/crates/exex/types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/fs-util/src/lib.rs b/crates/fs-util/src/lib.rs
index c1aa4900e..53c4636da 100644
--- a/crates/fs-util/src/lib.rs
+++ b/crates/fs-util/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 use serde::{de::DeserializeOwned, Serialize};
diff --git a/crates/metrics/src/lib.rs b/crates/metrics/src/lib.rs
index a5411b617..486831af9 100644
--- a/crates/metrics/src/lib.rs
+++ b/crates/metrics/src/lib.rs
@@ -8,7 +8,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/banlist/src/lib.rs b/crates/net/banlist/src/lib.rs
index 29cf8eb76..48afec4e7 100644
--- a/crates/net/banlist/src/lib.rs
+++ b/crates/net/banlist/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/discv4/src/lib.rs b/crates/net/discv4/src/lib.rs
index 9ffe8451f..5de10e10f 100644
--- a/crates/net/discv4/src/lib.rs
+++ b/crates/net/discv4/src/lib.rs
@@ -19,7 +19,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/discv5/src/lib.rs b/crates/net/discv5/src/lib.rs
index da54d0b52..dacaeae36 100644
--- a/crates/net/discv5/src/lib.rs
+++ b/crates/net/discv5/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/dns/src/lib.rs b/crates/net/dns/src/lib.rs
index a6f7d1bab..9f5d3cc09 100644
--- a/crates/net/dns/src/lib.rs
+++ b/crates/net/dns/src/lib.rs
@@ -8,7 +8,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/downloaders/src/lib.rs b/crates/net/downloaders/src/lib.rs
index 8d50b6fbc..8e234d8a6 100644
--- a/crates/net/downloaders/src/lib.rs
+++ b/crates/net/downloaders/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/ecies/src/lib.rs b/crates/net/ecies/src/lib.rs
index b2dcdac67..c2cfb0110 100644
--- a/crates/net/ecies/src/lib.rs
+++ b/crates/net/ecies/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/eth-wire-types/src/lib.rs b/crates/net/eth-wire-types/src/lib.rs
index ac7ea55d0..72f80264b 100644
--- a/crates/net/eth-wire-types/src/lib.rs
+++ b/crates/net/eth-wire-types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/eth-wire/src/lib.rs b/crates/net/eth-wire/src/lib.rs
index 1fd68951a..e389a306d 100644
--- a/crates/net/eth-wire/src/lib.rs
+++ b/crates/net/eth-wire/src/lib.rs
@@ -8,7 +8,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/nat/src/lib.rs b/crates/net/nat/src/lib.rs
index 962f1e49e..552ee1578 100644
--- a/crates/net/nat/src/lib.rs
+++ b/crates/net/nat/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/network-api/src/lib.rs b/crates/net/network-api/src/lib.rs
index 6163c8730..3f9996c54 100644
--- a/crates/net/network-api/src/lib.rs
+++ b/crates/net/network-api/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
diff --git a/crates/net/network-types/src/lib.rs b/crates/net/network-types/src/lib.rs
index 1e8ad581d..4e0686cbb 100644
--- a/crates/net/network-types/src/lib.rs
+++ b/crates/net/network-types/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/network/src/lib.rs b/crates/net/network/src/lib.rs
index af5976ce5..4fd1c1995 100644
--- a/crates/net/network/src/lib.rs
+++ b/crates/net/network/src/lib.rs
@@ -112,7 +112,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![allow(unreachable_pub)]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/network/src/metrics.rs b/crates/net/network/src/metrics.rs
index bda5f84c7..9371ee957 100644
--- a/crates/net/network/src/metrics.rs
+++ b/crates/net/network/src/metrics.rs
@@ -349,6 +349,9 @@ pub struct AnnouncedTxTypesMetrics {
 
     /// Histogram for tracking frequency of EIP-7702 transaction type
     pub(crate) eip7702: Histogram,
+
+    /// Histogram for tracking frequency of seismic transaction type
+    pub(crate) seismic: Histogram,
 }
 
 /// Counts the number of transactions by their type in a block or collection.
@@ -371,6 +374,9 @@ pub struct TxTypesCounter {
 
     /// Count of transactions conforming to EIP-7702 (Restricted Storage Windows).
     pub(crate) eip7702: usize,
+
+    /// Count of seismic transactions conforming
+    pub(crate) seismic: usize,
 }
 
 impl TxTypesCounter {
@@ -392,6 +398,9 @@ impl TxTypesCounter {
             TxType::Eip7702 => {
                 self.eip7702 += 1;
             }
+            TxType::Seismic => {
+                self.seismic += 1;
+            }
             _ => {}
         }
     }
@@ -406,5 +415,6 @@ impl AnnouncedTxTypesMetrics {
         self.eip1559.record(tx_types_counter.eip1559 as f64);
         self.eip4844.record(tx_types_counter.eip4844 as f64);
         self.eip7702.record(tx_types_counter.eip7702 as f64);
+        self.seismic.record(tx_types_counter.seismic as f64);
     }
 }
diff --git a/crates/net/p2p/src/lib.rs b/crates/net/p2p/src/lib.rs
index 7dcb77671..c940b339b 100644
--- a/crates/net/p2p/src/lib.rs
+++ b/crates/net/p2p/src/lib.rs
@@ -6,7 +6,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/net/peers/src/lib.rs b/crates/net/peers/src/lib.rs
index a8bf51da2..c206961ae 100644
--- a/crates/net/peers/src/lib.rs
+++ b/crates/net/peers/src/lib.rs
@@ -48,7 +48,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/api/src/lib.rs b/crates/node/api/src/lib.rs
index 105cac47d..91eeb8550 100644
--- a/crates/node/api/src/lib.rs
+++ b/crates/node/api/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/builder/src/builder/mod.rs b/crates/node/builder/src/builder/mod.rs
index 98c831f2f..7149fe16c 100644
--- a/crates/node/builder/src/builder/mod.rs
+++ b/crates/node/builder/src/builder/mod.rs
@@ -607,7 +607,7 @@ impl<Node: FullNodeTypes> BuilderContext<Node> {
         &self.config_container.config
     }
 
-    /// Returns the loaded reh.toml config.
+    /// Returns the loaded reth.toml config.
     pub const fn reth_config(&self) -> &reth_config::Config {
         &self.config_container.toml_config
     }
diff --git a/crates/node/builder/src/launch/engine.rs b/crates/node/builder/src/launch/engine.rs
index 9a7e83b66..feb1bf1fd 100644
--- a/crates/node/builder/src/launch/engine.rs
+++ b/crates/node/builder/src/launch/engine.rs
@@ -88,6 +88,7 @@ where
         self,
         target: NodeBuilderWithComponents<T, CB, AO>,
     ) -> eyre::Result<Self::Node> {
+        debug!(target: "reth::cli", "Launching engine node");
         let Self { ctx, engine_tree_config } = self;
         let NodeBuilderWithComponents {
             adapter: NodeTypesAdapter { database },
@@ -234,6 +235,7 @@ where
                 Box::pin(consensus_engine_stream),
                 ctx.dev_mining_mode(ctx.components().pool()),
                 LocalPayloadAttributesBuilder::new(ctx.chain_spec()),
+                ctx.data_dir().clone(),
             );
 
             Either::Left(eth_service)
@@ -254,6 +256,7 @@ where
                 engine_tree_config,
                 ctx.invalid_block_hook()?,
                 ctx.sync_metrics_tx(),
+                ctx.data_dir().clone(),
             );
 
             Either::Right(eth_service)
diff --git a/crates/node/builder/src/lib.rs b/crates/node/builder/src/lib.rs
index a4f87c479..5674583a7 100644
--- a/crates/node/builder/src/lib.rs
+++ b/crates/node/builder/src/lib.rs
@@ -6,7 +6,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/core/Cargo.toml b/crates/node/core/Cargo.toml
index 0ede9fe80..80e9430a6 100644
--- a/crates/node/core/Cargo.toml
+++ b/crates/node/core/Cargo.toml
@@ -35,6 +35,7 @@ reth-network-peers.workspace = true
 reth-prune-types.workspace = true
 reth-stages-types.workspace = true
 reth-ethereum-forks.workspace = true
+reth-enclave.workspace = true
 
 # ethereum
 alloy-primitives.workspace = true
diff --git a/crates/node/core/src/args/enclave.rs b/crates/node/core/src/args/enclave.rs
new file mode 100644
index 000000000..7777219d8
--- /dev/null
+++ b/crates/node/core/src/args/enclave.rs
@@ -0,0 +1,65 @@
+//! clap [Args](clap::Args) for RPC related arguments.
+
+use std::net::IpAddr;
+
+use clap::Args;
+use reth_enclave::{ENCLAVE_DEFAULT_ENDPOINT_ADDR, ENCLAVE_DEFAULT_ENDPOINT_PORT};
+
+/// Parameters for configuring the enclave more granularity via CLI
+#[derive(Debug, Clone, Args, PartialEq, Eq, Copy)]
+#[command(next_help_heading = "Enclave")]
+pub struct EnclaveArgs {
+    /// Auth server address to listen on
+    #[arg(long = "enclave.endpoint-addr", default_value_t = ENCLAVE_DEFAULT_ENDPOINT_ADDR)]
+    pub enclave_server_addr: IpAddr,
+
+    /// Auth server port to listen on
+    #[arg(long = "enclave.endpoint-port", default_value_t = ENCLAVE_DEFAULT_ENDPOINT_PORT)]
+    pub enclave_server_port: u16,
+
+    /// Spin up mock server for testing purpose
+    #[arg(long = "enclave.mock-server", action = clap::ArgAction::SetTrue)]
+    pub mock_server: bool,
+
+    /// Enclave client timeout
+    #[arg(long = "enclave.timeout", default_value_t = 5)]
+    pub enclave_timeout: u64,
+}
+
+impl Default for EnclaveArgs {
+    fn default() -> Self {
+        Self {
+            enclave_server_addr: ENCLAVE_DEFAULT_ENDPOINT_ADDR,
+            enclave_server_port: ENCLAVE_DEFAULT_ENDPOINT_PORT,
+            mock_server: false,
+            enclave_timeout: 5,
+        }
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use crate::args::enclave::EnclaveArgs;
+    use clap::{Args, Parser};
+
+    /// A helper type to parse Args more easily
+    #[derive(Parser)]
+    struct CommandParser<T: Args> {
+        #[command(flatten)]
+        args: T,
+    }
+
+    #[test]
+    fn test_enclave_args_parser() {
+        let args = CommandParser::<EnclaveArgs>::parse_from(["reth node"]).args;
+
+        let addr = args.enclave_server_addr;
+        let port = args.enclave_server_port;
+        let mock = args.mock_server;
+
+        assert_eq!(port, ENCLAVE_DEFAULT_ENDPOINT_PORT);
+        assert_eq!(addr, ENCLAVE_DEFAULT_ENDPOINT_ADDR);
+        assert_eq!(mock, false);
+    }
+}
diff --git a/crates/node/core/src/args/mod.rs b/crates/node/core/src/args/mod.rs
index 7f1b64361..f0ab4baac 100644
--- a/crates/node/core/src/args/mod.rs
+++ b/crates/node/core/src/args/mod.rs
@@ -1,4 +1,7 @@
 //! Parameters for configuring the rpc more granularity via CLI
+/// EnclaveArgs struct for configuring the enclave
+mod enclave;
+pub use enclave::EnclaveArgs;
 
 /// NetworkArg struct for configuring the network
 mod network;
diff --git a/crates/node/core/src/args/payload_builder.rs b/crates/node/core/src/args/payload_builder.rs
index 2bce2e8e7..c5ef0d7f3 100644
--- a/crates/node/core/src/args/payload_builder.rs
+++ b/crates/node/core/src/args/payload_builder.rs
@@ -16,9 +16,9 @@ pub struct PayloadBuilderArgs {
     #[arg(long = "builder.extradata", value_parser = ExtradataValueParser::default(), default_value_t = default_extra_data())]
     pub extradata: String,
 
-    /// Target gas ceiling for built blocks.
-    #[arg(long = "builder.gaslimit", default_value = "30000000", value_name = "GAS_LIMIT")]
-    pub max_gas_limit: u64,
+    /// Target gas limit for built blocks.
+    #[arg(long = "builder.gaslimit", default_value_t = ETHEREUM_BLOCK_GAS_LIMIT, value_name = "GAS_LIMIT")]
+    pub gas_limit: u64,
 
     /// The interval at which the job should build a new payload after the last.
     ///
@@ -41,7 +41,7 @@ impl Default for PayloadBuilderArgs {
     fn default() -> Self {
         Self {
             extradata: default_extra_data(),
-            max_gas_limit: ETHEREUM_BLOCK_GAS_LIMIT,
+            gas_limit: ETHEREUM_BLOCK_GAS_LIMIT,
             interval: Duration::from_secs(1),
             deadline: SLOT_DURATION,
             max_payload_tasks: 3,
@@ -62,8 +62,8 @@ impl PayloadBuilderConfig for PayloadBuilderArgs {
         self.deadline
     }
 
-    fn max_gas_limit(&self) -> u64 {
-        self.max_gas_limit
+    fn gas_limit(&self) -> u64 {
+        self.gas_limit
     }
 
     fn max_payload_tasks(&self) -> usize {
@@ -129,7 +129,7 @@ mod tests {
     }
 
     #[test]
-    fn test_default_extradata() {
+    fn test_default_extra_data() {
         let extradata = default_extra_data();
         let args = CommandParser::<PayloadBuilderArgs>::parse_from([
             "reth",
diff --git a/crates/node/core/src/args/txpool.rs b/crates/node/core/src/args/txpool.rs
index a8ea1d9cd..2b69d6317 100644
--- a/crates/node/core/src/args/txpool.rs
+++ b/crates/node/core/src/args/txpool.rs
@@ -52,7 +52,7 @@ pub struct TxPoolArgs {
 
     /// The default enforced gas limit for transactions entering the pool
     #[arg(long = "txpool.gas-limit", default_value_t = ETHEREUM_BLOCK_GAS_LIMIT)]
-    pub gas_limit: u64,
+    pub enforced_gas_limit: u64,
 
     /// Price bump percentage to replace an already existing blob transaction
     #[arg(long = "blobpool.pricebump", default_value_t = REPLACE_BLOB_PRICE_BUMP)]
@@ -105,7 +105,7 @@ impl Default for TxPoolArgs {
             max_account_slots: TXPOOL_MAX_ACCOUNT_SLOTS_PER_SENDER,
             price_bump: DEFAULT_PRICE_BUMP,
             minimal_protocol_basefee: MIN_PROTOCOL_BASE_FEE,
-            gas_limit: ETHEREUM_BLOCK_GAS_LIMIT,
+            enforced_gas_limit: ETHEREUM_BLOCK_GAS_LIMIT,
             blob_transaction_price_bump: REPLACE_BLOB_PRICE_BUMP,
             max_tx_input_bytes: DEFAULT_MAX_TX_INPUT_BYTES,
             max_cached_entries: DEFAULT_MAX_CACHED_BLOBS,
@@ -151,7 +151,7 @@ impl RethTransactionPoolConfig for TxPoolArgs {
                 replace_blob_tx_price_bump: self.blob_transaction_price_bump,
             },
             minimal_protocol_basefee: self.minimal_protocol_basefee,
-            gas_limit: self.gas_limit,
+            gas_limit: self.enforced_gas_limit,
             pending_tx_listener_buffer_size: self.pending_tx_listener_buffer_size,
             new_tx_listener_buffer_size: self.new_tx_listener_buffer_size,
             max_new_pending_txs_notifications: self.max_new_pending_txs_notifications,
diff --git a/crates/node/core/src/cli/config.rs b/crates/node/core/src/cli/config.rs
index 27325632d..e3b542c0b 100644
--- a/crates/node/core/src/cli/config.rs
+++ b/crates/node/core/src/cli/config.rs
@@ -24,8 +24,8 @@ pub trait PayloadBuilderConfig {
     /// The deadline for when the payload builder job should resolve.
     fn deadline(&self) -> Duration;
 
-    /// Target gas ceiling for built blocks.
-    fn max_gas_limit(&self) -> u64;
+    /// Target gas limit for built blocks.
+    fn gas_limit(&self) -> u64;
 
     /// Maximum number of tasks to spawn for building a payload.
     fn max_payload_tasks(&self) -> usize;
diff --git a/crates/node/core/src/lib.rs b/crates/node/core/src/lib.rs
index aa4f72bd6..72f3dbf61 100644
--- a/crates/node/core/src/lib.rs
+++ b/crates/node/core/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/core/src/node_config.rs b/crates/node/core/src/node_config.rs
index 861e47fc3..1cf5d102f 100644
--- a/crates/node/core/src/node_config.rs
+++ b/crates/node/core/src/node_config.rs
@@ -2,8 +2,8 @@
 
 use crate::{
     args::{
-        DatabaseArgs, DatadirArgs, DebugArgs, DevArgs, NetworkArgs, PayloadBuilderArgs,
-        PruningArgs, RpcServerArgs, TxPoolArgs,
+        DatabaseArgs, DatadirArgs, DebugArgs, DevArgs, EnclaveArgs, NetworkArgs,
+        PayloadBuilderArgs, PruningArgs, RpcServerArgs, TxPoolArgs,
     },
     dirs::{ChainPath, DataDirPath},
     utils::get_single_header,
@@ -133,6 +133,9 @@ pub struct NodeConfig<ChainSpec> {
 
     /// All pruning related arguments
     pub pruning: PruningArgs,
+
+    /// All enclave related arguments
+    pub enclave: EnclaveArgs,
 }
 
 impl NodeConfig<ChainSpec> {
@@ -161,6 +164,7 @@ impl<ChainSpec> NodeConfig<ChainSpec> {
             dev: DevArgs::default(),
             pruning: PruningArgs::default(),
             datadir: DatadirArgs::default(),
+            enclave: EnclaveArgs::default(),
         }
     }
 
@@ -255,6 +259,12 @@ impl<ChainSpec> NodeConfig<ChainSpec> {
         self
     }
 
+    /// Set the enclave args for the node
+    pub const fn with_enclave(mut self, enclave: EnclaveArgs) -> Self {
+        self.enclave = enclave;
+        self
+    }
+
     /// Set the pruning args for the node
     pub fn with_pruning(mut self, pruning: PruningArgs) -> Self {
         self.pruning = pruning;
@@ -449,6 +459,7 @@ impl<ChainSpec> NodeConfig<ChainSpec> {
             db: self.db,
             dev: self.dev,
             pruning: self.pruning,
+            enclave: self.enclave,
         }
     }
 }
@@ -475,6 +486,7 @@ impl<ChainSpec> Clone for NodeConfig<ChainSpec> {
             dev: self.dev,
             pruning: self.pruning.clone(),
             datadir: self.datadir.clone(),
+            enclave: self.enclave.clone(),
         }
     }
 }
diff --git a/crates/node/events/src/lib.rs b/crates/node/events/src/lib.rs
index e4665066c..be3f92479 100644
--- a/crates/node/events/src/lib.rs
+++ b/crates/node/events/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/metrics/src/lib.rs b/crates/node/metrics/src/lib.rs
index d74a8aeff..d9ebfc637 100644
--- a/crates/node/metrics/src/lib.rs
+++ b/crates/node/metrics/src/lib.rs
@@ -2,7 +2,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/node/types/src/lib.rs b/crates/node/types/src/lib.rs
index 6e1eb81a0..ac6017cf0 100644
--- a/crates/node/types/src/lib.rs
+++ b/crates/node/types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/optimism/bin/src/lib.rs b/crates/optimism/bin/src/lib.rs
index 21c28f7c5..a024e789c 100644
--- a/crates/optimism/bin/src/lib.rs
+++ b/crates/optimism/bin/src/lib.rs
@@ -21,7 +21,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 // The `optimism` feature must be enabled to use this crate.
diff --git a/crates/optimism/chainspec/src/lib.rs b/crates/optimism/chainspec/src/lib.rs
index a1a08dd3b..49b858adf 100644
--- a/crates/optimism/chainspec/src/lib.rs
+++ b/crates/optimism/chainspec/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(feature = "std"), no_std)]
diff --git a/crates/optimism/cli/src/lib.rs b/crates/optimism/cli/src/lib.rs
index 23eaa99b5..1bece6a13 100644
--- a/crates/optimism/cli/src/lib.rs
+++ b/crates/optimism/cli/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(all(not(test), feature = "optimism"), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/optimism/consensus/src/lib.rs b/crates/optimism/consensus/src/lib.rs
index d05ff9c9b..c7833b086 100644
--- a/crates/optimism/consensus/src/lib.rs
+++ b/crates/optimism/consensus/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 // The `optimism` feature must be enabled to use this crate.
diff --git a/crates/optimism/evm/src/lib.rs b/crates/optimism/evm/src/lib.rs
index 7424379f5..6b3c002ba 100644
--- a/crates/optimism/evm/src/lib.rs
+++ b/crates/optimism/evm/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(feature = "std"), no_std)]
diff --git a/crates/optimism/hardforks/src/lib.rs b/crates/optimism/hardforks/src/lib.rs
index 36f42155e..06cd884e5 100644
--- a/crates/optimism/hardforks/src/lib.rs
+++ b/crates/optimism/hardforks/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(feature = "std"), no_std)]
diff --git a/crates/optimism/node/src/lib.rs b/crates/optimism/node/src/lib.rs
index 81db8b2b7..a4ea43e69 100644
--- a/crates/optimism/node/src/lib.rs
+++ b/crates/optimism/node/src/lib.rs
@@ -6,7 +6,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 // The `optimism` feature must be enabled to use this crate.
diff --git a/crates/optimism/payload/src/lib.rs b/crates/optimism/payload/src/lib.rs
index 53fad1118..555e7d58b 100644
--- a/crates/optimism/payload/src/lib.rs
+++ b/crates/optimism/payload/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(all(not(test), feature = "optimism"), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/optimism/primitives/src/lib.rs b/crates/optimism/primitives/src/lib.rs
index b2b9e60e5..c8f32d300 100644
--- a/crates/optimism/primitives/src/lib.rs
+++ b/crates/optimism/primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 // The `optimism` feature must be enabled to use this crate.
diff --git a/crates/optimism/rpc/src/lib.rs b/crates/optimism/rpc/src/lib.rs
index b76058ce5..d8e34ad02 100644
--- a/crates/optimism/rpc/src/lib.rs
+++ b/crates/optimism/rpc/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(all(not(test), feature = "optimism"), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/optimism/storage/src/lib.rs b/crates/optimism/storage/src/lib.rs
index 0db8f4e20..de9b3570c 100644
--- a/crates/optimism/storage/src/lib.rs
+++ b/crates/optimism/storage/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 // The `optimism` feature must be enabled to use this crate.
diff --git a/crates/payload/basic/src/lib.rs b/crates/payload/basic/src/lib.rs
index 189b8a8c2..57cad63fa 100644
--- a/crates/payload/basic/src/lib.rs
+++ b/crates/payload/basic/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -378,6 +378,7 @@ where
                 best_payload,
             };
             let result = builder.try_build(args);
+            debug!(target: "payload_builder", "result: {:?}", result);
             let _ = tx.send(result);
         }));
 
@@ -413,6 +414,7 @@ where
                 this.spawn_build_job();
             }
         }
+        debug!(target: "payload_builder", "pending block: {:?}", this.pending_block);
 
         // poll the pending block
         if let Some(mut fut) = this.pending_block.take() {
@@ -441,6 +443,7 @@ where
                     this.metrics.inc_failed_payload_builds();
                 }
                 Poll::Pending => {
+                    debug!(target: "payload_builder", "awaiting payload build job");
                     this.pending_block = Some(fut);
                 }
             }
diff --git a/crates/payload/builder-primitives/src/lib.rs b/crates/payload/builder-primitives/src/lib.rs
index af7ad736d..780e7291e 100644
--- a/crates/payload/builder-primitives/src/lib.rs
+++ b/crates/payload/builder-primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/payload/builder/src/lib.rs b/crates/payload/builder/src/lib.rs
index b6191ea7f..2b0cf0357 100644
--- a/crates/payload/builder/src/lib.rs
+++ b/crates/payload/builder/src/lib.rs
@@ -98,7 +98,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/payload/builder/src/service.rs b/crates/payload/builder/src/service.rs
index af11ba75c..fe41c5a46 100644
--- a/crates/payload/builder/src/service.rs
+++ b/crates/payload/builder/src/service.rs
@@ -277,6 +277,7 @@ where
 
     /// Returns the best payload for the given identifier that has been built so far.
     fn best_payload(&self, id: PayloadId) -> Option<Result<T::BuiltPayload, PayloadBuilderError>> {
+        debug!(%id, "getting best payload, payload jobs count: {}", self.payload_jobs.len());
         let res = self
             .payload_jobs
             .iter()
diff --git a/crates/payload/primitives/Cargo.toml b/crates/payload/primitives/Cargo.toml
index d4070b468..13d6ce566 100644
--- a/crates/payload/primitives/Cargo.toml
+++ b/crates/payload/primitives/Cargo.toml
@@ -32,4 +32,4 @@ thiserror.workspace = true
 tokio = { workspace = true, default-features = false, features = ["sync"] }
 
 [features]
-op = ["dep:op-alloy-rpc-types-engine"]
\ No newline at end of file
+op = ["dep:op-alloy-rpc-types-engine"]
diff --git a/crates/payload/primitives/src/lib.rs b/crates/payload/primitives/src/lib.rs
index 523e6fb05..7b1b1daf3 100644
--- a/crates/payload/primitives/src/lib.rs
+++ b/crates/payload/primitives/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/payload/util/src/lib.rs b/crates/payload/util/src/lib.rs
index 5ad0e8350..8fe997861 100644
--- a/crates/payload/util/src/lib.rs
+++ b/crates/payload/util/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/payload/validator/src/lib.rs b/crates/payload/validator/src/lib.rs
index 57772de25..301b0d879 100644
--- a/crates/payload/validator/src/lib.rs
+++ b/crates/payload/validator/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/primitives-traits/src/constants/mod.rs b/crates/primitives-traits/src/constants/mod.rs
index e927ed3a7..9af3feb9d 100644
--- a/crates/primitives-traits/src/constants/mod.rs
+++ b/crates/primitives-traits/src/constants/mod.rs
@@ -10,6 +10,9 @@ pub const RETH_CLIENT_VERSION: &str = concat!("reth/v", env!("CARGO_PKG_VERSION"
 /// Minimum gas limit allowed for transactions.
 pub const MINIMUM_GAS_LIMIT: u64 = 5000;
 
+/// The bound divisor of the gas limit, used in update calculations.
+pub const GAS_LIMIT_BOUND_DIVISOR: u64 = 1024;
+
 /// The number of blocks to unwind during a reorg that already became a part of canonical chain.
 ///
 /// In reality, the node can end up in this particular situation very rarely. It would happen only
diff --git a/crates/primitives-traits/src/lib.rs b/crates/primitives-traits/src/lib.rs
index 74d10fc3c..cc957645c 100644
--- a/crates/primitives-traits/src/lib.rs
+++ b/crates/primitives-traits/src/lib.rs
@@ -20,7 +20,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/primitives-traits/src/size.rs b/crates/primitives-traits/src/size.rs
index c9706aa65..abc0c8ee2 100644
--- a/crates/primitives-traits/src/size.rs
+++ b/crates/primitives-traits/src/size.rs
@@ -1,4 +1,6 @@
-use alloy_consensus::{Header, TxEip1559, TxEip2930, TxEip4844, TxEip7702, TxLegacy, TxType};
+use alloy_consensus::{
+    Header, TxEip1559, TxEip2930, TxEip4844, TxEip7702, TxLegacy, TxSeismic, TxType,
+};
 use alloy_primitives::{PrimitiveSignature as Signature, TxHash};
 use revm_primitives::Log;
 
@@ -45,7 +47,7 @@ macro_rules! impl_in_mem_size {
     };
 }
 
-impl_in_mem_size!(Header, TxLegacy, TxEip2930, TxEip1559, TxEip7702, TxEip4844);
+impl_in_mem_size!(Header, TxLegacy, TxEip2930, TxEip1559, TxEip7702, TxEip4844, TxSeismic);
 
 #[cfg(feature = "op")]
 impl_in_mem_size_size_of!(op_alloy_consensus::OpTxType);
diff --git a/crates/primitives-traits/src/storage.rs b/crates/primitives-traits/src/storage.rs
index c6b9b1e11..62be09ada 100644
--- a/crates/primitives-traits/src/storage.rs
+++ b/crates/primitives-traits/src/storage.rs
@@ -1,4 +1,5 @@
 use alloy_primitives::{B256, U256};
+use revm_primitives::FlaggedStorage;
 
 /// Account storage entry.
 ///
@@ -12,18 +13,37 @@ pub struct StorageEntry {
     pub key: B256,
     /// Value on storage key.
     pub value: U256,
+    /// Indicates whether the value is private
+    pub is_private: bool,
 }
 
 impl StorageEntry {
     /// Create a new `StorageEntry` with given key and value.
-    pub const fn new(key: B256, value: U256) -> Self {
-        Self { key, value }
+    pub const fn new(key: B256, value: U256, is_private: bool) -> Self {
+        Self { key, value, is_private }
+    }
+
+    /// Convert the storage entry to a flagged storage entry.
+    pub const fn to_flagged_storage(self) -> FlaggedStorage {
+        FlaggedStorage { value: self.value, is_private: self.is_private }
+    }
+}
+
+impl From<(B256, U256, bool)> for StorageEntry {
+    fn from((key, value, is_private): (B256, U256, bool)) -> Self {
+        Self { key, value, is_private }
+    }
+}
+
+impl From<(B256, (U256, bool))> for StorageEntry {
+    fn from((key, (value, is_private)): (B256, (U256, bool))) -> Self {
+        Self { key, value, is_private }
     }
 }
 
-impl From<(B256, U256)> for StorageEntry {
-    fn from((key, value): (B256, U256)) -> Self {
-        Self { key, value }
+impl From<StorageEntry> for FlaggedStorage {
+    fn from(entry: StorageEntry) -> Self {
+        Self { value: entry.value, is_private: entry.is_private }
     }
 }
 
@@ -38,12 +58,14 @@ impl reth_codecs::Compact for StorageEntry {
     {
         // for now put full bytes and later compress it.
         buf.put_slice(&self.key[..]);
-        self.value.to_compact(buf) + 32
+        buf.put_u8(self.is_private as u8);
+        self.value.to_compact(buf) + 32 + 1
     }
 
     fn from_compact(buf: &[u8], len: usize) -> (Self, &[u8]) {
         let key = B256::from_slice(&buf[..32]);
-        let (value, out) = U256::from_compact(&buf[32..], len - 32);
-        (Self { key, value }, out)
+        let is_private = buf[32] != 0;
+        let (value, out) = U256::from_compact(&buf[33..], len - 33);
+        (Self { key, value, is_private }, out)
     }
 }
diff --git a/crates/primitives-traits/src/transaction/signed.rs b/crates/primitives-traits/src/transaction/signed.rs
index 4bc9a8418..06ae0047e 100644
--- a/crates/primitives-traits/src/transaction/signed.rs
+++ b/crates/primitives-traits/src/transaction/signed.rs
@@ -2,7 +2,10 @@
 
 use crate::{FillTxEnv, InMemorySize, MaybeCompact, MaybeSerde};
 use alloc::{fmt, vec::Vec};
-use alloy_eips::eip2718::{Decodable2718, Encodable2718};
+use alloy_eips::{
+    eip2718::{Decodable2718, Encodable2718},
+    eip712::Decodable712,
+};
 use alloy_primitives::{keccak256, Address, PrimitiveSignature, TxHash, B256};
 use core::hash::Hash;
 
@@ -26,6 +29,7 @@ pub trait SignedTransaction:
     + alloy_rlp::Decodable
     + Encodable2718
     + Decodable2718
+    + Decodable712
     + alloy_consensus::Transaction
     + MaybeSerde
     + InMemorySize
diff --git a/crates/primitives/Cargo.toml b/crates/primitives/Cargo.toml
index 712abd652..657514a03 100644
--- a/crates/primitives/Cargo.toml
+++ b/crates/primitives/Cargo.toml
@@ -18,6 +18,8 @@ reth-ethereum-forks.workspace = true
 reth-static-file-types.workspace = true
 revm-primitives = { workspace = true, features = ["serde"] }
 reth-codecs = { workspace = true, optional = true }
+# reth-optimism-chainspec = { workspace = true, optional = true }
+reth-tracing.workspace = true
 reth-zstd-compressors = { workspace = true, optional = true }
 
 # ethereum
@@ -26,6 +28,7 @@ alloy-network = { workspace = true, optional = true }
 alloy-primitives = { workspace = true, features = ["rand", "rlp"] }
 alloy-rlp = { workspace = true, features = ["arrayvec"] }
 alloy-rpc-types = { workspace = true, optional = true }
+alloy-rpc-types-eth = { workspace = true, features = ["serde"] }
 alloy-serde = { workspace = true, optional = true }
 alloy-eips = { workspace = true, features = ["serde"] }
 alloy-trie = { workspace = true, features = ["serde"] }
@@ -156,11 +159,14 @@ optimism = [
 	"dep:op-alloy-consensus",
 	"reth-codecs?/op",
 	"revm-primitives/optimism",
+	# Was originally not here, but in alloy-compat
+	"dep:op-alloy-rpc-types",
 ]
 alloy-compat = [
 	"dep:alloy-rpc-types",
 	"dep:alloy-serde",
-	"dep:op-alloy-rpc-types",
+	# Removed from here for malachite-reth
+	# "dep:op-alloy-rpc-types",
     "dep:alloy-network",
 ]
 test-utils = [
diff --git a/crates/primitives/src/alloy_compat.rs b/crates/primitives/src/alloy_compat.rs
index e8f6b53c9..32457d565 100644
--- a/crates/primitives/src/alloy_compat.rs
+++ b/crates/primitives/src/alloy_compat.rs
@@ -5,6 +5,7 @@ use alloc::{string::ToString, vec::Vec};
 use alloy_consensus::{constants::EMPTY_TRANSACTIONS, Header, TxEnvelope};
 use alloy_network::{AnyHeader, AnyRpcBlock, AnyRpcTransaction, AnyTxEnvelope};
 use alloy_serde::WithOtherFields;
+#[cfg(feature = "optimism")]
 use op_alloy_rpc_types as _;
 
 impl TryFrom<AnyRpcBlock> for Block {
diff --git a/crates/primitives/src/lib.rs b/crates/primitives/src/lib.rs
index ab796d734..487c9b3a6 100644
--- a/crates/primitives/src/lib.rs
+++ b/crates/primitives/src/lib.rs
@@ -13,7 +13,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/primitives/src/transaction/compat.rs b/crates/primitives/src/transaction/compat.rs
index 883c89c45..b425a8860 100644
--- a/crates/primitives/src/transaction/compat.rs
+++ b/crates/primitives/src/transaction/compat.rs
@@ -2,6 +2,7 @@ use crate::{Transaction, TransactionSigned};
 use alloy_primitives::{Address, TxKind, U256};
 #[cfg(feature = "optimism")]
 use op_alloy_consensus::DepositTransaction;
+use reth_tracing::tracing::*;
 use revm_primitives::{AuthorizationList, TxEnv};
 
 /// Implements behaviour to fill a [`TxEnv`] from another transaction.
@@ -30,6 +31,7 @@ impl FillTxEnv for TransactionSigned {
                 tx_env.blob_hashes.clear();
                 tx_env.max_fee_per_blob_gas.take();
                 tx_env.authorization_list = None;
+                tx_env.tx_hash = self.hash();
             }
             Transaction::Eip2930(tx) => {
                 tx_env.gas_limit = tx.gas_limit;
@@ -44,6 +46,7 @@ impl FillTxEnv for TransactionSigned {
                 tx_env.blob_hashes.clear();
                 tx_env.max_fee_per_blob_gas.take();
                 tx_env.authorization_list = None;
+                tx_env.tx_hash = self.hash();
             }
             Transaction::Eip1559(tx) => {
                 tx_env.gas_limit = tx.gas_limit;
@@ -58,6 +61,7 @@ impl FillTxEnv for TransactionSigned {
                 tx_env.blob_hashes.clear();
                 tx_env.max_fee_per_blob_gas.take();
                 tx_env.authorization_list = None;
+                tx_env.tx_hash = self.hash();
             }
             Transaction::Eip4844(tx) => {
                 tx_env.gas_limit = tx.gas_limit;
@@ -72,6 +76,7 @@ impl FillTxEnv for TransactionSigned {
                 tx_env.blob_hashes.clone_from(&tx.blob_versioned_hashes);
                 tx_env.max_fee_per_blob_gas = Some(U256::from(tx.max_fee_per_blob_gas));
                 tx_env.authorization_list = None;
+                tx_env.tx_hash = self.hash();
             }
             Transaction::Eip7702(tx) => {
                 tx_env.gas_limit = tx.gas_limit;
@@ -87,6 +92,7 @@ impl FillTxEnv for TransactionSigned {
                 tx_env.max_fee_per_blob_gas.take();
                 tx_env.authorization_list =
                     Some(AuthorizationList::Signed(tx.authorization_list.clone()));
+                tx_env.tx_hash = self.hash();
             }
             #[cfg(feature = "optimism")]
             Transaction::Deposit(tx) => {
@@ -109,6 +115,11 @@ impl FillTxEnv for TransactionSigned {
                 };
                 return;
             }
+            Transaction::Seismic(_tx) => {
+                // implementation is in EthEvmConfig to avoid changing FillTxEnv trait
+                error!(target: "reth::fill_tx_env", "Seismic transaction not filled");
+                return
+            }
         }
 
         #[cfg(feature = "optimism")]
@@ -120,5 +131,7 @@ impl FillTxEnv for TransactionSigned {
                 enveloped_tx: Some(envelope.into()),
             }
         }
+        debug!(target: "reth::fill_tx_env", "{} {}", (self.transaction.tx_type()), "Tranasction type");
+        debug!(target: "reth::fill_tx_env", ?tx_env, "Filled transaction environment");
     }
 }
diff --git a/crates/primitives/src/transaction/mod.rs b/crates/primitives/src/transaction/mod.rs
index 4431d1f9c..9c4693335 100644
--- a/crates/primitives/src/transaction/mod.rs
+++ b/crates/primitives/src/transaction/mod.rs
@@ -2,18 +2,21 @@
 
 use alloc::vec::Vec;
 use alloy_consensus::{
-    transaction::RlpEcdsaTx, SignableTransaction, Signed, Transaction as _, TxEip1559, TxEip2930,
-    TxEip4844, TxEip4844Variant, TxEip7702, TxLegacy, Typed2718, TypedTransaction,
+    transaction::{RlpEcdsaTx, TxSeismicElements},
+    SignableTransaction, Signed, Transaction as _, TxEip1559, TxEip2930, TxEip4844,
+    TxEip4844Variant, TxEip7702, TxLegacy, TxSeismic, Typed2718, TypedTransaction,
 };
 use alloy_eips::{
     eip2718::{Decodable2718, Eip2718Error, Eip2718Result, Encodable2718},
     eip2930::AccessList,
+    eip712::{Decodable712, Eip712Result, TypedDataRequest},
     eip7702::SignedAuthorization,
 };
 use alloy_primitives::{
     keccak256, Address, Bytes, ChainId, PrimitiveSignature as Signature, TxHash, TxKind, B256, U256,
 };
 use alloy_rlp::{Decodable, Encodable, Error as RlpError, Header};
+use alloy_rpc_types_eth::TransactionRequest;
 use core::hash::{Hash, Hasher};
 use derive_more::{AsRef, Deref};
 use once_cell as _;
@@ -25,6 +28,7 @@ use op_alloy_consensus::DepositTransaction;
 use op_alloy_consensus::TxDeposit;
 use rayon::prelude::{IntoParallelIterator, ParallelIterator};
 use reth_primitives_traits::{InMemorySize, SignedTransaction};
+use reth_tracing::tracing::*;
 use revm_primitives::{AuthorizationList, TxEnv};
 use serde::{Deserialize, Serialize};
 use signature::decode_with_eip155_chain_id;
@@ -125,6 +129,8 @@ pub enum Transaction {
     /// Optimism deposit transaction.
     #[cfg(feature = "optimism")]
     Deposit(TxDeposit),
+    /// Seismic transaction
+    Seismic(TxSeismic),
 }
 
 #[cfg(feature = "optimism")]
@@ -177,6 +183,10 @@ impl<'a> arbitrary::Arbitrary<'a> for Transaction {
                 let tx = TxEip7702::arbitrary(u)?;
                 Self::Eip7702(tx)
             }
+            TxType::Seismic => {
+                let tx = TxSeismic::arbitrary(u)?;
+                Self::Seismic(tx)
+            }
             #[cfg(feature = "optimism")]
             TxType::Deposit => {
                 let tx = TxDeposit::arbitrary(u)?;
@@ -201,6 +211,7 @@ impl Typed2718 for Transaction {
             Self::Eip1559(tx) => tx.ty(),
             Self::Eip4844(tx) => tx.ty(),
             Self::Eip7702(tx) => tx.ty(),
+            Self::Seismic(tx) => tx.ty(),
             #[cfg(feature = "optimism")]
             Self::Deposit(tx) => tx.ty(),
         }
@@ -219,6 +230,7 @@ impl Transaction {
             Self::Eip1559(tx) => tx.signature_hash(),
             Self::Eip4844(tx) => tx.signature_hash(),
             Self::Eip7702(tx) => tx.signature_hash(),
+            Self::Seismic(tx) => tx.signature_hash(),
             #[cfg(feature = "optimism")]
             Self::Deposit(_) => B256::ZERO,
         }
@@ -229,6 +241,7 @@ impl Transaction {
         match self {
             Self::Legacy(TxLegacy { chain_id: ref mut c, .. }) => *c = Some(chain_id),
             Self::Eip2930(TxEip2930 { chain_id: ref mut c, .. }) |
+            Self::Seismic(TxSeismic { chain_id: ref mut c, .. }) |
             Self::Eip1559(TxEip1559 { chain_id: ref mut c, .. }) |
             Self::Eip4844(TxEip4844 { chain_id: ref mut c, .. }) |
             Self::Eip7702(TxEip7702 { chain_id: ref mut c, .. }) => *c = chain_id,
@@ -245,6 +258,7 @@ impl Transaction {
             Self::Eip1559(_) => TxType::Eip1559,
             Self::Eip4844(_) => TxType::Eip4844,
             Self::Eip7702(_) => TxType::Eip7702,
+            Self::Seismic(_) => TxType::Seismic,
             #[cfg(feature = "optimism")]
             Self::Deposit(_) => TxType::Deposit,
         }
@@ -299,6 +313,7 @@ impl Transaction {
             Self::Eip1559(tx) => tx.encode_for_signing(out),
             Self::Eip4844(tx) => tx.encode_for_signing(out),
             Self::Eip7702(tx) => tx.encode_for_signing(out),
+            Self::Seismic(tx) => tx.encode_for_signing(out),
             #[cfg(feature = "optimism")]
             Self::Deposit(_) => {}
         }
@@ -321,6 +336,9 @@ impl Transaction {
             Self::Eip7702(set_code_tx) => {
                 set_code_tx.eip2718_encode(signature, out);
             }
+            Self::Seismic(seismic_tx) => {
+                seismic_tx.eip2718_encode(signature, out);
+            }
             #[cfg(feature = "optimism")]
             Self::Deposit(deposit_tx) => deposit_tx.encode_2718(out),
         }
@@ -330,6 +348,7 @@ impl Transaction {
     pub fn set_gas_limit(&mut self, gas_limit: u64) {
         match self {
             Self::Legacy(tx) => tx.gas_limit = gas_limit,
+            Self::Seismic(tx) => tx.gas_limit = gas_limit,
             Self::Eip2930(tx) => tx.gas_limit = gas_limit,
             Self::Eip1559(tx) => tx.gas_limit = gas_limit,
             Self::Eip4844(tx) => tx.gas_limit = gas_limit,
@@ -343,6 +362,7 @@ impl Transaction {
     pub fn set_nonce(&mut self, nonce: u64) {
         match self {
             Self::Legacy(tx) => tx.nonce = nonce,
+            Self::Seismic(tx) => tx.nonce = nonce,
             Self::Eip2930(tx) => tx.nonce = nonce,
             Self::Eip1559(tx) => tx.nonce = nonce,
             Self::Eip4844(tx) => tx.nonce = nonce,
@@ -356,6 +376,7 @@ impl Transaction {
     pub fn set_value(&mut self, value: U256) {
         match self {
             Self::Legacy(tx) => tx.value = value,
+            Self::Seismic(tx) => tx.value = value,
             Self::Eip2930(tx) => tx.value = value,
             Self::Eip1559(tx) => tx.value = value,
             Self::Eip4844(tx) => tx.value = value,
@@ -369,6 +390,7 @@ impl Transaction {
     pub fn set_input(&mut self, input: Bytes) {
         match self {
             Self::Legacy(tx) => tx.input = input,
+            Self::Seismic(tx) => tx.input = input,
             Self::Eip2930(tx) => tx.input = input,
             Self::Eip1559(tx) => tx.input = input,
             Self::Eip4844(tx) => tx.input = input,
@@ -455,6 +477,7 @@ impl InMemorySize for Transaction {
     fn size(&self) -> usize {
         match self {
             Self::Legacy(tx) => tx.size(),
+            Self::Seismic(tx) => tx.size(),
             Self::Eip2930(tx) => tx.size(),
             Self::Eip1559(tx) => tx.size(),
             Self::Eip4844(tx) => tx.size(),
@@ -490,6 +513,9 @@ impl reth_codecs::Compact for Transaction {
             Self::Eip7702(tx) => {
                 tx.to_compact(buf);
             }
+            Self::Seismic(tx) => {
+                tx.to_compact(buf);
+            }
             #[cfg(feature = "optimism")]
             Self::Deposit(tx) => {
                 tx.to_compact(buf);
@@ -538,6 +564,10 @@ impl reth_codecs::Compact for Transaction {
                         let (tx, buf) = TxEip7702::from_compact(buf, buf.len());
                         (Self::Eip7702(tx), buf)
                     }
+                    alloy_consensus::constants::SEISMIC_TX_TYPE_ID => {
+                        let (tx, buf) = TxSeismic::from_compact(buf, buf.len());
+                        (Self::Seismic(tx), buf)
+                    }
                     #[cfg(feature = "optimism")]
                     op_alloy_consensus::DEPOSIT_TX_TYPE_ID => {
                         let (tx, buf) = TxDeposit::from_compact(buf, buf.len());
@@ -563,6 +593,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn chain_id(&self) -> Option<ChainId> {
         match self {
             Self::Legacy(tx) => tx.chain_id(),
+            Self::Seismic(tx) => tx.chain_id(),
             Self::Eip2930(tx) => tx.chain_id(),
             Self::Eip1559(tx) => tx.chain_id(),
             Self::Eip4844(tx) => tx.chain_id(),
@@ -575,6 +606,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn nonce(&self) -> u64 {
         match self {
             Self::Legacy(tx) => tx.nonce(),
+            Self::Seismic(tx) => tx.nonce(),
             Self::Eip2930(tx) => tx.nonce(),
             Self::Eip1559(tx) => tx.nonce(),
             Self::Eip4844(tx) => tx.nonce(),
@@ -587,6 +619,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn gas_limit(&self) -> u64 {
         match self {
             Self::Legacy(tx) => tx.gas_limit(),
+            Self::Seismic(tx) => tx.gas_limit(),
             Self::Eip2930(tx) => tx.gas_limit(),
             Self::Eip1559(tx) => tx.gas_limit(),
             Self::Eip4844(tx) => tx.gas_limit(),
@@ -599,6 +632,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn gas_price(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.gas_price(),
+            Self::Seismic(tx) => tx.gas_price(),
             Self::Eip2930(tx) => tx.gas_price(),
             Self::Eip1559(tx) => tx.gas_price(),
             Self::Eip4844(tx) => tx.gas_price(),
@@ -611,6 +645,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn max_fee_per_gas(&self) -> u128 {
         match self {
             Self::Legacy(tx) => tx.max_fee_per_gas(),
+            Self::Seismic(tx) => tx.max_fee_per_gas(),
             Self::Eip2930(tx) => tx.max_fee_per_gas(),
             Self::Eip1559(tx) => tx.max_fee_per_gas(),
             Self::Eip4844(tx) => tx.max_fee_per_gas(),
@@ -623,6 +658,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn max_priority_fee_per_gas(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.max_priority_fee_per_gas(),
+            Self::Seismic(tx) => tx.max_priority_fee_per_gas(),
             Self::Eip2930(tx) => tx.max_priority_fee_per_gas(),
             Self::Eip1559(tx) => tx.max_priority_fee_per_gas(),
             Self::Eip4844(tx) => tx.max_priority_fee_per_gas(),
@@ -635,6 +671,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn max_fee_per_blob_gas(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.max_fee_per_blob_gas(),
+            Self::Seismic(tx) => tx.max_fee_per_blob_gas(),
             Self::Eip2930(tx) => tx.max_fee_per_blob_gas(),
             Self::Eip1559(tx) => tx.max_fee_per_blob_gas(),
             Self::Eip4844(tx) => tx.max_fee_per_blob_gas(),
@@ -647,6 +684,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn priority_fee_or_price(&self) -> u128 {
         match self {
             Self::Legacy(tx) => tx.priority_fee_or_price(),
+            Self::Seismic(tx) => tx.priority_fee_or_price(),
             Self::Eip2930(tx) => tx.priority_fee_or_price(),
             Self::Eip1559(tx) => tx.priority_fee_or_price(),
             Self::Eip4844(tx) => tx.priority_fee_or_price(),
@@ -659,6 +697,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn effective_gas_price(&self, base_fee: Option<u64>) -> u128 {
         match self {
             Self::Legacy(tx) => tx.effective_gas_price(base_fee),
+            Self::Seismic(tx) => tx.effective_gas_price(base_fee),
             Self::Eip2930(tx) => tx.effective_gas_price(base_fee),
             Self::Eip1559(tx) => tx.effective_gas_price(base_fee),
             Self::Eip4844(tx) => tx.effective_gas_price(base_fee),
@@ -670,7 +709,7 @@ impl alloy_consensus::Transaction for Transaction {
 
     fn is_dynamic_fee(&self) -> bool {
         match self {
-            Self::Legacy(_) | Self::Eip2930(_) => false,
+            Self::Legacy(_) | Self::Eip2930(_) | Self::Seismic(_) => false,
             Self::Eip1559(_) | Self::Eip4844(_) | Self::Eip7702(_) => true,
             #[cfg(feature = "optimism")]
             Self::Deposit(_) => false,
@@ -680,6 +719,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn kind(&self) -> TxKind {
         match self {
             Self::Legacy(tx) => tx.kind(),
+            Self::Seismic(tx) => tx.kind(),
             Self::Eip2930(tx) => tx.kind(),
             Self::Eip1559(tx) => tx.kind(),
             Self::Eip4844(tx) => tx.kind(),
@@ -692,6 +732,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn is_create(&self) -> bool {
         match self {
             Self::Legacy(tx) => tx.is_create(),
+            Self::Seismic(tx) => tx.is_create(),
             Self::Eip2930(tx) => tx.is_create(),
             Self::Eip1559(tx) => tx.is_create(),
             Self::Eip4844(tx) => tx.is_create(),
@@ -704,6 +745,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn value(&self) -> U256 {
         match self {
             Self::Legacy(tx) => tx.value(),
+            Self::Seismic(tx) => tx.value(),
             Self::Eip2930(tx) => tx.value(),
             Self::Eip1559(tx) => tx.value(),
             Self::Eip4844(tx) => tx.value(),
@@ -716,6 +758,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn input(&self) -> &Bytes {
         match self {
             Self::Legacy(tx) => tx.input(),
+            Self::Seismic(tx) => tx.input(),
             Self::Eip2930(tx) => tx.input(),
             Self::Eip1559(tx) => tx.input(),
             Self::Eip4844(tx) => tx.input(),
@@ -728,6 +771,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn access_list(&self) -> Option<&AccessList> {
         match self {
             Self::Legacy(tx) => tx.access_list(),
+            Self::Seismic(tx) => tx.access_list(),
             Self::Eip2930(tx) => tx.access_list(),
             Self::Eip1559(tx) => tx.access_list(),
             Self::Eip4844(tx) => tx.access_list(),
@@ -740,6 +784,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn blob_versioned_hashes(&self) -> Option<&[B256]> {
         match self {
             Self::Legacy(tx) => tx.blob_versioned_hashes(),
+            Self::Seismic(tx) => tx.blob_versioned_hashes(),
             Self::Eip2930(tx) => tx.blob_versioned_hashes(),
             Self::Eip1559(tx) => tx.blob_versioned_hashes(),
             Self::Eip4844(tx) => tx.blob_versioned_hashes(),
@@ -752,6 +797,7 @@ impl alloy_consensus::Transaction for Transaction {
     fn authorization_list(&self) -> Option<&[SignedAuthorization]> {
         match self {
             Self::Legacy(tx) => tx.authorization_list(),
+            Self::Seismic(tx) => tx.authorization_list(),
             Self::Eip2930(tx) => tx.authorization_list(),
             Self::Eip1559(tx) => tx.authorization_list(),
             Self::Eip4844(tx) => tx.authorization_list(),
@@ -760,6 +806,13 @@ impl alloy_consensus::Transaction for Transaction {
             Self::Deposit(tx) => tx.authorization_list(),
         }
     }
+
+    fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        match self {
+            Self::Seismic(tx) => tx.seismic_elements(),
+            _ => None,
+        }
+    }
 }
 
 impl From<TxEip4844Variant> for Transaction {
@@ -775,6 +828,7 @@ impl From<TypedTransaction> for Transaction {
     fn from(value: TypedTransaction) -> Self {
         match value {
             TypedTransaction::Legacy(tx) => tx.into(),
+            TypedTransaction::Seismic(tx) => tx.into(),
             TypedTransaction::Eip2930(tx) => tx.into(),
             TypedTransaction::Eip1559(tx) => tx.into(),
             TypedTransaction::Eip4844(tx) => tx.into(),
@@ -875,6 +929,9 @@ impl TransactionSigned {
             Self { transaction: Transaction::Eip7702(tx), signature, .. } => {
                 Ok(PooledTransactionsElement::Eip7702(Signed::new_unchecked(tx, signature, hash)))
             }
+            Self { transaction: Transaction::Seismic(tx), signature, .. } => {
+                Ok(PooledTransactionsElement::Seismic(Signed::new_unchecked(tx, signature, hash)))
+            }
             // Not supported because missing blob sidecar
             tx @ Self { transaction: Transaction::Eip4844(_), .. } => Err(tx),
             #[cfg(feature = "optimism")]
@@ -958,7 +1015,30 @@ impl TransactionSigned {
     /// Calculate transaction hash, eip2728 transaction does not contain rlp header and start with
     /// tx type.
     pub fn recalculate_hash(&self) -> B256 {
-        keccak256(self.encoded_2718())
+        match &self.transaction {
+            Transaction::Legacy(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            Transaction::Eip2930(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            Transaction::Eip1559(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            Transaction::Eip4844(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            Transaction::Eip7702(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            Transaction::Seismic(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+            #[cfg(feature = "optimism")]
+            Transaction::Deposit(tx) => {
+                *SignableTransaction::<Signature>::into_signed(tx.clone(), self.signature).hash()
+            }
+        }
     }
 
     /// Splits the transaction into parts.
@@ -1138,6 +1218,11 @@ impl reth_primitives_traits::FillTxEnv for TransactionSigned {
                 tx_env.authorization_list =
                     Some(AuthorizationList::Signed(tx.authorization_list.clone()));
             }
+            Transaction::Seismic(_tx) => {
+                // implementation is in EthEvmConfig to avoid changing FillTxEnv trait
+                error!(target: "reth::fill_tx_env", "Seismic transaction not filled");
+                return
+            }
             #[cfg(feature = "optimism")]
             Transaction::Deposit(_) => {}
         }
@@ -1220,6 +1305,13 @@ impl alloy_consensus::Transaction for TransactionSigned {
     fn authorization_list(&self) -> Option<&[SignedAuthorization]> {
         self.deref().authorization_list()
     }
+
+    fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        match &self.transaction {
+            Transaction::Seismic(tx) => tx.seismic_elements(),
+            _ => None,
+        }
+    }
 }
 
 impl From<RecoveredTx> for TransactionSigned {
@@ -1303,6 +1395,7 @@ impl Encodable2718 for TransactionSigned {
             Transaction::Eip7702(set_code_tx) => {
                 set_code_tx.eip2718_encoded_length(&self.signature)
             }
+            Transaction::Seismic(seismic_tx) => seismic_tx.eip2718_encoded_length(&self.signature),
             #[cfg(feature = "optimism")]
             Transaction::Deposit(deposit_tx) => deposit_tx.eip2718_encoded_length(),
         }
@@ -1319,6 +1412,7 @@ impl Encodable2718 for TransactionSigned {
 
 impl Decodable2718 for TransactionSigned {
     fn typed_decode(ty: u8, buf: &mut &[u8]) -> Eip2718Result<Self> {
+        debug!("Decoding transaction with type: {}", ty);
         match ty.try_into().map_err(|_| Eip2718Error::UnexpectedType(ty))? {
             TxType::Legacy => Err(Eip2718Error::UnexpectedType(0)),
             TxType::Eip2930 => {
@@ -1337,6 +1431,10 @@ impl Decodable2718 for TransactionSigned {
                 let (tx, signature, hash) = TxEip4844::rlp_decode_signed(buf)?.into_parts();
                 Ok(Self { transaction: Transaction::Eip4844(tx), signature, hash: hash.into() })
             }
+            TxType::Seismic => {
+                let (tx, signature, hash) = TxSeismic::rlp_decode_signed(buf)?.into_parts();
+                Ok(Self { transaction: Transaction::Seismic(tx), signature, hash: hash.into() })
+            }
             #[cfg(feature = "optimism")]
             TxType::Deposit => Ok(Self::new_unhashed(
                 Transaction::Deposit(TxDeposit::rlp_decode(buf)?),
@@ -1350,6 +1448,15 @@ impl Decodable2718 for TransactionSigned {
     }
 }
 
+impl Decodable712 for TransactionSigned {
+    fn decode_712(typed_data: &TypedDataRequest) -> Eip712Result<Self> {
+        let (tx, signature, hash) = TxSeismic::eip712_decode(&typed_data.data)?
+            .into_signed(typed_data.signature)
+            .into_parts();
+        Ok(Self { transaction: Transaction::Seismic(tx), signature, hash: hash.into() })
+    }
+}
+
 #[cfg(any(test, feature = "reth-codec"))]
 impl reth_codecs::Compact for TransactionSigned {
     fn to_compact<B>(&self, buf: &mut B) -> usize
@@ -1443,7 +1550,15 @@ macro_rules! impl_from_signed {
     };
 }
 
-impl_from_signed!(TxLegacy, TxEip2930, TxEip1559, TxEip7702, TxEip4844, TypedTransaction);
+impl_from_signed!(
+    TxLegacy,
+    TxEip2930,
+    TxEip1559,
+    TxEip7702,
+    TxEip4844,
+    TypedTransaction,
+    TxSeismic
+);
 
 impl From<Signed<Transaction>> for TransactionSigned {
     fn from(value: Signed<Transaction>) -> Self {
@@ -1485,7 +1600,24 @@ impl<'a> arbitrary::Arbitrary<'a> for TransactionSigned {
 
         #[cfg(feature = "optimism")]
         let signature = if transaction.is_deposit() { TxDeposit::signature() } else { signature };
-        Ok(Self::new_unhashed(transaction, signature))
+        let tx_signed = Self::new_unhashed(transaction, signature);
+        let hash = tx_signed.hash();
+        Ok(Self::new(tx_signed.transaction, tx_signed.signature, hash))
+    }
+}
+
+impl From<TransactionSigned> for TransactionRequest {
+    fn from(tx: TransactionSigned) -> Self {
+        match tx.transaction {
+            Transaction::Legacy(tx) => tx.into(),
+            Transaction::Eip2930(tx) => tx.into(),
+            Transaction::Eip1559(tx) => tx.into(),
+            Transaction::Eip4844(tx) => tx.into(),
+            Transaction::Eip7702(tx) => tx.into(),
+            Transaction::Seismic(tx) => tx.into(),
+            #[cfg(feature = "optimism")]
+            Transaction::Deposit(tx) => tx.into(),
+        }
     }
 }
 
@@ -1626,7 +1758,7 @@ impl<T> SignedTransactionIntoRecoveredExt for T where T: SignedTransaction {}
 pub mod serde_bincode_compat {
     use alloc::borrow::Cow;
     use alloy_consensus::{
-        transaction::serde_bincode_compat::{TxEip1559, TxEip2930, TxEip7702, TxLegacy},
+        transaction::serde_bincode_compat::{TxEip1559, TxEip2930, TxEip7702, TxLegacy, TxSeismic},
         TxEip4844,
     };
     use alloy_primitives::{PrimitiveSignature as Signature, TxHash};
@@ -1652,6 +1784,7 @@ pub mod serde_bincode_compat {
     #[allow(missing_docs)]
     pub enum Transaction<'a> {
         Legacy(TxLegacy<'a>),
+        Seismic(TxSeismic<'a>),
         Eip2930(TxEip2930<'a>),
         Eip1559(TxEip1559<'a>),
         Eip4844(Cow<'a, TxEip4844>),
@@ -1664,6 +1797,7 @@ pub mod serde_bincode_compat {
         fn from(value: &'a super::Transaction) -> Self {
             match value {
                 super::Transaction::Legacy(tx) => Self::Legacy(TxLegacy::from(tx)),
+                super::Transaction::Seismic(tx) => Self::Seismic(TxSeismic::from(tx)),
                 super::Transaction::Eip2930(tx) => Self::Eip2930(TxEip2930::from(tx)),
                 super::Transaction::Eip1559(tx) => Self::Eip1559(TxEip1559::from(tx)),
                 super::Transaction::Eip4844(tx) => Self::Eip4844(Cow::Borrowed(tx)),
@@ -1684,6 +1818,7 @@ pub mod serde_bincode_compat {
                 Transaction::Eip1559(tx) => Self::Eip1559(tx.into()),
                 Transaction::Eip4844(tx) => Self::Eip4844(tx.into_owned()),
                 Transaction::Eip7702(tx) => Self::Eip7702(tx.into()),
+                Transaction::Seismic(tx) => Self::Seismic(tx.into()),
                 #[cfg(feature = "optimism")]
                 Transaction::Deposit(tx) => Self::Deposit(tx.into()),
             }
diff --git a/crates/primitives/src/transaction/pooled.rs b/crates/primitives/src/transaction/pooled.rs
index ffcffef4f..60ca6f1dd 100644
--- a/crates/primitives/src/transaction/pooled.rs
+++ b/crates/primitives/src/transaction/pooled.rs
@@ -8,13 +8,14 @@ use crate::{BlobTransaction, RecoveredTx, Transaction, TransactionSigned};
 use alloc::vec::Vec;
 use alloy_consensus::{
     constants::EIP4844_TX_TYPE_ID,
-    transaction::{TxEip1559, TxEip2930, TxEip4844, TxLegacy},
+    transaction::{TxEip1559, TxEip2930, TxEip4844, TxLegacy, TxSeismic},
     SignableTransaction, Signed, TxEip4844WithSidecar, Typed2718,
 };
 use alloy_eips::{
     eip2718::{Decodable2718, Eip2718Result, Encodable2718},
     eip2930::AccessList,
     eip4844::BlobTransactionSidecar,
+    eip712::{Decodable712, Eip712Error, Eip712Result, TypedDataRequest},
     eip7702::SignedAuthorization,
 };
 use alloy_primitives::{
@@ -42,6 +43,8 @@ pub enum PooledTransactionsElement {
     Eip7702(Signed<TxEip7702>),
     /// A blob transaction, which includes the transaction, blob data, commitments, and proofs.
     BlobTransaction(BlobTransaction),
+    /// A seismic transaction
+    Seismic(Signed<TxSeismic>),
 }
 
 impl PooledTransactionsElement {
@@ -76,6 +79,7 @@ impl PooledTransactionsElement {
     pub fn signature_hash(&self) -> B256 {
         match self {
             Self::Legacy(tx) => tx.signature_hash(),
+            Self::Seismic(tx) => tx.signature_hash(),
             Self::Eip2930(tx) => tx.signature_hash(),
             Self::Eip1559(tx) => tx.signature_hash(),
             Self::Eip7702(tx) => tx.signature_hash(),
@@ -87,6 +91,7 @@ impl PooledTransactionsElement {
     pub const fn hash(&self) -> &TxHash {
         match self {
             Self::Legacy(tx) => tx.hash(),
+            Self::Seismic(tx) => tx.hash(),
             Self::Eip2930(tx) => tx.hash(),
             Self::Eip1559(tx) => tx.hash(),
             Self::Eip7702(tx) => tx.hash(),
@@ -98,6 +103,7 @@ impl PooledTransactionsElement {
     pub const fn signature(&self) -> &Signature {
         match self {
             Self::Legacy(tx) => tx.signature(),
+            Self::Seismic(tx) => tx.signature(),
             Self::Eip2930(tx) => tx.signature(),
             Self::Eip1559(tx) => tx.signature(),
             Self::Eip7702(tx) => tx.signature(),
@@ -128,6 +134,7 @@ impl PooledTransactionsElement {
     pub fn encode_for_signing(&self, out: &mut dyn bytes::BufMut) {
         match self {
             Self::Legacy(tx) => tx.tx().encode_for_signing(out),
+            Self::Seismic(tx) => tx.tx().encode_for_signing(out),
             Self::Eip2930(tx) => tx.tx().encode_for_signing(out),
             Self::Eip1559(tx) => tx.tx().encode_for_signing(out),
             Self::BlobTransaction(tx) => tx.tx().encode_for_signing(out),
@@ -145,6 +152,7 @@ impl PooledTransactionsElement {
     pub fn into_transaction(self) -> TransactionSigned {
         match self {
             Self::Legacy(tx) => tx.into(),
+            Self::Seismic(tx) => tx.into(),
             Self::Eip2930(tx) => tx.into(),
             Self::Eip1559(tx) => tx.into(),
             Self::Eip7702(tx) => tx.into(),
@@ -299,6 +307,7 @@ impl Encodable2718 for PooledTransactionsElement {
     fn type_flag(&self) -> Option<u8> {
         match self {
             Self::Legacy(_) => None,
+            Self::Seismic(_) => None,
             Self::Eip2930(_) => Some(0x01),
             Self::Eip1559(_) => Some(0x02),
             Self::BlobTransaction(_) => Some(0x03),
@@ -309,6 +318,7 @@ impl Encodable2718 for PooledTransactionsElement {
     fn encode_2718_len(&self) -> usize {
         match self {
             Self::Legacy(tx) => tx.eip2718_encoded_length(),
+            Self::Seismic(tx) => tx.eip2718_encoded_length(),
             Self::Eip2930(tx) => tx.eip2718_encoded_length(),
             Self::Eip1559(tx) => tx.eip2718_encoded_length(),
             Self::Eip7702(tx) => tx.eip2718_encoded_length(),
@@ -319,6 +329,7 @@ impl Encodable2718 for PooledTransactionsElement {
     fn encode_2718(&self, out: &mut dyn alloy_rlp::BufMut) {
         match self {
             Self::Legacy(tx) => tx.eip2718_encode(out),
+            Self::Seismic(tx) => tx.eip2718_encode(out),
             Self::Eip2930(tx) => tx.eip2718_encode(out),
             Self::Eip1559(tx) => tx.eip2718_encode(out),
             Self::Eip7702(tx) => tx.eip2718_encode(out),
@@ -366,6 +377,7 @@ impl Decodable2718 for PooledTransactionsElement {
                     )),
                     Transaction::Eip1559(tx) => Ok(Self::Eip1559( Signed::new_unchecked(tx, typed_tx.signature, hash))),
                     Transaction::Eip7702(tx) => Ok(Self::Eip7702( Signed::new_unchecked(tx, typed_tx.signature, hash))),
+                    Transaction::Seismic(tx) => Ok(Self::Seismic( Signed::new_unchecked(tx, typed_tx.signature, hash))),
                     #[cfg(feature = "optimism")]
                     Transaction::Deposit(_) => Err(RlpError::Custom("Optimism deposit transaction cannot be decoded to PooledTransactionsElement").into())
                 }
@@ -386,6 +398,7 @@ impl Typed2718 for PooledTransactionsElement {
     fn ty(&self) -> u8 {
         match self {
             Self::Legacy(tx) => tx.tx().ty(),
+            Self::Seismic(tx) => tx.tx().ty(),
             Self::Eip2930(tx) => tx.tx().ty(),
             Self::Eip1559(tx) => tx.tx().ty(),
             Self::BlobTransaction(tx) => tx.tx().ty(),
@@ -394,10 +407,23 @@ impl Typed2718 for PooledTransactionsElement {
     }
 }
 
+impl Decodable712 for PooledTransactionsElement {
+    fn decode_712(typed_data: &TypedDataRequest) -> Eip712Result<Self> {
+        let tx_signed = TransactionSigned::decode_712(typed_data)?;
+        let sig = tx_signed.signature;
+        let hash = tx_signed.hash();
+        match tx_signed.transaction {
+            Transaction::Seismic(tx) => Ok(Self::Seismic(Signed::new_unchecked(tx, sig, hash))),
+            _ => Err(Eip712Error::InvalidType),
+        }
+    }
+}
+
 impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn chain_id(&self) -> Option<ChainId> {
         match self {
             Self::Legacy(tx) => tx.tx().chain_id(),
+            Self::Seismic(tx) => tx.tx().chain_id(),
             Self::Eip2930(tx) => tx.tx().chain_id(),
             Self::Eip1559(tx) => tx.tx().chain_id(),
             Self::Eip7702(tx) => tx.tx().chain_id(),
@@ -408,6 +434,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn nonce(&self) -> u64 {
         match self {
             Self::Legacy(tx) => tx.tx().nonce(),
+            Self::Seismic(tx) => tx.tx().nonce(),
             Self::Eip2930(tx) => tx.tx().nonce(),
             Self::Eip1559(tx) => tx.tx().nonce(),
             Self::Eip7702(tx) => tx.tx().nonce(),
@@ -418,6 +445,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn gas_limit(&self) -> u64 {
         match self {
             Self::Legacy(tx) => tx.tx().gas_limit(),
+            Self::Seismic(tx) => tx.tx().gas_limit(),
             Self::Eip2930(tx) => tx.tx().gas_limit(),
             Self::Eip1559(tx) => tx.tx().gas_limit(),
             Self::Eip7702(tx) => tx.tx().gas_limit(),
@@ -428,6 +456,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn gas_price(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.tx().gas_price(),
+            Self::Seismic(tx) => tx.tx().gas_price(),
             Self::Eip2930(tx) => tx.tx().gas_price(),
             Self::Eip1559(tx) => tx.tx().gas_price(),
             Self::Eip7702(tx) => tx.tx().gas_price(),
@@ -438,6 +467,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn max_fee_per_gas(&self) -> u128 {
         match self {
             Self::Legacy(tx) => tx.tx().max_fee_per_gas(),
+            Self::Seismic(tx) => tx.tx().max_fee_per_gas(),
             Self::Eip2930(tx) => tx.tx().max_fee_per_gas(),
             Self::Eip1559(tx) => tx.tx().max_fee_per_gas(),
             Self::Eip7702(tx) => tx.tx().max_fee_per_gas(),
@@ -448,6 +478,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn max_priority_fee_per_gas(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.tx().max_priority_fee_per_gas(),
+            Self::Seismic(tx) => tx.tx().max_priority_fee_per_gas(),
             Self::Eip2930(tx) => tx.tx().max_priority_fee_per_gas(),
             Self::Eip1559(tx) => tx.tx().max_priority_fee_per_gas(),
             Self::Eip7702(tx) => tx.tx().max_priority_fee_per_gas(),
@@ -458,6 +489,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn max_fee_per_blob_gas(&self) -> Option<u128> {
         match self {
             Self::Legacy(tx) => tx.tx().max_fee_per_blob_gas(),
+            Self::Seismic(tx) => tx.tx().max_fee_per_blob_gas(),
             Self::Eip2930(tx) => tx.tx().max_fee_per_blob_gas(),
             Self::Eip1559(tx) => tx.tx().max_fee_per_blob_gas(),
             Self::Eip7702(tx) => tx.tx().max_fee_per_blob_gas(),
@@ -468,6 +500,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn priority_fee_or_price(&self) -> u128 {
         match self {
             Self::Legacy(tx) => tx.tx().priority_fee_or_price(),
+            Self::Seismic(tx) => tx.tx().priority_fee_or_price(),
             Self::Eip2930(tx) => tx.tx().priority_fee_or_price(),
             Self::Eip1559(tx) => tx.tx().priority_fee_or_price(),
             Self::Eip7702(tx) => tx.tx().priority_fee_or_price(),
@@ -478,6 +511,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn effective_gas_price(&self, base_fee: Option<u64>) -> u128 {
         match self {
             Self::Legacy(tx) => tx.tx().effective_gas_price(base_fee),
+            Self::Seismic(tx) => tx.tx().effective_gas_price(base_fee),
             Self::Eip2930(tx) => tx.tx().effective_gas_price(base_fee),
             Self::Eip1559(tx) => tx.tx().effective_gas_price(base_fee),
             Self::Eip7702(tx) => tx.tx().effective_gas_price(base_fee),
@@ -488,6 +522,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn is_dynamic_fee(&self) -> bool {
         match self {
             Self::Legacy(tx) => tx.tx().is_dynamic_fee(),
+            Self::Seismic(tx) => tx.tx().is_dynamic_fee(),
             Self::Eip2930(tx) => tx.tx().is_dynamic_fee(),
             Self::Eip1559(tx) => tx.tx().is_dynamic_fee(),
             Self::Eip7702(tx) => tx.tx().is_dynamic_fee(),
@@ -498,6 +533,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn kind(&self) -> TxKind {
         match self {
             Self::Legacy(tx) => tx.tx().kind(),
+            Self::Seismic(tx) => tx.tx().kind(),
             Self::Eip2930(tx) => tx.tx().kind(),
             Self::Eip1559(tx) => tx.tx().kind(),
             Self::Eip7702(tx) => tx.tx().kind(),
@@ -508,6 +544,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn is_create(&self) -> bool {
         match self {
             Self::Legacy(tx) => tx.tx().is_create(),
+            Self::Seismic(tx) => tx.tx().is_create(),
             Self::Eip2930(tx) => tx.tx().is_create(),
             Self::Eip1559(tx) => tx.tx().is_create(),
             Self::Eip7702(tx) => tx.tx().is_create(),
@@ -518,6 +555,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn value(&self) -> U256 {
         match self {
             Self::Legacy(tx) => tx.tx().value(),
+            Self::Seismic(tx) => tx.tx().value(),
             Self::Eip2930(tx) => tx.tx().value(),
             Self::Eip1559(tx) => tx.tx().value(),
             Self::Eip7702(tx) => tx.tx().value(),
@@ -528,6 +566,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn input(&self) -> &Bytes {
         match self {
             Self::Legacy(tx) => tx.tx().input(),
+            Self::Seismic(tx) => tx.tx().input(),
             Self::Eip2930(tx) => tx.tx().input(),
             Self::Eip1559(tx) => tx.tx().input(),
             Self::Eip7702(tx) => tx.tx().input(),
@@ -538,6 +577,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn access_list(&self) -> Option<&AccessList> {
         match self {
             Self::Legacy(tx) => tx.tx().access_list(),
+            Self::Seismic(tx) => tx.tx().access_list(),
             Self::Eip2930(tx) => tx.tx().access_list(),
             Self::Eip1559(tx) => tx.tx().access_list(),
             Self::Eip7702(tx) => tx.tx().access_list(),
@@ -548,6 +588,7 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn blob_versioned_hashes(&self) -> Option<&[B256]> {
         match self {
             Self::Legacy(tx) => tx.tx().blob_versioned_hashes(),
+            Self::Seismic(tx) => tx.tx().blob_versioned_hashes(),
             Self::Eip2930(tx) => tx.tx().blob_versioned_hashes(),
             Self::Eip1559(tx) => tx.tx().blob_versioned_hashes(),
             Self::Eip7702(tx) => tx.tx().blob_versioned_hashes(),
@@ -558,18 +599,26 @@ impl alloy_consensus::Transaction for PooledTransactionsElement {
     fn authorization_list(&self) -> Option<&[SignedAuthorization]> {
         match self {
             Self::Legacy(tx) => tx.tx().authorization_list(),
+            Self::Seismic(tx) => tx.tx().authorization_list(),
             Self::Eip2930(tx) => tx.tx().authorization_list(),
             Self::Eip1559(tx) => tx.tx().authorization_list(),
             Self::Eip7702(tx) => tx.tx().authorization_list(),
             Self::BlobTransaction(tx) => tx.tx().authorization_list(),
         }
     }
+    fn seismic_elements(&self) -> Option<&alloy_consensus::transaction::TxSeismicElements> {
+        match self {
+            Self::Seismic(tx) => tx.tx().seismic_elements(),
+            _ => None,
+        }
+    }
 }
 
 impl SignedTransaction for PooledTransactionsElement {
     fn tx_hash(&self) -> &TxHash {
         match self {
             Self::Legacy(tx) => tx.hash(),
+            Self::Seismic(tx) => tx.hash(),
             Self::Eip2930(tx) => tx.hash(),
             Self::Eip1559(tx) => tx.hash(),
             Self::Eip7702(tx) => tx.hash(),
@@ -580,6 +629,7 @@ impl SignedTransaction for PooledTransactionsElement {
     fn signature(&self) -> &Signature {
         match self {
             Self::Legacy(tx) => tx.signature(),
+            Self::Seismic(tx) => tx.signature(),
             Self::Eip2930(tx) => tx.signature(),
             Self::Eip1559(tx) => tx.signature(),
             Self::Eip7702(tx) => tx.signature(),
@@ -603,6 +653,7 @@ impl InMemorySize for PooledTransactionsElement {
     fn size(&self) -> usize {
         match self {
             Self::Legacy(tx) => tx.size(),
+            Self::Seismic(tx) => tx.size(),
             Self::Eip2930(tx) => tx.size(),
             Self::Eip1559(tx) => tx.size(),
             Self::Eip7702(tx) => tx.size(),
@@ -629,6 +680,7 @@ impl From<PooledTransactionsElement> for TransactionSigned {
     fn from(element: PooledTransactionsElement) -> Self {
         match element {
             PooledTransactionsElement::Legacy(tx) => tx.into(),
+            PooledTransactionsElement::Seismic(tx) => tx.into(),
             PooledTransactionsElement::Eip2930(tx) => tx.into(),
             PooledTransactionsElement::Eip1559(tx) => tx.into(),
             PooledTransactionsElement::Eip7702(tx) => tx.into(),
diff --git a/crates/primitives/src/transaction/tx_type.rs b/crates/primitives/src/transaction/tx_type.rs
index 83f954387..08faf70a3 100644
--- a/crates/primitives/src/transaction/tx_type.rs
+++ b/crates/primitives/src/transaction/tx_type.rs
@@ -1,7 +1,7 @@
 use alloy_consensus::{
     constants::{
         EIP1559_TX_TYPE_ID, EIP2930_TX_TYPE_ID, EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID,
-        LEGACY_TX_TYPE_ID,
+        LEGACY_TX_TYPE_ID, SEISMIC_TX_TYPE_ID,
     },
     Typed2718,
 };
@@ -74,6 +74,9 @@ pub enum TxType {
     #[cfg(feature = "optimism")]
     #[display("deposit (126)")]
     Deposit = 126_isize,
+    /// Seismic transaction
+    #[display("seismic (74)")]
+    Seismic = 74_isize,
 }
 
 impl TxType {
@@ -83,7 +86,7 @@ impl TxType {
     /// Check if the transaction type has an access list.
     pub const fn has_access_list(&self) -> bool {
         match self {
-            Self::Legacy => false,
+            Self::Legacy | Self::Seismic => false,
             Self::Eip2930 | Self::Eip1559 | Self::Eip4844 | Self::Eip7702 => true,
             #[cfg(feature = "optimism")]
             Self::Deposit => false,
@@ -109,6 +112,7 @@ impl From<TxType> for u8 {
     fn from(value: TxType) -> Self {
         match value {
             TxType::Legacy => LEGACY_TX_TYPE_ID,
+            TxType::Seismic => SEISMIC_TX_TYPE_ID,
             TxType::Eip2930 => EIP2930_TX_TYPE_ID,
             TxType::Eip1559 => EIP1559_TX_TYPE_ID,
             TxType::Eip4844 => EIP4844_TX_TYPE_ID,
@@ -144,6 +148,8 @@ impl TryFrom<u8> for TxType {
             return Ok(Self::Eip4844)
         } else if value == Self::Eip7702 {
             return Ok(Self::Eip7702)
+        } else if value == Self::Seismic {
+            return Ok(Self::Seismic)
         }
 
         Err("invalid tx type")
@@ -187,6 +193,10 @@ impl reth_codecs::Compact for TxType {
                 buf.put_u8(EIP7702_TX_TYPE_ID);
                 COMPACT_EXTENDED_IDENTIFIER_FLAG
             }
+            Self::Seismic => {
+                buf.put_u8(SEISMIC_TX_TYPE_ID);
+                COMPACT_EXTENDED_IDENTIFIER_FLAG
+            }
             #[cfg(feature = "optimism")]
             Self::Deposit => {
                 buf.put_u8(op_alloy_consensus::DEPOSIT_TX_TYPE_ID);
@@ -210,6 +220,7 @@ impl reth_codecs::Compact for TxType {
                     match extended_identifier {
                         EIP4844_TX_TYPE_ID => Self::Eip4844,
                         EIP7702_TX_TYPE_ID => Self::Eip7702,
+                        SEISMIC_TX_TYPE_ID => Self::Seismic,
                         #[cfg(feature = "optimism")]
                         op_alloy_consensus::DEPOSIT_TX_TYPE_ID => Self::Deposit,
                         _ => panic!("Unsupported TxType identifier: {extended_identifier}"),
@@ -281,6 +292,7 @@ mod tests {
     #[case(TxType::Eip1559, COMPACT_IDENTIFIER_EIP1559, vec![])]
     #[case(TxType::Eip4844, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![EIP4844_TX_TYPE_ID])]
     #[case(TxType::Eip7702, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![EIP7702_TX_TYPE_ID])]
+    #[case(TxType::Seismic, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![SEISMIC_TX_TYPE_ID])]
     #[cfg_attr(feature = "optimism", case(TxType::Deposit, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![op_alloy_consensus::DEPOSIT_TX_TYPE_ID]))]
     fn test_txtype_to_compact(
         #[case] tx_type: TxType,
@@ -300,6 +312,7 @@ mod tests {
     #[case(TxType::Eip1559, COMPACT_IDENTIFIER_EIP1559, vec![])]
     #[case(TxType::Eip4844, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![EIP4844_TX_TYPE_ID])]
     #[case(TxType::Eip7702, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![EIP7702_TX_TYPE_ID])]
+    #[case(TxType::Seismic, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![SEISMIC_TX_TYPE_ID])]
     #[cfg_attr(feature = "optimism", case(TxType::Deposit, COMPACT_EXTENDED_IDENTIFIER_FLAG, vec![op_alloy_consensus::DEPOSIT_TX_TYPE_ID]))]
     fn test_txtype_from_compact(
         #[case] expected_type: TxType,
@@ -318,6 +331,7 @@ mod tests {
     #[case(&[EIP1559_TX_TYPE_ID], Ok(TxType::Eip1559))]
     #[case(&[EIP4844_TX_TYPE_ID], Ok(TxType::Eip4844))]
     #[case(&[EIP7702_TX_TYPE_ID], Ok(TxType::Eip7702))]
+    #[case(&[SEISMIC_TX_TYPE_ID], Ok(TxType::Seismic))]
     #[case(&[u8::MAX], Err(alloy_rlp::Error::InputTooShort))]
     #[cfg_attr(feature = "optimism", case(&[op_alloy_consensus::DEPOSIT_TX_TYPE_ID], Ok(TxType::Deposit)))]
     fn decode_tx_type(#[case] input: &[u8], #[case] expected: Result<TxType, alloy_rlp::Error>) {
diff --git a/crates/prune/prune/src/lib.rs b/crates/prune/prune/src/lib.rs
index ef3ee0de2..2a3d2a513 100644
--- a/crates/prune/prune/src/lib.rs
+++ b/crates/prune/prune/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![allow(missing_docs)]
diff --git a/crates/prune/types/src/lib.rs b/crates/prune/types/src/lib.rs
index bbf2cfe5f..55db6fde8 100644
--- a/crates/prune/types/src/lib.rs
+++ b/crates/prune/types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/revm/src/cached.rs b/crates/revm/src/cached.rs
index 5d5262adc..ff63e6daf 100644
--- a/crates/revm/src/cached.rs
+++ b/crates/revm/src/cached.rs
@@ -6,7 +6,7 @@ use alloy_primitives::{
 use core::cell::RefCell;
 use revm::primitives::{
     db::{Database, DatabaseRef},
-    AccountInfo, Bytecode,
+    AccountInfo, Bytecode, FlaggedStorage,
 };
 
 /// A container type that caches reads from an underlying [`DatabaseRef`].
@@ -53,7 +53,7 @@ impl CachedReads {
         &mut self,
         address: Address,
         info: AccountInfo,
-        storage: HashMap<U256, U256>,
+        storage: HashMap<U256, FlaggedStorage>,
     ) {
         self.accounts.insert(address, CachedAccount { info: Some(info), storage });
     }
@@ -120,7 +120,7 @@ impl<DB: DatabaseRef> Database for CachedReadsDbMut<'_, DB> {
         Ok(code)
     }
 
-    fn storage(&mut self, address: Address, index: U256) -> Result<U256, Self::Error> {
+    fn storage(&mut self, address: Address, index: U256) -> Result<FlaggedStorage, Self::Error> {
         match self.cached.accounts.entry(address) {
             Entry::Occupied(mut acc_entry) => match acc_entry.get_mut().storage.entry(index) {
                 Entry::Occupied(entry) => Ok(*entry.get()),
@@ -135,7 +135,7 @@ impl<DB: DatabaseRef> Database for CachedReadsDbMut<'_, DB> {
                     account.storage.insert(index, value);
                     (account, value)
                 } else {
-                    (CachedAccount::new(info), U256::ZERO)
+                    (CachedAccount::new(info), FlaggedStorage::ZERO)
                 };
                 acc_entry.insert(account);
                 Ok(value)
@@ -173,7 +173,7 @@ impl<DB: DatabaseRef> DatabaseRef for CachedReadsDBRef<'_, DB> {
         self.inner.borrow_mut().code_by_hash(code_hash)
     }
 
-    fn storage_ref(&self, address: Address, index: U256) -> Result<U256, Self::Error> {
+    fn storage_ref(&self, address: Address, index: U256) -> Result<FlaggedStorage, Self::Error> {
         self.inner.borrow_mut().storage(address, index)
     }
 
@@ -185,7 +185,7 @@ impl<DB: DatabaseRef> DatabaseRef for CachedReadsDBRef<'_, DB> {
 #[derive(Debug, Clone)]
 struct CachedAccount {
     info: Option<AccountInfo>,
-    storage: HashMap<U256, U256>,
+    storage: HashMap<U256, FlaggedStorage>,
 }
 
 impl CachedAccount {
diff --git a/crates/revm/src/database.rs b/crates/revm/src/database.rs
index 682aca6cf..714165169 100644
--- a/crates/revm/src/database.rs
+++ b/crates/revm/src/database.rs
@@ -1,11 +1,11 @@
-use crate::primitives::alloy_primitives::{BlockNumber, StorageKey, StorageValue};
+use crate::primitives::alloy_primitives::{BlockNumber, StorageKey};
 use alloy_primitives::{Address, B256, U256};
 use core::ops::{Deref, DerefMut};
 use reth_primitives::Account;
 use reth_storage_errors::provider::{ProviderError, ProviderResult};
 use revm::{
     db::DatabaseRef,
-    primitives::{AccountInfo, Bytecode},
+    primitives::{AccountInfo, Bytecode, FlaggedStorage},
     Database,
 };
 
@@ -33,7 +33,7 @@ pub trait EvmStateProvider: Send + Sync {
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>>;
+    ) -> ProviderResult<Option<FlaggedStorage>>;
 }
 
 // Blanket implementation of EvmStateProvider for any type that implements StateProvider.
@@ -57,7 +57,7 @@ impl<T: reth_storage_api::StateProvider> EvmStateProvider for T {
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         <T as reth_storage_api::StateProvider>::storage(self, account, storage_key)
     }
 }
@@ -120,7 +120,7 @@ impl<DB: EvmStateProvider> Database for StateProviderDatabase<DB> {
     /// Retrieves the storage value at a specific index for a given address.
     ///
     /// Returns `Ok` with the storage value, or the default value if not found.
-    fn storage(&mut self, address: Address, index: U256) -> Result<U256, Self::Error> {
+    fn storage(&mut self, address: Address, index: U256) -> Result<FlaggedStorage, Self::Error> {
         self.storage_ref(address, index)
     }
 
@@ -154,7 +154,7 @@ impl<DB: EvmStateProvider> DatabaseRef for StateProviderDatabase<DB> {
     /// Retrieves the storage value at a specific index for a given address.
     ///
     /// Returns `Ok` with the storage value, or the default value if not found.
-    fn storage_ref(&self, address: Address, index: U256) -> Result<U256, Self::Error> {
+    fn storage_ref(&self, address: Address, index: U256) -> Result<FlaggedStorage, Self::Error> {
         Ok(self.0.storage(address, B256::new(index.to_be_bytes()))?.unwrap_or_default())
     }
 
diff --git a/crates/revm/src/either.rs b/crates/revm/src/either.rs
index e93ba3a8d..3be62f2a1 100644
--- a/crates/revm/src/either.rs
+++ b/crates/revm/src/either.rs
@@ -1,6 +1,6 @@
 use alloy_primitives::{Address, B256, U256};
 use revm::{
-    primitives::{AccountInfo, Bytecode},
+    primitives::{AccountInfo, Bytecode, FlaggedStorage},
     Database,
 };
 
@@ -36,7 +36,7 @@ where
         }
     }
 
-    fn storage(&mut self, address: Address, index: U256) -> Result<U256, Self::Error> {
+    fn storage(&mut self, address: Address, index: U256) -> Result<FlaggedStorage, Self::Error> {
         match self {
             Self::Left(db) => db.storage(address, index),
             Self::Right(db) => db.storage(address, index),
diff --git a/crates/revm/src/lib.rs b/crates/revm/src/lib.rs
index 5f18a0fe6..0123c7a2a 100644
--- a/crates/revm/src/lib.rs
+++ b/crates/revm/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/revm/src/test_utils.rs b/crates/revm/src/test_utils.rs
index 7779d1ca8..f4a4d25d2 100644
--- a/crates/revm/src/test_utils.rs
+++ b/crates/revm/src/test_utils.rs
@@ -2,7 +2,7 @@ use alloc::vec::Vec;
 use alloy_primitives::{
     keccak256,
     map::{B256HashMap, HashMap},
-    Address, BlockNumber, Bytes, StorageKey, B256, U256,
+    Address, BlockNumber, Bytes, StorageKey, B256,
 };
 use reth_primitives::{Account, Bytecode};
 use reth_storage_api::{
@@ -15,10 +15,14 @@ use reth_trie::{
     MultiProof, MultiProofTargets, StorageMultiProof, StorageProof, TrieInput,
 };
 
+#[cfg(not(feature = "std"))]
+use alloc::vec::Vec;
+use revm::primitives::FlaggedStorage;
+
 /// Mock state for testing
 #[derive(Debug, Default, Clone, Eq, PartialEq)]
 pub struct StateProviderTest {
-    accounts: HashMap<Address, (HashMap<StorageKey, U256>, Account)>,
+    accounts: HashMap<Address, (HashMap<StorageKey, FlaggedStorage>, Account)>,
     contracts: HashMap<B256, Bytecode>,
     block_hash: HashMap<u64, B256>,
 }
@@ -30,7 +34,7 @@ impl StateProviderTest {
         address: Address,
         mut account: Account,
         bytecode: Option<Bytes>,
-        storage: HashMap<StorageKey, U256>,
+        storage: HashMap<StorageKey, FlaggedStorage>,
     ) {
         if let Some(bytecode) = bytecode {
             let hash = keccak256(&bytecode);
@@ -161,7 +165,7 @@ impl StateProvider for StateProviderTest {
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<alloy_primitives::StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         Ok(self.accounts.get(&account).and_then(|(storage, _)| storage.get(&storage_key).copied()))
     }
 
diff --git a/crates/rpc/ipc/src/lib.rs b/crates/rpc/ipc/src/lib.rs
index ae7a8b221..e98cfc89f 100644
--- a/crates/rpc/ipc/src/lib.rs
+++ b/crates/rpc/ipc/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-api/src/engine.rs b/crates/rpc/rpc-api/src/engine.rs
index f78b8349b..719cd745d 100644
--- a/crates/rpc/rpc-api/src/engine.rs
+++ b/crates/rpc/rpc-api/src/engine.rs
@@ -12,12 +12,12 @@ use alloy_rpc_types_engine::{
     TransitionConfiguration,
 };
 use alloy_rpc_types_eth::{
-    state::StateOverride, transaction::TransactionRequest, BlockOverrides,
-    EIP1186AccountProofResponse, Filter, Log, SyncStatus,
+    state::StateOverride, BlockOverrides, EIP1186AccountProofResponse, Filter, Log, SyncStatus,
 };
 use alloy_serde::JsonStorageKey;
 use jsonrpsee::{core::RpcResult, proc_macros::rpc};
 use reth_engine_primitives::EngineTypes;
+
 // NOTE: We can't use associated types in the `EngineApi` trait because of jsonrpsee, so we use a
 // generic here. It would be nice if the rpc macro would understand which types need to have serde.
 // By default, if the trait has a generic, the rpc macro will add e.g. `Engine: DeserializeOwned` to
@@ -241,8 +241,8 @@ pub trait EngineEthApi<B: RpcObject> {
     #[method(name = "call")]
     async fn call(
         &self,
-        request: TransactionRequest,
-        block_id: Option<BlockId>,
+        request: alloy_rpc_types::SeismicCallRequest,
+        block_number: Option<BlockId>,
         state_overrides: Option<StateOverride>,
         block_overrides: Option<Box<BlockOverrides>>,
     ) -> RpcResult<Bytes>;
@@ -261,7 +261,10 @@ pub trait EngineEthApi<B: RpcObject> {
 
     /// Sends signed transaction, returning its hash.
     #[method(name = "sendRawTransaction")]
-    async fn send_raw_transaction(&self, bytes: Bytes) -> RpcResult<B256>;
+    async fn send_raw_transaction(
+        &self,
+        tx: alloy_rpc_types::SeismicRawTxRequest,
+    ) -> RpcResult<B256>;
 
     /// Returns logs matching given filter object.
     #[method(name = "getLogs")]
diff --git a/crates/rpc/rpc-api/src/lib.rs b/crates/rpc/rpc-api/src/lib.rs
index 098214f10..7f1874fc9 100644
--- a/crates/rpc/rpc-api/src/lib.rs
+++ b/crates/rpc/rpc-api/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-builder/src/lib.rs b/crates/rpc/rpc-builder/src/lib.rs
index 877e80897..c690a68a3 100644
--- a/crates/rpc/rpc-builder/src/lib.rs
+++ b/crates/rpc/rpc-builder/src/lib.rs
@@ -200,7 +200,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-builder/tests/it/http.rs b/crates/rpc/rpc-builder/tests/it/http.rs
index 357e3135e..9d1e7483f 100644
--- a/crates/rpc/rpc-builder/tests/it/http.rs
+++ b/crates/rpc/rpc-builder/tests/it/http.rs
@@ -188,9 +188,12 @@ where
     EthApiClient::<Transaction, Block, Receipt, Header>::get_code(client, address, None)
         .await
         .unwrap();
-    EthApiClient::<Transaction, Block, Receipt, Header>::send_raw_transaction(client, tx)
-        .await
-        .unwrap();
+    EthApiClient::<Transaction, Block, Receipt, Header>::send_raw_transaction(
+        client,
+        tx.clone().into(),
+    )
+    .await
+    .unwrap();
     EthApiClient::<Transaction, Block, Receipt, Header>::fee_history(
         client,
         U64::from(0),
@@ -295,7 +298,7 @@ where
     .unwrap_err();
     EthApiClient::<Transaction, Block, Receipt, Header>::call(
         client,
-        call_request.clone(),
+        call_request.clone().into(),
         Some(block_number.into()),
         None,
         None,
@@ -323,6 +326,15 @@ where
     )
     .await
     .unwrap();
+    EthApiClient::<Transaction, Block, Receipt, Header>::call(
+        client,
+        tx.clone().into(),
+        Some(block_number.into()),
+        None,
+        None,
+    )
+    .await
+    .unwrap_err();
     EthApiClient::<Transaction, Block, Receipt, Header>::gas_price(client).await.unwrap_err();
     EthApiClient::<Transaction, Block, Receipt, Header>::max_priority_fee_per_gas(client)
         .await
diff --git a/crates/rpc/rpc-engine-api/src/lib.rs b/crates/rpc/rpc-engine-api/src/lib.rs
index a9305a008..3f08c9a8b 100644
--- a/crates/rpc/rpc-engine-api/src/lib.rs
+++ b/crates/rpc/rpc-engine-api/src/lib.rs
@@ -4,7 +4,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-eth-api/Cargo.toml b/crates/rpc/rpc-eth-api/Cargo.toml
index 6f65b91d8..628faac93 100644
--- a/crates/rpc/rpc-eth-api/Cargo.toml
+++ b/crates/rpc/rpc-eth-api/Cargo.toml
@@ -40,9 +40,10 @@ alloy-dyn-abi = { workspace = true, features = ["eip712"] }
 alloy-json-rpc.workspace = true
 alloy-network.workspace = true
 alloy-primitives.workspace = true
+alloy-rpc-types.workspace = true
 alloy-rpc-types-eth.workspace = true
 alloy-rpc-types-mev.workspace = true
-alloy-consensus.workspace = true
+alloy-consensus = { workspace = true, features = ["k256"] }
 
 # rpc
 jsonrpsee = { workspace = true, features = ["server", "macros"] }
diff --git a/crates/rpc/rpc-eth-api/src/core.rs b/crates/rpc/rpc-eth-api/src/core.rs
index c103835a8..ee909d689 100644
--- a/crates/rpc/rpc-eth-api/src/core.rs
+++ b/crates/rpc/rpc-eth-api/src/core.rs
@@ -221,7 +221,7 @@ pub trait EthApi<T: RpcObject, B: RpcObject, R: RpcObject, H: RpcObject> {
     #[method(name = "call")]
     async fn call(
         &self,
-        request: TransactionRequest,
+        request: alloy_rpc_types::SeismicCallRequest,
         block_number: Option<BlockId>,
         state_overrides: Option<StateOverride>,
         block_overrides: Option<Box<BlockOverrides>>,
@@ -312,7 +312,7 @@ pub trait EthApi<T: RpcObject, B: RpcObject, R: RpcObject, H: RpcObject> {
     async fn hashrate(&self) -> RpcResult<U256>;
 
     /// Returns the hash of the current block, the seedHash, and the boundary condition to be met
-    /// (“target”)
+    /// ("target")
     #[method(name = "getWork")]
     async fn get_work(&self) -> RpcResult<Work>;
 
@@ -335,7 +335,10 @@ pub trait EthApi<T: RpcObject, B: RpcObject, R: RpcObject, H: RpcObject> {
 
     /// Sends signed transaction, returning its hash.
     #[method(name = "sendRawTransaction")]
-    async fn send_raw_transaction(&self, bytes: Bytes) -> RpcResult<B256>;
+    async fn send_raw_transaction(
+        &self,
+        bytes: alloy_rpc_types::SeismicRawTxRequest,
+    ) -> RpcResult<B256>;
 
     /// Returns an Ethereum specific signature with: sign(keccak256("\x19Ethereum Signed Message:\n"
     /// + len(message) + message))).
@@ -638,19 +641,31 @@ where
     /// Handler for: `eth_call`
     async fn call(
         &self,
-        request: TransactionRequest,
+        request: alloy_rpc_types::SeismicCallRequest,
         block_number: Option<BlockId>,
         state_overrides: Option<StateOverride>,
         block_overrides: Option<Box<BlockOverrides>>,
     ) -> RpcResult<Bytes> {
-        trace!(target: "rpc::eth", ?request, ?block_number, ?state_overrides, ?block_overrides, "Serving eth_call");
-        Ok(EthCall::call(
-            self,
-            request,
-            block_number,
-            EvmOverrides::new(state_overrides, block_overrides),
-        )
-        .await?)
+        trace!(target: "rpc::eth", ?request, "Serving seismic_call");
+        match request {
+            alloy_rpc_types::SeismicCallRequest::TransactionRequest(tx_request) => {
+                Ok(EthCall::call(
+                    self,
+                    tx_request.inner,
+                    block_number,
+                    EvmOverrides::new(state_overrides, block_overrides),
+                )
+                .await?)
+            }
+
+            alloy_rpc_types::SeismicCallRequest::TypedData(typed_request) => {
+                Ok(EthCall::signed_call_typed_data(self, typed_request, block_number).await?)
+            }
+
+            alloy_rpc_types::SeismicCallRequest::Bytes(bytes) => {
+                Ok(EthCall::signed_call(self, bytes, block_number).await?)
+            }
+        }
     }
 
     /// Handler for: `eth_callMany`
@@ -775,9 +790,19 @@ where
     }
 
     /// Handler for: `eth_sendRawTransaction`
-    async fn send_raw_transaction(&self, tx: Bytes) -> RpcResult<B256> {
+    async fn send_raw_transaction(
+        &self,
+        tx: alloy_rpc_types::SeismicRawTxRequest,
+    ) -> RpcResult<B256> {
         trace!(target: "rpc::eth", ?tx, "Serving eth_sendRawTransaction");
-        Ok(EthTransactions::send_raw_transaction(self, tx).await?)
+        match tx {
+            alloy_rpc_types::SeismicRawTxRequest::Bytes(bytes) => {
+                Ok(EthTransactions::send_raw_transaction(self, bytes).await?)
+            }
+            alloy_rpc_types::SeismicRawTxRequest::TypedData(typed_data) => {
+                Ok(EthTransactions::send_typed_data_transaction(self, typed_data).await?)
+            }
+        }
     }
 
     /// Handler for: `eth_sign`
diff --git a/crates/rpc/rpc-eth-api/src/helpers/call.rs b/crates/rpc/rpc-eth-api/src/helpers/call.rs
index fde88483c..574d45946 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/call.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/call.rs
@@ -6,19 +6,20 @@ use crate::{
     helpers::estimate::EstimateCall, FromEthApiError, FromEvmError, FullEthApiTypes,
     IntoEthApiError, RpcBlock, RpcNodeCore,
 };
-use alloy_consensus::BlockHeader;
+use alloy_consensus::{transaction::TxSeismicElements, BlockHeader};
 use alloy_eips::{eip1559::calc_next_block_base_fee, eip2930::AccessListResult};
 use alloy_primitives::{Address, Bytes, TxKind, B256, U256};
 use alloy_rpc_types_eth::{
     simulate::{SimBlock, SimulatePayload, SimulatedBlock},
     state::{EvmOverrides, StateOverride},
     transaction::TransactionRequest,
-    BlockId, Bundle, EthCallResponse, StateContext, TransactionInfo,
+    BlockId, Bundle, EthCallResponse, StateContext, TransactionInfo, TransactionTrait,
 };
 use futures::Future;
 use reth_chainspec::EthChainSpec;
 use reth_evm::{ConfigureEvm, ConfigureEvmEnv};
 use reth_node_api::BlockBody;
+use reth_primitives::RecoveredTx;
 use reth_primitives_traits::SignedTransaction;
 use reth_provider::{BlockIdReader, ChainSpecProvider, ProviderHeader};
 use reth_revm::{
@@ -37,11 +38,14 @@ use reth_rpc_eth_types::{
         CallFees,
     },
     simulate::{self, EthSimulateError},
+    utils::{recover_raw_transaction, recover_typed_data_request},
     EthApiError, RevertError, RpcInvalidTransactionError, StateCacheDb,
 };
+use reth_transaction_pool::{PoolPooledTx, PoolTransaction, TransactionPool};
 use revm::{Database, DatabaseCommit, GetInspector};
 use revm_inspectors::{access_list::AccessListInspector, transfer::TransferInspector};
-use tracing::trace;
+use revm_primitives::RngMode;
+use tracing::{debug, trace};
 
 /// Result type for `eth_simulateV1` RPC method.
 pub type SimulatedBlocksResult<N, E> = Result<Vec<SimulatedBlock<RpcBlock<N>>>, E>;
@@ -227,13 +231,106 @@ pub trait EthCall: EstimateCall + Call + LoadPendingBlock + LoadBlock + FullEthA
         overrides: EvmOverrides,
     ) -> impl Future<Output = Result<Bytes, Self::Error>> + Send {
         async move {
+            let seismic_elements = request.seismic_elements;
+
             let (res, _env) =
                 self.transact_call_at(request, block_number.unwrap_or_default(), overrides).await?;
 
-            ensure_success(res.result).map_err(Self::Error::from_eth_err)
+            debug!(target: "rpc::eth::call", ?res, "Transacted");
+
+            let output = ensure_success(res.result).map_err(Self::Error::from_eth_err)?;
+
+            if let Some(seismic_elements) = seismic_elements {
+                self.encrypt_output(&seismic_elements, output)
+            } else {
+                Ok(output)
+            }
+        }
+    }
+
+    /// Encrypts the output of a call using the encryption pubkey of the transaction
+    fn encrypt_output(
+        &self,
+        seismic_elements: &TxSeismicElements,
+        output: Bytes,
+    ) -> Result<Bytes, Self::Error> {
+        let encrypted_output = self
+            .evm_config()
+            .encrypt(&output, &seismic_elements)
+            .map(|encrypted_output| Bytes::from(encrypted_output))
+            .map_err(|_| EthApiError::InvalidParams("Failed to encrypt output".to_string()))?;
+
+        Ok(encrypted_output)
+    }
+
+    /// Executes a signed call via eth_call
+    fn common_signed_call(
+        &self,
+        tx: RecoveredTx<
+            <<Self as RpcNodeCore>::Provider as reth_provider::TransactionsProvider>::Transaction,
+        >,
+        block_number: Option<BlockId>,
+    ) -> impl Future<Output = Result<Bytes, Self::Error>> + Send {
+        async move {
+            let (cfg, block, at) = self.evm_env_at(block_number.unwrap_or_default()).await?;
+            let env = EnvWithHandlerCfg::new_with_cfg_env(
+                cfg,
+                block,
+                self.evm_config()
+                    .tx_env(tx.as_signed(), tx.signer())
+                    .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
+            );
+
+            let this = self.clone();
+
+            let (res, _) = self
+                .spawn_with_state_at_block(at, move |state| {
+                    let db = CacheDB::new(StateProviderDatabase::new(
+                        StateProviderTraitObjWrapper(&state),
+                    ));
+                    this.transact(db, env)
+                })
+                .await?;
+
+            let output = ensure_success(res.result).map_err(Self::Error::from_eth_err)?;
+            let tx_signed = tx.as_signed();
+
+            if let Some(seismic_elements) = tx_signed.seismic_elements() {
+                self.encrypt_output(seismic_elements, output)
+            } else {
+                Ok(output)
+            }
         }
     }
 
+    /// Executes the call request (`eth_call`) and returns the output
+    fn signed_call(
+        &self,
+        tx: Bytes,
+        block_number: Option<BlockId>,
+    ) -> impl Future<Output = Result<Bytes, Self::Error>> + Send {
+        async move {
+            let tx = recover_raw_transaction::<PoolPooledTx<Self::Pool>>(&tx)?.map_transaction(
+                <Self::Pool as TransactionPool>::Transaction::pooled_into_consensus,
+            );
+            self.common_signed_call(tx, block_number).await
+        }
+    }
+
+    /// Executes a signed call via eth_signTypedData_v4
+    fn signed_call_typed_data(
+        &self,
+        _typed_data: alloy_eips::eip712::TypedDataRequest,
+        _block_number: Option<BlockId>,
+    ) -> impl Future<Output = Result<Bytes, Self::Error>> + Send {
+        async move {
+            let tx = recover_typed_data_request::<PoolPooledTx<Self::Pool>>(&_typed_data)?
+                .map_transaction(
+                    <Self::Pool as TransactionPool>::Transaction::pooled_into_consensus,
+                );
+            self.common_signed_call(tx, _block_number).await
+        }
+    }
     /// Simulate arbitrary number of transactions at an arbitrary blockchain index, with the
     /// optionality of state overrides
     fn call_many(
@@ -304,7 +401,9 @@ pub trait EthCall: EstimateCall + Call + LoadPendingBlock + LoadBlock + FullEthA
                         let env = EnvWithHandlerCfg::new_with_cfg_env(
                             cfg.clone(),
                             block_env.clone(),
-                            RpcNodeCore::evm_config(&this).tx_env(tx, *signer),
+                            RpcNodeCore::evm_config(&this)
+                                .tx_env(tx, *signer)
+                                .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                         );
                         let (res, _) = this.transact(&mut db, env)?;
                         db.commit(res.state);
@@ -580,6 +679,8 @@ pub trait Call:
 
                 let env = this.prepare_call_env(cfg, block_env, request, &mut db, overrides)?;
 
+                debug!(target: "rpc::eth::call::spawn_with_call_at", ?env, "Prepared call environment");
+
                 f(StateCacheDbRefMutWrapper(&mut db), env)
             })
             .await
@@ -637,7 +738,9 @@ pub trait Call:
                 let env = EnvWithHandlerCfg::new_with_cfg_env(
                     cfg,
                     block_env,
-                    RpcNodeCore::evm_config(&this).tx_env(tx.as_signed(), tx.signer()),
+                    RpcNodeCore::evm_config(&this)
+                        .tx_env(tx.as_signed(), tx.signer())
+                        .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                 );
 
                 let (res, _) = this.transact(&mut db, env)?;
@@ -679,7 +782,9 @@ pub trait Call:
                 break
             }
 
-            self.evm_config().fill_tx_env(evm.tx_mut(), tx, *sender);
+            self.evm_config()
+                .fill_tx_env(evm.tx_mut(), tx, *sender)
+                .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?;
             evm.transact_commit().map_err(Self::Error::from_evm_err)?;
             index += 1;
         }
@@ -700,6 +805,8 @@ pub trait Call:
             return Err(RpcInvalidTransactionError::BlobTransactionMissingBlobHashes.into_eth_err())
         }
 
+        debug!(target: "rpc::eth::call", ?request, "Creating transaction environment");
+
         let TransactionRequest {
             from,
             to,
@@ -715,8 +822,8 @@ pub trait Call:
             blob_versioned_hashes,
             max_fee_per_blob_gas,
             authorization_list,
-            transaction_type: _,
-            sidecar: _,
+            seismic_elements,
+            ..
         } = request;
 
         let CallFees { max_priority_fee_per_gas, gas_price, max_fee_per_blob_gas } =
@@ -739,6 +846,17 @@ pub trait Call:
             block_env.gas_limit.saturating_to()
         });
 
+        let input =
+            input.try_into_unique_input().map_err(Self::Error::from_eth_err)?.unwrap_or_default();
+        let input = if let Some(elements) = seismic_elements {
+            self.evm_config().decrypt(&input, &elements).map_err(|_| {
+                EthApiError::InvalidParams("failed to decrypt seismic transaction".to_string())
+                    .into()
+            })?
+        } else {
+            input
+        };
+
         #[allow(clippy::needless_update)]
         let env = TxEnv {
             gas_limit,
@@ -748,10 +866,7 @@ pub trait Call:
             gas_priority_fee: max_priority_fee_per_gas,
             transact_to: to.unwrap_or(TxKind::Create),
             value: value.unwrap_or_default(),
-            data: input
-                .try_into_unique_input()
-                .map_err(Self::Error::from_eth_err)?
-                .unwrap_or_default(),
+            data: input,
             chain_id,
             access_list: access_list.unwrap_or_default().into(),
             // EIP-4844 fields
@@ -759,8 +874,10 @@ pub trait Call:
             max_fee_per_blob_gas,
             // EIP-7702 fields
             authorization_list: authorization_list.map(Into::into),
+            rng_mode: RngMode::Simulation,
             ..Default::default()
         };
+        debug!(target: "rpc::eth::call", ?env, "Created transaction environment");
 
         Ok(env)
     }
@@ -804,6 +921,7 @@ pub trait Call:
         DB: DatabaseRef,
         EthApiError: From<<DB as DatabaseRef>::Error>,
     {
+        Self::seismic_override_call_request(&mut request);
         if request.gas > Some(self.call_gas_limit()) {
             // configured gas exceeds limit
             return Err(
@@ -823,7 +941,6 @@ pub trait Call:
         // <https://github.com/ethereum/go-ethereum/blob/ee8e83fa5f6cb261dad2ed0a7bbcde4930c41e6c/internal/ethapi/api.go#L985>
         cfg.disable_base_fee = true;
 
-        // set nonce to None so that the correct nonce is chosen by the EVM
         request.nonce = None;
 
         if let Some(block_overrides) = overrides.block {
@@ -849,4 +966,18 @@ pub trait Call:
 
         Ok(env)
     }
+
+    /// Override the request for seismic calls
+    fn seismic_override_call_request(request: &mut TransactionRequest) {
+        // If user calls with the standard (unsigned) eth_call,
+        // then disregard whatever they put in the from field
+        // They will still be able to read public contract functions,
+        // but they will not be able to spoof msg.sender in these calls
+        request.from = None;
+        request.gas_price = None; // preventing InsufficientFunds error
+        request.max_fee_per_gas = None; // preventing InsufficientFunds error
+        request.max_priority_fee_per_gas = None; // preventing InsufficientFunds error
+        request.max_fee_per_blob_gas = None; // preventing InsufficientFunds error
+        request.value = None; // preventing InsufficientFunds error
+    }
 }
diff --git a/crates/rpc/rpc-eth-api/src/helpers/estimate.rs b/crates/rpc/rpc-eth-api/src/helpers/estimate.rs
index 2951aad0a..3776c5e63 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/estimate.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/estimate.rs
@@ -121,8 +121,6 @@ pub trait EstimateCall: Call {
         // If the provided gas limit is less than computed cap, use that
         env.tx.gas_limit = env.tx.gas_limit.min(highest_gas_limit);
 
-        trace!(target: "rpc::eth::estimate", ?env, "Starting gas estimation");
-
         // Execute the transaction with the highest possible gas limit.
         let (mut res, mut env) = match self.transact(&mut db, env.clone()) {
             // Handle the exceptional case where the transaction initialization uses too much gas.
diff --git a/crates/rpc/rpc-eth-api/src/helpers/pending_block.rs b/crates/rpc/rpc-eth-api/src/helpers/pending_block.rs
index af05eeaef..e497bcd5c 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/pending_block.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/pending_block.rs
@@ -343,7 +343,9 @@ pub trait LoadPendingBlock:
             let env = Env::boxed(
                 cfg.cfg_env.clone(),
                 block_env.clone(),
-                Self::evm_config(self).tx_env(tx.as_signed(), tx.signer()),
+                Self::evm_config(self)
+                    .tx_env(tx.as_signed(), tx.signer())
+                    .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
             );
 
             let mut evm = revm::Evm::builder().with_env(env).with_db(&mut db).build();
diff --git a/crates/rpc/rpc-eth-api/src/helpers/state.rs b/crates/rpc/rpc-eth-api/src/helpers/state.rs
index 4c9ccecd3..d2cf2b0ea 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/state.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/state.rs
@@ -68,13 +68,15 @@ pub trait EthState: LoadState + SpawnBlocking {
         block_id: Option<BlockId>,
     ) -> impl Future<Output = Result<B256, Self::Error>> + Send {
         self.spawn_blocking_io(move |this| {
-            Ok(B256::new(
-                this.state_at_block_id_or_latest(block_id)?
-                    .storage(address, index.as_b256())
-                    .map_err(Self::Error::from_eth_err)?
-                    .unwrap_or_default()
-                    .to_be_bytes(),
-            ))
+            let storage_value = this
+                .state_at_block_id_or_latest(block_id)?
+                .storage(address, index.as_b256())
+                .map_err(Self::Error::from_eth_err)?
+                .unwrap_or_default();
+            match storage_value.is_public() {
+                true => return Ok(B256::new(storage_value.value.to_be_bytes())),
+                false => return Ok(B256::ZERO),
+            };
         })
     }
 
diff --git a/crates/rpc/rpc-eth-api/src/helpers/trace.rs b/crates/rpc/rpc-eth-api/src/helpers/trace.rs
index e000218e7..df9d72f74 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/trace.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/trace.rs
@@ -220,7 +220,9 @@ pub trait Trace:
                 let env = EnvWithHandlerCfg::new_with_cfg_env(
                     cfg,
                     block_env,
-                    RpcNodeCore::evm_config(&this).tx_env(tx.as_signed(), tx.signer()),
+                    RpcNodeCore::evm_config(&this)
+                        .tx_env(tx.as_signed(), tx.signer())
+                        .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                 );
                 let (res, _) =
                     this.inspect(StateCacheDbRefMutWrapper(&mut db), env, &mut inspector)?;
@@ -356,26 +358,41 @@ pub trait Trace:
                             block_number: Some(block_number),
                             base_fee: Some(base_fee),
                         };
-                        let tx_env = this.evm_config().tx_env(tx, *signer);
-                        (tx_info, tx_env)
+                        let tx_env = this
+                            .evm_config()
+                            .tx_env(tx, *signer)
+                            .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?;
+                        Ok((tx_info, tx_env))
                     })
                     .peekable();
 
-                while let Some((tx_info, tx)) = transactions.next() {
-                    let env =
-                        EnvWithHandlerCfg::new_with_cfg_env(cfg.clone(), block_env.clone(), tx);
-
-                    let mut inspector = inspector_setup();
-                    let (res, _) =
-                        this.inspect(StateCacheDbRefMutWrapper(&mut db), env, &mut inspector)?;
-                    let ResultAndState { result, state } = res;
-                    results.push(f(tx_info, inspector, result, &state, &db)?);
-
-                    // need to apply the state changes of this transaction before executing the
-                    // next transaction, but only if there's a next transaction
-                    if transactions.peek().is_some() {
-                        // commit the state changes to the DB
-                        db.commit(state)
+                while let Some(res) = transactions.next() {
+                    match res {
+                        Ok((tx_info, tx)) => {
+                            let env = EnvWithHandlerCfg::new_with_cfg_env(
+                                cfg.clone(),
+                                block_env.clone(),
+                                tx,
+                            );
+
+                            let mut inspector = inspector_setup();
+                            let (res, _) = this.inspect(
+                                StateCacheDbRefMutWrapper(&mut db),
+                                env,
+                                &mut inspector,
+                            )?;
+                            let ResultAndState { result, state } = res;
+                            results.push(f(tx_info, inspector, result, &state, &db)?);
+
+                            // need to apply the state changes of this transaction before executing
+                            // the next transaction, but only if there's
+                            // a next transaction
+                            if transactions.peek().is_some() {
+                                // commit the state changes to the DB
+                                db.commit(state)
+                            }
+                        }
+                        Err(err) => return Err(err),
                     }
                 }
 
diff --git a/crates/rpc/rpc-eth-api/src/helpers/transaction.rs b/crates/rpc/rpc-eth-api/src/helpers/transaction.rs
index cb35d7f5d..9324a1021 100644
--- a/crates/rpc/rpc-eth-api/src/helpers/transaction.rs
+++ b/crates/rpc/rpc-eth-api/src/helpers/transaction.rs
@@ -66,6 +66,14 @@ pub trait EthTransactions: LoadTransaction<Provider: BlockReaderIdExt> {
         tx: Bytes,
     ) -> impl Future<Output = Result<B256, Self::Error>> + Send;
 
+    /// Decodes and recovers the transaction and submits it to the pool.
+    ///
+    /// Returns the hash of the transaction.
+    fn send_typed_data_transaction(
+        &self,
+        tx: alloy_eips::eip712::TypedDataRequest,
+    ) -> impl Future<Output = Result<B256, Self::Error>> + Send;
+
     /// Returns the transaction by hash.
     ///
     /// Checks the pool and state.
diff --git a/crates/rpc/rpc-eth-api/src/lib.rs b/crates/rpc/rpc-eth-api/src/lib.rs
index d9c7f39a4..524a5c8d0 100644
--- a/crates/rpc/rpc-eth-api/src/lib.rs
+++ b/crates/rpc/rpc-eth-api/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-eth-types/src/cache/db.rs b/crates/rpc/rpc-eth-types/src/cache/db.rs
index bea496166..19c36cf9f 100644
--- a/crates/rpc/rpc-eth-types/src/cache/db.rs
+++ b/crates/rpc/rpc-eth-types/src/cache/db.rs
@@ -8,6 +8,7 @@ use reth_revm::{database::StateProviderDatabase, db::CacheDB, DatabaseRef};
 use reth_storage_api::{HashedPostStateProvider, StateProvider};
 use reth_trie::{HashedStorage, MultiProofTargets};
 use revm::Database;
+use revm_primitives::FlaggedStorage;
 
 /// Helper alias type for the state's [`CacheDB`]
 pub type StateCacheDb<'a> = CacheDB<StateProviderDatabase<StateProviderTraitObjWrapper<'a>>>;
@@ -150,7 +151,7 @@ impl StateProvider for StateProviderTraitObjWrapper<'_> {
         &self,
         account: revm_primitives::Address,
         storage_key: alloy_primitives::StorageKey,
-    ) -> reth_errors::ProviderResult<Option<alloy_primitives::StorageValue>> {
+    ) -> reth_errors::ProviderResult<Option<FlaggedStorage>> {
         self.0.storage(account, storage_key)
     }
 
@@ -205,7 +206,7 @@ impl<'a> Database for StateCacheDbRefMutWrapper<'a, '_> {
         &mut self,
         address: revm_primitives::Address,
         index: U256,
-    ) -> Result<U256, Self::Error> {
+    ) -> Result<FlaggedStorage, Self::Error> {
         self.0.storage(address, index)
     }
 
@@ -232,7 +233,7 @@ impl<'a> DatabaseRef for StateCacheDbRefMutWrapper<'a, '_> {
         &self,
         address: revm_primitives::Address,
         index: U256,
-    ) -> Result<U256, Self::Error> {
+    ) -> Result<FlaggedStorage, Self::Error> {
         self.0.storage_ref(address, index)
     }
 
diff --git a/crates/rpc/rpc-eth-types/src/lib.rs b/crates/rpc/rpc-eth-types/src/lib.rs
index 03c23dc34..d2cd3a7ba 100644
--- a/crates/rpc/rpc-eth-types/src/lib.rs
+++ b/crates/rpc/rpc-eth-types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/rpc/rpc-eth-types/src/receipt.rs b/crates/rpc/rpc-eth-types/src/receipt.rs
index b7f82782b..89a7f2623 100644
--- a/crates/rpc/rpc-eth-types/src/receipt.rs
+++ b/crates/rpc/rpc-eth-types/src/receipt.rs
@@ -113,6 +113,7 @@ impl EthReceiptBuilder {
                 TxType::Eip1559 => ReceiptEnvelope::Eip1559(receipt_with_bloom),
                 TxType::Eip4844 => ReceiptEnvelope::Eip4844(receipt_with_bloom),
                 TxType::Eip7702 => ReceiptEnvelope::Eip7702(receipt_with_bloom),
+                TxType::Seismic => ReceiptEnvelope::Seismic(receipt_with_bloom),
                 #[allow(unreachable_patterns)]
                 _ => unreachable!(),
             }
diff --git a/crates/rpc/rpc-eth-types/src/revm_utils.rs b/crates/rpc/rpc-eth-types/src/revm_utils.rs
index 782ef5697..d1b7e91d1 100644
--- a/crates/rpc/rpc-eth-types/src/revm_utils.rs
+++ b/crates/rpc/rpc-eth-types/src/revm_utils.rs
@@ -293,7 +293,12 @@ where
                 new_account_state
                     .into_iter()
                     .map(|(slot, value)| {
-                        (U256::from_be_bytes(slot.0), U256::from_be_bytes(value.0))
+                        (
+                            U256::from_be_bytes(slot.0),
+                            revm_primitives::FlaggedStorage::new_from_value(U256::from_be_bytes(
+                                value.0,
+                            )),
+                        )
                     })
                     .collect(),
             )?;
@@ -303,7 +308,7 @@ where
                 db.insert_account_storage(
                     account,
                     U256::from_be_bytes(slot.0),
-                    U256::from_be_bytes(value.0),
+                    revm_primitives::FlaggedStorage::new_from_value(U256::from_be_bytes(value.0)),
                 )?;
             }
         }
diff --git a/crates/rpc/rpc-eth-types/src/utils.rs b/crates/rpc/rpc-eth-types/src/utils.rs
index f12c819ae..fbc3de274 100644
--- a/crates/rpc/rpc-eth-types/src/utils.rs
+++ b/crates/rpc/rpc-eth-types/src/utils.rs
@@ -1,9 +1,11 @@
 //! Commonly used code snippets
 
 use super::{EthApiError, EthResult};
+use alloy_eips::eip712::TypedDataRequest;
 use reth_primitives::{transaction::SignedTransactionIntoRecoveredExt, RecoveredTx};
 use reth_primitives_traits::SignedTransaction;
 use std::future::Future;
+use tracing::debug;
 
 /// Recovers a [`SignedTransaction`] from an enveloped encoded byte stream.
 ///
@@ -16,9 +18,32 @@ pub fn recover_raw_transaction<T: SignedTransaction>(mut data: &[u8]) -> EthResu
         return Err(EthApiError::EmptyRawTransactionData)
     }
 
+    debug!(target: "reth::recover_raw_transaction", "{:?}", data);
+
     let transaction =
         T::decode_2718(&mut data).map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?;
 
+    debug!(target: "reth::recover_raw_transaction", "{:?}", transaction);
+
+    transaction.try_into_ecrecovered().or(Err(EthApiError::InvalidTransactionSignature))
+}
+
+/// Recovers a [`SignedTransaction`] from a typed data request.
+///
+/// This is a helper function that returns the appropriate RPC-specific error if the input data is
+/// malformed.
+///
+/// See [`alloy_eips::eip2718::Decodable2718::decode_2718`]
+pub fn recover_typed_data_request<T: SignedTransaction>(
+    mut data: &TypedDataRequest,
+) -> EthResult<RecoveredTx<T>> {
+    debug!(target: "reth::recover_typed_data_request", "{:?}", data);
+
+    let transaction =
+        T::decode_712(&mut data).map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?;
+
+    debug!(target: "reth::recover_typed_data_request", "{:?}", transaction);
+
     transaction.try_into_ecrecovered().or(Err(EthApiError::InvalidTransactionSignature))
 }
 
diff --git a/crates/rpc/rpc-layer/src/lib.rs b/crates/rpc/rpc-layer/src/lib.rs
index 540daf559..67b1ab647 100644
--- a/crates/rpc/rpc-layer/src/lib.rs
+++ b/crates/rpc/rpc-layer/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-server-types/src/lib.rs b/crates/rpc/rpc-server-types/src/lib.rs
index c20b57881..61ec798a9 100644
--- a/crates/rpc/rpc-server-types/src/lib.rs
+++ b/crates/rpc/rpc-server-types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/rpc/rpc-testing-util/src/lib.rs b/crates/rpc/rpc-testing-util/src/lib.rs
index ebf5090b7..db9d8ac1f 100644
--- a/crates/rpc/rpc-testing-util/src/lib.rs
+++ b/crates/rpc/rpc-testing-util/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-types-compat/src/lib.rs b/crates/rpc/rpc-types-compat/src/lib.rs
index 206d502f8..9ec3d7cba 100644
--- a/crates/rpc/rpc-types-compat/src/lib.rs
+++ b/crates/rpc/rpc-types-compat/src/lib.rs
@@ -5,7 +5,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/rpc/rpc-types-compat/src/transaction.rs b/crates/rpc/rpc-types-compat/src/transaction.rs
index d3d1a71de..226d1b6bd 100644
--- a/crates/rpc/rpc-types-compat/src/transaction.rs
+++ b/crates/rpc/rpc-types-compat/src/transaction.rs
@@ -107,5 +107,8 @@ pub fn transaction_to_call_request(tx: RecoveredTx) -> TransactionRequest {
         transaction_type: Some(tx_type.into()),
         sidecar: None,
         authorization_list,
+        // TODO: Peter/Christian?
+        // alloy_consensus::transaction::EncryptionPublicKey::new([0u8;33])
+        seismic_elements: None,
     }
 }
diff --git a/crates/rpc/rpc/Cargo.toml b/crates/rpc/rpc/Cargo.toml
index 14519860e..70cef2fcb 100644
--- a/crates/rpc/rpc/Cargo.toml
+++ b/crates/rpc/rpc/Cargo.toml
@@ -20,7 +20,6 @@ reth-rpc-api.workspace = true
 reth-rpc-eth-api.workspace = true
 reth-engine-primitives.workspace = true
 reth-errors.workspace = true
-reth-ethereum-consensus.workspace = true
 reth-provider.workspace = true
 reth-transaction-pool.workspace = true
 reth-network-api.workspace = true
diff --git a/crates/rpc/rpc/src/debug.rs b/crates/rpc/rpc/src/debug.rs
index 5e799dd69..76ad8aaae 100644
--- a/crates/rpc/rpc/src/debug.rs
+++ b/crates/rpc/rpc/src/debug.rs
@@ -116,7 +116,10 @@ where
                         env: Env::boxed(
                             cfg.cfg_env.clone(),
                             block_env.clone(),
-                            this.eth_api().evm_config().tx_env(tx, *signer),
+                            this.eth_api()
+                                .evm_config()
+                                .tx_env(tx, *signer)
+                                .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                         ),
                         handler_cfg: cfg.handler_cfg,
                     };
@@ -264,7 +267,10 @@ where
                     env: Env::boxed(
                         cfg.cfg_env.clone(),
                         block_env,
-                        this.eth_api().evm_config().tx_env(tx.as_signed(), tx.signer()),
+                        this.eth_api()
+                            .evm_config()
+                            .tx_env(tx.as_signed(), tx.signer())
+                            .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                     ),
                     handler_cfg: cfg.handler_cfg,
                 };
@@ -545,7 +551,10 @@ where
                             env: Env::boxed(
                                 cfg.cfg_env.clone(),
                                 block_env.clone(),
-                                this.eth_api().evm_config().tx_env(tx, *signer),
+                                this.eth_api()
+                                    .evm_config()
+                                    .tx_env(tx, *signer)
+                                    .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
                             ),
                             handler_cfg: cfg.handler_cfg,
                         };
diff --git a/crates/rpc/rpc/src/engine.rs b/crates/rpc/rpc/src/engine.rs
index a9c316571..a7934e9c2 100644
--- a/crates/rpc/rpc/src/engine.rs
+++ b/crates/rpc/rpc/src/engine.rs
@@ -1,8 +1,7 @@
 use alloy_eips::{BlockId, BlockNumberOrTag};
 use alloy_primitives::{Address, Bytes, B256, U256, U64};
 use alloy_rpc_types_eth::{
-    state::StateOverride, transaction::TransactionRequest, BlockOverrides,
-    EIP1186AccountProofResponse, Filter, Log, SyncStatus,
+    state::StateOverride, BlockOverrides, EIP1186AccountProofResponse, Filter, Log, SyncStatus,
 };
 use alloy_serde::JsonStorageKey;
 use jsonrpsee::core::RpcResult as Result;
@@ -69,13 +68,13 @@ where
     /// Handler for: `eth_call`
     async fn call(
         &self,
-        request: TransactionRequest,
-        block_id: Option<BlockId>,
+        request: alloy_rpc_types::SeismicCallRequest,
+        block_number: Option<BlockId>,
         state_overrides: Option<StateOverride>,
         block_overrides: Option<Box<BlockOverrides>>,
     ) -> Result<Bytes> {
         self.eth
-            .call(request, block_id, state_overrides, block_overrides)
+            .call(request, block_number, state_overrides, block_overrides)
             .instrument(engine_span!())
             .await
     }
@@ -104,8 +103,8 @@ where
     }
 
     /// Handler for: `eth_sendRawTransaction`
-    async fn send_raw_transaction(&self, bytes: Bytes) -> Result<B256> {
-        self.eth.send_raw_transaction(bytes).instrument(engine_span!()).await
+    async fn send_raw_transaction(&self, tx: alloy_rpc_types::SeismicRawTxRequest) -> Result<B256> {
+        self.eth.send_raw_transaction(tx).instrument(engine_span!()).await
     }
 
     /// Handler for `eth_getLogs`
diff --git a/crates/rpc/rpc/src/eth/bundle.rs b/crates/rpc/rpc/src/eth/bundle.rs
index b12e02133..3370a6204 100644
--- a/crates/rpc/rpc/src/eth/bundle.rs
+++ b/crates/rpc/rpc/src/eth/bundle.rs
@@ -207,7 +207,9 @@ where
 
                     hasher.update(*tx.tx_hash());
                     let gas_price = tx.effective_gas_price(basefee);
-                    eth_api.evm_config().fill_tx_env(evm.tx_mut(), &tx, signer);
+                    eth_api.evm_config().fill_tx_env(evm.tx_mut(), &tx, signer).map_err(|_| {
+                        Eth::Error::from_eth_err(EthApiError::FailedToDecodeSignedTransaction)
+                    })?;
                     let ResultAndState { result, state } =
                         evm.transact().map_err(Eth::Error::from_evm_err)?;
 
diff --git a/crates/rpc/rpc/src/eth/helpers/state.rs b/crates/rpc/rpc/src/eth/helpers/state.rs
index 99d2856ad..a0ac480c2 100644
--- a/crates/rpc/rpc/src/eth/helpers/state.rs
+++ b/crates/rpc/rpc/src/eth/helpers/state.rs
@@ -37,7 +37,7 @@ where
 mod tests {
     use super::*;
     use alloy_eips::eip1559::ETHEREUM_BLOCK_GAS_LIMIT;
-    use alloy_primitives::{Address, StorageKey, StorageValue, U256};
+    use alloy_primitives::{Address, StorageKey, U256};
     use reth_chainspec::MAINNET;
     use reth_evm_ethereum::EthEvmConfig;
     use reth_network_api::noop::NoopNetwork;
@@ -51,6 +51,7 @@ mod tests {
     };
     use reth_tasks::pool::BlockingTaskPool;
     use reth_transaction_pool::test_utils::{testing_pool, TestPool};
+    use revm_primitives::FlaggedStorage;
     use std::collections::HashMap;
 
     fn noop_eth_api() -> EthApi<NoopProvider, TestPool, NoopNetwork, EthEvmConfig> {
@@ -109,7 +110,7 @@ mod tests {
         assert_eq!(storage, U256::ZERO.to_be_bytes());
 
         // === Mock ===
-        let storage_value = StorageValue::from(1337);
+        let storage_value = FlaggedStorage::new_from_value(1337);
         let storage_key = StorageKey::random();
         let storage = HashMap::from([(storage_key, storage_value)]);
 
@@ -119,7 +120,7 @@ mod tests {
 
         let storage_key: U256 = storage_key.into();
         let storage = eth_api.storage_at(address, storage_key.into(), None).await.unwrap();
-        assert_eq!(storage, storage_value.to_be_bytes());
+        assert_eq!(storage, storage_value.value.to_be_bytes());
     }
 
     #[tokio::test]
diff --git a/crates/rpc/rpc/src/eth/helpers/transaction.rs b/crates/rpc/rpc/src/eth/helpers/transaction.rs
index 33c8849be..16565a4e2 100644
--- a/crates/rpc/rpc/src/eth/helpers/transaction.rs
+++ b/crates/rpc/rpc/src/eth/helpers/transaction.rs
@@ -7,8 +7,9 @@ use reth_rpc_eth_api::{
     helpers::{EthSigner, EthTransactions, LoadTransaction, SpawnBlocking},
     FromEthApiError, FullEthApiTypes, RpcNodeCore, RpcNodeCoreExt,
 };
-use reth_rpc_eth_types::utils::recover_raw_transaction;
+use reth_rpc_eth_types::utils::{recover_raw_transaction, recover_typed_data_request};
 use reth_transaction_pool::{PoolTransaction, TransactionOrigin, TransactionPool};
+use tracing::debug;
 
 impl<Provider, Pool, Network, EvmConfig> EthTransactions
     for EthApi<Provider, Pool, Network, EvmConfig>
@@ -30,8 +31,43 @@ where
         // broadcast raw transaction to subscribers if there is any.
         self.broadcast_raw_transaction(tx);
 
+        debug!(target: "reth::send_raw_transaction", "tx recovered");
+
+        let pool_transaction = <Self::Pool as TransactionPool>::Transaction::from_pooled(recovered);
+
+        debug!(target: "reth::send_raw_transaction", "tx convereted to pool tx");
+
+        // submit the transaction to the pool with a `Local` origin
+        let hash = self
+            .pool()
+            .add_transaction(TransactionOrigin::Local, pool_transaction)
+            .await
+            .map_err(Self::Error::from_eth_err)?;
+
+        Ok(hash)
+    }
+
+    /// Decodes and recovers the transaction and submits it to the pool.
+    ///
+    /// Returns the hash of the transaction.
+    async fn send_typed_data_transaction(
+        &self,
+        tx: alloy_eips::eip712::TypedDataRequest,
+    ) -> Result<B256, Self::Error> {
+        let recovered = recover_typed_data_request(&tx)?;
+
+        // broadcast raw transaction to subscribers if there is any.
+        // TODO: maybe we need to broadcast the encoded tx instead of the recovered tx
+        // when other nodes receive the raw bytes the hash they recover needs to be
+        // type
+        // self.broadcast_raw_transaction(recovered.to);
+
+        debug!(target: "reth::send_raw_transaction", "tx recovered");
+
         let pool_transaction = <Self::Pool as TransactionPool>::Transaction::from_pooled(recovered);
 
+        debug!(target: "reth::send_raw_transaction", "tx convereted to pool tx");
+
         // submit the transaction to the pool with a `Local` origin
         let hash = self
             .pool()
diff --git a/crates/rpc/rpc/src/eth/helpers/types.rs b/crates/rpc/rpc/src/eth/helpers/types.rs
index 28c66967e..bd9bc2461 100644
--- a/crates/rpc/rpc/src/eth/helpers/types.rs
+++ b/crates/rpc/rpc/src/eth/helpers/types.rs
@@ -62,6 +62,9 @@ where
             reth_primitives::Transaction::Eip7702(tx) => {
                 Signed::new_unchecked(tx, signature, hash).into()
             }
+            reth_primitives::Transaction::Seismic(tx) => {
+                Signed::new_unchecked(tx, signature, hash).into()
+            }
             #[allow(unreachable_patterns)]
             _ => unreachable!(),
         };
diff --git a/crates/rpc/rpc/src/eth/sim_bundle.rs b/crates/rpc/rpc/src/eth/sim_bundle.rs
index 6cfeb0934..1c16d8d7e 100644
--- a/crates/rpc/rpc/src/eth/sim_bundle.rs
+++ b/crates/rpc/rpc/src/eth/sim_bundle.rs
@@ -323,7 +323,10 @@ where
                         )
                         .into());
                     }
-                    eth_api.evm_config().fill_tx_env(evm.tx_mut(), &item.tx, item.signer);
+                    eth_api
+                        .evm_config()
+                        .fill_tx_env(evm.tx_mut(), &item.tx, item.signer)
+                        .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?;
 
                     let ResultAndState { result, state } =
                         evm.transact().map_err(EthApiError::from_eth_err)?;
diff --git a/crates/rpc/rpc/src/lib.rs b/crates/rpc/rpc/src/lib.rs
index d957913df..a5c77cfcd 100644
--- a/crates/rpc/rpc/src/lib.rs
+++ b/crates/rpc/rpc/src/lib.rs
@@ -20,7 +20,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/rpc/rpc/src/trace.rs b/crates/rpc/rpc/src/trace.rs
index b164e3c19..a61fd954a 100644
--- a/crates/rpc/rpc/src/trace.rs
+++ b/crates/rpc/rpc/src/trace.rs
@@ -122,7 +122,10 @@ where
         let env = EnvWithHandlerCfg::new_with_cfg_env(
             cfg,
             block,
-            self.eth_api().evm_config().tx_env(tx.as_signed(), tx.signer()),
+            self.eth_api()
+                .evm_config()
+                .tx_env(tx.as_signed(), tx.signer())
+                .map_err(|_| EthApiError::FailedToDecodeSignedTransaction)?,
         );
 
         let config = TracingInspectorConfig::from_parity_config(&trace_types);
diff --git a/crates/rpc/rpc/src/validation.rs b/crates/rpc/rpc/src/validation.rs
index a7042126c..eb77e7a93 100644
--- a/crates/rpc/rpc/src/validation.rs
+++ b/crates/rpc/rpc/src/validation.rs
@@ -16,10 +16,9 @@ use reth_chainspec::{ChainSpecProvider, EthereumHardforks};
 use reth_consensus::{Consensus, FullConsensus, PostExecutionInput};
 use reth_engine_primitives::PayloadValidator;
 use reth_errors::{BlockExecutionError, ConsensusError, ProviderError};
-use reth_ethereum_consensus::GAS_LIMIT_BOUND_DIVISOR;
 use reth_evm::execute::{BlockExecutorProvider, Executor};
 use reth_primitives::{GotExpected, NodePrimitives, SealedBlockWithSenders, SealedHeader};
-use reth_primitives_traits::{Block as _, BlockBody};
+use reth_primitives_traits::{constants::GAS_LIMIT_BOUND_DIVISOR, Block as _, BlockBody};
 use reth_provider::{
     BlockExecutionInput, BlockExecutionOutput, BlockReaderIdExt, StateProviderFactory,
 };
diff --git a/crates/seismic/node/Cargo.toml b/crates/seismic/node/Cargo.toml
new file mode 100644
index 000000000..d40f4be7f
--- /dev/null
+++ b/crates/seismic/node/Cargo.toml
@@ -0,0 +1,93 @@
+[package]
+name = "seismic-node"
+version.workspace = true
+edition.workspace = true
+rust-version.workspace = true
+license.workspace = true
+repository.workspace = true
+
+[lints]
+workspace = true
+
+[dependencies]
+# seismic dependencies
+seismic-rpc-api = { workspace = true, features = ["client"] }
+seismic-enclave.workspace = true
+
+reth-cli.workspace = true
+reth-errors.workspace = true
+reth-node-api.workspace = true
+reth-node-ethereum.workspace = true
+reth-node-builder.workspace = true
+reth-chainspec.workspace = true
+reth-payload-builder.workspace = true
+reth-primitives.workspace = true
+reth-evm.workspace = true
+reth-revm.workspace = true
+reth-rpc-eth-api.workspace = true
+reth-rpc-eth-types.workspace = true
+reth-rpc-builder.workspace = true
+reth-transaction-pool.workspace = true
+reth-tracing.workspace = true
+reth-trie-common.workspace = true
+reth-trie-db.workspace = true
+reth-network.workspace = true
+reth-network-types.workspace = true
+reth-enclave.workspace = true
+reth-tasks.workspace = true
+reth-node-core.workspace = true
+reth-provider.workspace = true
+reth-blockchain-tree.workspace = true
+reth-beacon-consensus.workspace = true
+reth-consensus-debug-client.workspace = true
+reth-engine-util.workspace = true
+reth-exex.workspace = true
+reth-node-events.workspace = true
+reth-rpc-engine-api.workspace = true
+reth-storage-api.workspace = true
+reth-engine-tree.workspace = true
+
+alloy-consensus.workspace = true
+alloy-eips.workspace = true
+alloy-primitives.workspace = true
+alloy-network.workspace = true
+alloy-rpc-types.workspace  = true
+alloy-rpc-types-eth.workspace  = true
+alloy-signer-local.workspace = true
+alloy-dyn-abi.workspace = true
+alloy-rlp.workspace = true
+
+# misc
+serde.workspace = true
+serde_json.workspace = true
+tokio.workspace = true
+tracing.workspace = true
+eyre.workspace = true
+jsonrpsee = { workspace = true, features = ["server", "macros"] }
+secp256k1 = {workspace = true, features = ["rand", "recovery", "std", "serde"]}
+futures.workspace = true
+tokio-stream.workspace = true
+assert_cmd.workspace = true
+reqwest.workspace = true
+tempfile.workspace = true
+once_cell.workspace = true
+
+reth-e2e-test-utils.workspace = true
+sysinfo = "0.29"
+
+# dependencies for test_utils
+k256.workspace = true
+enr.workspace = true
+
+[dev-dependencies]
+reth-e2e-test-utils.workspace = true
+assert_cmd.workspace = true
+reqwest.workspace = true
+arbitrary.workspace = true
+tempfile.workspace = true
+once_cell.workspace = true
+alloy-provider.workspace = true
+alloy-sol-types.workspace = true
+alloy-dyn-abi.workspace = true
+alloy-json-abi = { version = "0.8.15" }
+alloy-eips.workspace = true
diff --git a/crates/seismic/node/assets/genesis.json b/crates/seismic/node/assets/genesis.json
new file mode 100644
index 000000000..2bdfec430
--- /dev/null
+++ b/crates/seismic/node/assets/genesis.json
@@ -0,0 +1,96 @@
+{
+    "config": {
+        "chainId": 1,
+        "homesteadBlock": 0,
+        "daoForkSupport": true,
+        "eip150Block": 0,
+        "eip155Block": 0,
+        "eip158Block": 0,
+        "byzantiumBlock": 0,
+        "constantinopleBlock": 0,
+        "petersburgBlock": 0,
+        "istanbulBlock": 0,
+        "muirGlacierBlock": 0,
+        "berlinBlock": 0,
+        "londonBlock": 0,
+        "arrowGlacierBlock": 0,
+        "grayGlacierBlock": 0,
+        "shanghaiTime": 0,
+        "cancunTime": 0,
+        "terminalTotalDifficulty": "0x0",
+        "terminalTotalDifficultyPassed": true
+    },
+    "nonce": "0x0",
+    "timestamp": "0x0",
+    "extraData": "0x00",
+    "gasLimit": "0x1c9c380",
+    "difficulty": "0x0",
+    "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
+    "coinbase": "0x0000000000000000000000000000000000000000",
+    "alloc": {
+        "0x14dc79964da2c08b23698b3d3cc7ca32193d9955": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x15d34aaf54267db7d7c367839aaf71a00a2c6a65": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x23618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x2546bcd3c84621e976d8185a91a922ae77ecec30": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x70997970c51812dc3a010c7d01b50e0d17dc79c8": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x71be63f3384f5fb98995898a86b02fb2426c5788": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x90f79bf6eb2c4f870365e785982e1f101e93b906": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x976ea74026e726554db657fa54763abd0c3a0aa9": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0x9c41de96b2088cdc640c6182dfcf5491dc574a57": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xa0ee7a142d267c1f36714e4a8f75612f20a79720": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xbcd4042de499d14e55001ccbb24a551f3b954096": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xbda5747bfd65f08deb54cb465eb87d40e51b197e": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xcd3b766ccdd6ae721141f452c550ca635964ce71": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xdd2fd4581271e230360230f9337d5c0430bf44c0": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266": {
+            "balance": "0xd3c21bcecceda1000000"
+        },
+        "0xfabb0ac9d68b0b445fb7357272ff202c5651694a": {
+            "balance": "0xd3c21bcecceda1000000"
+        }
+    },
+    "number": "0x0"
+}
diff --git a/crates/seismic/node/bench/bench.rs b/crates/seismic/node/bench/bench.rs
new file mode 100644
index 000000000..98493d728
--- /dev/null
+++ b/crates/seismic/node/bench/bench.rs
@@ -0,0 +1,226 @@
+// use crate::utils::eth_payload_attributes;
+// use alloy_primitives::{hex, Bytes, TxKind};
+// use eyre::Ok;
+// use reth_chainspec::{ChainSpecBuilder, MAINNET};
+// use reth_e2e_test_utils::{setup, transaction::SeismicTransactionTestContext};
+// use reth_node_ethereum::EthereumNode;
+// use reth_tracing::tracing::*;
+// use std::{sync::Arc, time::Instant};
+
+// #[tokio::test(flavor = "multi_thread")]
+// async fn bench() -> eyre::Result<()> {
+//     reth_tracing::init_test_tracing();
+
+//     let (mut nodes, _tasks, wallet) = setup::<EthereumNode>(
+//         2,
+//         Arc::new(
+//             ChainSpecBuilder::default()
+//                 .chain(MAINNET.chain)
+//                 .genesis(serde_json::from_str(include_str!("../assets/genesis.json")).unwrap())
+//                 .cancun_activated()
+//                 .build(),
+//         ),
+//         false,
+//     )
+//     .await?;
+
+//     let mut second_node = nodes.pop().unwrap();
+//     let mut first_node = nodes.pop().unwrap();
+//     let mut nonce = 0;
+//     let mut block_number;
+//     let send_raw_tx_cnt = 1399;
+//     let call_cnt = send_raw_tx_cnt * 1;
+
+//     // ==================== first block for encrypted transaction ====================
+//     let raw_tx = SeismicTransactionTestContext::deploy_tx_bytes(
+//         MAINNET.chain.id(),
+//         wallet.inner.clone(),
+//         nonce,
+//     )
+//     .await;
+//     nonce += 1;
+
+//     // Make the first node advance
+//     let tx_hash = first_node.rpc.inject_tx(raw_tx).await?;
+
+//     // make the node advance
+//     let (payload, _) = first_node.advance_block(vec![], eth_payload_attributes).await?;
+
+//     let block_hash = payload.block().hash();
+//     block_number = payload.block().number;
+
+//     // assert the block has been committed to the blockchain
+//     first_node.assert_new_block(tx_hash, block_hash, block_number).await?;
+
+//     // only send forkchoice update to second node
+//     second_node.engine_api.update_forkchoice(block_hash, block_hash).await?;
+
+//     // expect second node advanced via p2p gossip
+//     second_node.assert_new_block(tx_hash, block_hash, 1).await?;
+
+//     let tx_receipt = second_node.rpc.get_transaction_receipt(tx_hash).await?.unwrap();
+
+//     let deployed_contract_address = tx_receipt.contract_address.unwrap();
+
+//     // ==================== second block for benching seismic transactions ====================
+//     let data: Bytes = vec![].into();
+//     let mut tx_hashes = vec![];
+
+//     let start_time = Instant::now();
+
+//     // run calls
+//     for _ in 0..call_cnt {
+//         let raw_tx = SeismicTransactionTestContext::call_seismic_tx_bytes(
+//             MAINNET.chain.id(),
+//             wallet.inner.clone(),
+//             nonce,
+//             deployed_contract_address,
+//             data.clone(),
+//         )
+//         .await;
+
+//         let _ = first_node.rpc.signed_call(raw_tx, block_number).await?;
+//     }
+
+//     let call_end_time = Instant::now();
+
+//     // run raw transactions
+//     for _ in 0..send_raw_tx_cnt {
+//         let raw_tx = SeismicTransactionTestContext::call_seismic_tx_bytes(
+//             MAINNET.chain.id(),
+//             wallet.inner.clone(),
+//             nonce,
+//             deployed_contract_address,
+//             data.clone(),
+//         )
+//         .await;
+//         nonce += 1;
+
+//         let tx_hash = first_node.rpc.inject_tx(raw_tx).await?;
+//         tx_hashes.push(tx_hash);
+//     }
+
+//     // make the node advance
+//     let start_time_inner = Instant::now();
+//     let (payload, _) = first_node.advance_block(vec![], eth_payload_attributes).await?;
+//     let end_time_inner = Instant::now();
+
+//     let block_hash = payload.block().hash();
+//     block_number = payload.block().number;
+
+//     // assert the block has been committed to the blockchain
+//     first_node.assert_new_block(tx_hashes[0], block_hash, block_number).await?;
+
+//     // only send forkchoice update to second node
+//     second_node.engine_api.update_forkchoice(block_hash, block_hash).await?;
+
+//     // expect second node advanced via p2p gossip
+//     second_node.assert_new_block(tx_hashes[0], block_hash, 2).await?;
+
+//     let end_time = Instant::now();
+//     let duration = end_time.duration_since(start_time);
+//     let duration_call = call_end_time.duration_since(start_time);
+//     let duration_advance_block = end_time_inner.duration_since(start_time_inner);
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration,
+//         "Duration for encrypted transaction in a block with {} calls and {} raw transactions",
+//         call_cnt,
+//         send_raw_tx_cnt
+//     );
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration_call,
+//         "Duration for calls with {} calls and {} raw transactions",
+//         call_cnt,
+//         send_raw_tx_cnt
+//     );
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration_advance_block,
+//         "Duration for encrypted transaction in a block with {} calls and {} raw transactions",
+//         call_cnt,
+//         send_raw_tx_cnt
+//     );
+//     debug!(target: "e2e:bench", ?nonce, "after the first block");
+//     debug!(target: "e2e:bench", ?block_number, "after the first block");
+
+//     // ==================== third block for benching normal transactions ====================
+//     let start_time = Instant::now();
+//     let mut tx_hashes = vec![];
+
+//     // run calls
+//     for _ in 0..call_cnt {
+//         let raw_tx = SeismicTransactionTestContext::call_legacy_tx_bytes(
+//             MAINNET.chain.id(),
+//             wallet.inner.clone(),
+//             nonce,
+//             deployed_contract_address,
+//             data.clone(),
+//         )
+//         .await;
+//         let _ = first_node.rpc.signed_call(raw_tx, block_number).await?;
+//     }
+
+//     // run transactions
+//     for _ in 0..send_raw_tx_cnt {
+//         let raw_tx = SeismicTransactionTestContext::call_legacy_tx_bytes(
+//             MAINNET.chain.id(),
+//             wallet.inner.clone(),
+//             nonce,
+//             deployed_contract_address,
+//             data.clone(),
+//         )
+//         .await;
+//         nonce += 1;
+
+//         let tx_hash = first_node.rpc.inject_tx(raw_tx).await?;
+//         tx_hashes.push(tx_hash);
+//     }
+//     let call_end_time = Instant::now();
+
+//     // make the node advance
+//     let start_time_inner = Instant::now();
+//     let (payload, _) = first_node.advance_block(vec![], eth_payload_attributes).await?;
+//     let end_time_inner = Instant::now();
+
+//     let block_hash = payload.block().hash();
+//     let block_number = payload.block().number;
+
+//     // assert the block has been committed to the blockchain
+//     first_node.assert_new_block(tx_hashes[0], block_hash, block_number).await?;
+
+//     // only send forkchoice update to second node
+//     second_node.engine_api.update_forkchoice(block_hash, block_hash).await?;
+
+//     // expect second node advanced via p3p gossip
+//     second_node.assert_new_block(tx_hashes[0], block_hash, block_number).await?;
+
+//     let end_time = Instant::now();
+//     let duration = end_time.duration_since(start_time);
+//     let duration_call = call_end_time.duration_since(start_time);
+//     let duration_inner = end_time_inner.duration_since(start_time_inner);
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration,
+//         "Duration for normal transaction in a block with {} calls and {} raw transactions",
+//         call_cnt,
+//         send_raw_tx_cnt
+//     );
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration_call,
+//         "Duration of calls for normal transaction in a block with {} calls and {} raw
+// transactions",         call_cnt,
+//         send_raw_tx_cnt
+//     );
+
+//     debug!(
+//         target: "e2e:bench",
+//         ?duration_inner,
+//         "Duration of block production for normal transaction in a block with {} calls and {} raw
+// transactions",         call_cnt,
+//         send_raw_tx_cnt
+//     );
+//     Ok(())
+// }
diff --git a/crates/seismic/node/src/chainspec.rs b/crates/seismic/node/src/chainspec.rs
new file mode 100644
index 000000000..ade5d3b08
--- /dev/null
+++ b/crates/seismic/node/src/chainspec.rs
@@ -0,0 +1,101 @@
+use reth_chainspec::{ChainSpec, SEISMIC_DEV, SEISMIC_MAINNET};
+use reth_cli::chainspec::{parse_genesis, ChainSpecParser};
+use std::sync::Arc;
+
+/// Chains supported by reth. First value should be used as the default.
+pub const SUPPORTED_CHAINS: &[&str] = &["seismic", "dev"];
+
+/// Clap value parser for [`ChainSpec`]s.
+///
+/// The value parser matches either a known chain, the path
+/// to a json file, or a json formatted string in-memory. The json needs to be a Genesis struct.
+pub fn chain_value_parser(s: &str) -> eyre::Result<Arc<ChainSpec>, eyre::Error> {
+    Ok(match s {
+        "seismic" => SEISMIC_MAINNET.clone(),
+        "dev" => SEISMIC_DEV.clone(),
+        _ => Arc::new(parse_genesis(s)?.into()),
+    })
+}
+
+/// Ethereum chain specification parser.
+#[derive(Debug, Clone, Default)]
+#[non_exhaustive]
+pub struct SeismicChainSpecParser;
+
+impl ChainSpecParser for SeismicChainSpecParser {
+    type ChainSpec = ChainSpec;
+
+    const SUPPORTED_CHAINS: &'static [&'static str] = SUPPORTED_CHAINS;
+
+    fn parse(s: &str) -> eyre::Result<Arc<ChainSpec>> {
+        chain_value_parser(s)
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use reth_chainspec::EthereumHardforks;
+
+    #[test]
+    fn parse_known_chain_spec() {
+        for &chain in SeismicChainSpecParser::SUPPORTED_CHAINS {
+            assert!(<SeismicChainSpecParser as ChainSpecParser>::parse(chain).is_ok());
+        }
+    }
+
+    #[test]
+    fn parse_raw_chainspec_hardforks() {
+        let s = r#"{
+  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "uncleHash": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
+  "coinbase": "0x0000000000000000000000000000000000000000",
+  "stateRoot": "0x76f118cb05a8bc558388df9e3b4ad66ae1f17ef656e5308cb8f600717251b509",
+  "transactionsTrie": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
+  "receiptTrie": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
+  "bloom": "0x000...000",
+  "difficulty": "0x00",
+  "number": "0x00",
+  "gasLimit": "0x016345785d8a0000",
+  "gasUsed": "0x00",
+  "timestamp": "0x01",
+  "extraData": "0x00",
+  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "nonce": "0x0000000000000000",
+  "baseFeePerGas": "0x07",
+  "withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
+  "blobGasUsed": "0x00",
+  "excessBlobGas": "0x00",
+  "parentBeaconBlockRoot": "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "requestsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
+  "hash": "0xc20e1a771553139cdc77e6c3d5f64a7165d972d327eee9632c9c7d0fe839ded4",
+  "alloc": {},
+  "config": {
+    "ethash": {},
+    "chainId": 1,
+    "homesteadBlock": 0,
+    "daoForkSupport": true,
+    "eip150Block": 0,
+    "eip155Block": 0,
+    "eip158Block": 0,
+    "byzantiumBlock": 0,
+    "constantinopleBlock": 0,
+    "petersburgBlock": 0,
+    "istanbulBlock": 0,
+    "berlinBlock": 0,
+    "londonBlock": 0,
+    "terminalTotalDifficulty": 0,
+    "shanghaiTime": 0,
+    "cancunTime": 0,
+    "pragueTime": 0,
+    "osakaTime": 0
+  }
+}"#;
+
+        let spec = <SeismicChainSpecParser as ChainSpecParser>::parse(s).unwrap();
+        assert!(spec.is_shanghai_active_at_timestamp(0));
+        assert!(spec.is_cancun_active_at_timestamp(0));
+        assert!(spec.is_prague_active_at_timestamp(0));
+        assert!(spec.is_osaka_active_at_timestamp(0));
+    }
+}
diff --git a/crates/seismic/node/src/lib.rs b/crates/seismic/node/src/lib.rs
new file mode 100644
index 000000000..030c2b2f7
--- /dev/null
+++ b/crates/seismic/node/src/lib.rs
@@ -0,0 +1,7 @@
+//! Seismic node
+/// Seismc chain parser
+pub mod chainspec;
+/// Seismic node crate
+pub mod node;
+/// Seismic node utils
+pub mod utils;
diff --git a/crates/seismic/node/src/node.rs b/crates/seismic/node/src/node.rs
new file mode 100644
index 000000000..8180719d1
--- /dev/null
+++ b/crates/seismic/node/src/node.rs
@@ -0,0 +1,4 @@
+use reth_node_ethereum::EthereumNode;
+
+/// Alias for a SeismicNode.
+pub type SeismicNode = EthereumNode;
diff --git a/crates/seismic/node/src/utils.rs b/crates/seismic/node/src/utils.rs
new file mode 100644
index 000000000..280a3fde4
--- /dev/null
+++ b/crates/seismic/node/src/utils.rs
@@ -0,0 +1,352 @@
+use alloy_consensus::{TxEnvelope, TxEnvelope::Seismic};
+use alloy_primitives::{Address, TxKind, B256};
+use alloy_rpc_types::engine::PayloadAttributes;
+use alloy_rpc_types_eth::TransactionRequest;
+use alloy_signer_local::PrivateKeySigner;
+use reth_chainspec::SEISMIC_DEV;
+use reth_payload_builder::EthPayloadBuilderAttributes;
+use secp256k1::{PublicKey, SecretKey};
+use serde_json::Value;
+use std::{path::PathBuf, process::Stdio};
+use tokio::{
+    io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
+    process::Command,
+    sync::mpsc,
+};
+
+/// Seismic reth test command
+#[derive(Debug)]
+pub struct SeismicRethTestCommand();
+impl SeismicRethTestCommand {
+    /// Run the seismic reth test command
+    pub async fn run(tx: mpsc::Sender<()>, mut shutdown_rx: mpsc::Receiver<()>) {
+        let output =
+            Command::new("cargo").arg("metadata").arg("--format-version=1").output().await.unwrap();
+        let metadata: Value = serde_json::from_slice(&output.stdout).unwrap();
+        let workspace_root = metadata.get("workspace_root").unwrap().as_str().unwrap();
+        println!("Workspace root: {}", workspace_root);
+
+        let mut child = Command::new("cargo")
+            .arg("run")
+            .arg("--bin")
+            .arg("seismic-reth") // Specify the binary name
+            .arg("--")
+            .arg("node")
+            .arg("--datadir")
+            .arg(SeismicRethTestCommand::data_dir().to_str().unwrap())
+            .arg("--dev")
+            .arg("--dev.block-max-transactions")
+            .arg("1")
+            .arg("--enclave.mock-server")
+            .arg("-vvvv")
+            .current_dir(workspace_root)
+            .stdout(Stdio::piped())
+            .stderr(Stdio::piped())
+            .spawn()
+            .expect("Failed to start the binary");
+
+        tokio::spawn(async move {
+            let stdout = child.stdout.as_mut().expect("Failed to capture stdout");
+            let stderr = child.stderr.as_mut().expect("Failed to capture stderr");
+            let mut stdout_reader = BufReader::new(stdout);
+            let mut stderr_reader = BufReader::new(stderr);
+            let mut stdout_line = String::new();
+            let mut stderr_line = String::new();
+            let mut sent = false;
+            std::panic::set_hook(Box::new(|info| {
+                eprintln!("❌ PANIC DETECTED: {:?}", info);
+            }));
+
+            loop {
+                tokio::select! {
+                    result = stdout_reader.read_line(&mut stdout_line) => {
+                        if result.unwrap() == 0 {
+                            eprintln!("🛑 STDOUT reached EOF! Breaking loop.");
+                            break;
+                        }
+                        eprint!("{}", stdout_line);
+
+                        if stdout_line.contains("Starting consensus engine") && !sent {
+                            eprintln!("🚀 Reth server is ready!");
+                            let _ = tx.send(()).await;
+                            sent = true;
+                        }
+                        stdout_line.clear();
+                        tokio::io::stdout().flush().await.unwrap();
+                    }
+
+                    result = stderr_reader.read_line(&mut stderr_line) => {
+                        if result.unwrap() == 0 {
+                            eprintln!("🛑 STDERR reached EOF! Breaking loop.");
+                            break;
+                        }
+                        eprint!("{}", stderr_line);
+                        stderr_line.clear();
+                    }
+
+                    Some(_) = shutdown_rx.recv() => {
+                        eprintln!("🛑 Shutdown signal received! Breaking loop.");
+                        break;
+                    }
+                }
+            }
+            println!("✅ Exiting loop.");
+
+            child.kill().await.unwrap();
+            println!("✅ Killed child process.");
+        });
+    }
+
+    /// Get the data directory for the seismic reth test command
+    pub fn data_dir() -> PathBuf {
+        static TEMP_DIR: once_cell::sync::Lazy<tempfile::TempDir> =
+            once_cell::sync::Lazy::new(|| tempfile::tempdir().unwrap());
+        TEMP_DIR.path().to_path_buf()
+    }
+
+    /// Get the chain id for the seismic reth test command
+    pub fn chain_id() -> u64 {
+        SEISMIC_DEV.chain().into()
+    }
+
+    /// Get the url for the seismic reth test command
+    pub fn url() -> String {
+        format!("http://127.0.0.1:8545")
+    }
+}
+
+/// Helper function to create a new eth payload attributes
+pub fn seismic_payload_attributes(timestamp: u64) -> EthPayloadBuilderAttributes {
+    let attributes = PayloadAttributes {
+        timestamp,
+        prev_randao: B256::ZERO,
+        suggested_fee_recipient: Address::ZERO,
+        withdrawals: Some(vec![]),
+        parent_beacon_block_root: Some(B256::ZERO),
+        target_blobs_per_block: None,
+        max_blobs_per_block: None,
+    };
+    EthPayloadBuilderAttributes::new(B256::ZERO, attributes)
+}
+
+/// Test utils for seismic node
+pub mod test_utils {
+    use super::*;
+    use alloy_consensus::{
+        transaction::TxSeismicElements, SignableTransaction, TxSeismic, TypedTransaction,
+    };
+    use alloy_dyn_abi::TypedData;
+    use alloy_eips::{eip2718::Encodable2718, eip712::TypedDataRequest};
+    use alloy_primitives::{aliases::U96, hex_literal, Address, Bytes, PrimitiveSignature, U256};
+    use alloy_rpc_types::{Block, Header, Transaction, TransactionInput, TransactionReceipt};
+    use core::str::FromStr;
+    use enr::EnrKey;
+    use jsonrpsee::http_client::HttpClient;
+    use k256::ecdsa::SigningKey;
+    use reth_e2e_test_utils::transaction::TransactionTestContext;
+    use reth_enclave::MockEnclaveServer;
+    use reth_primitives::TransactionSigned;
+    use reth_rpc_eth_api::EthApiClient;
+
+    /// Get the nonce from the client
+    pub async fn get_nonce(client: &HttpClient, address: Address) -> u64 {
+        let nonce =
+            EthApiClient::<Transaction, Block, TransactionReceipt, Header>::transaction_count(
+                client, address, None,
+            )
+            .await
+            .unwrap();
+        nonce.wrapping_to::<u64>()
+    }
+
+    /// Get an unsigned seismic transaction request
+    pub async fn get_unsigned_seismic_tx_request(
+        sk_wallet: &PrivateKeySigner,
+        nonce: u64,
+        to: TxKind,
+        chain_id: u64,
+        plaintext: Bytes,
+    ) -> TransactionRequest {
+        TransactionRequest {
+            from: Some(sk_wallet.address()),
+            nonce: Some(nonce),
+            value: Some(U256::from(0)),
+            to: Some(to),
+            gas: Some(6000000),
+            gas_price: Some(20e9 as u128),
+            chain_id: Some(chain_id),
+            input: TransactionInput { input: Some(client_encrypt(&plaintext)), data: None },
+            transaction_type: Some(TxSeismic::TX_TYPE),
+            seismic_elements: Some(get_seismic_elements()),
+            ..Default::default()
+        }
+    }
+
+    /// Create a seismic transaction
+    pub async fn get_signed_seismic_tx_bytes(
+        sk_wallet: &PrivateKeySigner,
+        nonce: u64,
+        to: TxKind,
+        chain_id: u64,
+        plaintext: Bytes,
+    ) -> Bytes {
+        let tx = get_unsigned_seismic_tx_request(sk_wallet, nonce, to, chain_id, plaintext).await;
+        let signed = TransactionTestContext::sign_tx(sk_wallet.clone(), tx).await;
+        <TxEnvelope as Encodable2718>::encoded_2718(&signed).into()
+    }
+
+    /// Get an unsigned seismic transaction typed data
+    pub async fn get_unsigned_seismic_tx_typed_data(
+        sk_wallet: &PrivateKeySigner,
+        nonce: u64,
+        to: TxKind,
+        chain_id: u64,
+        decrypted_input: Bytes,
+    ) -> TypedData {
+        let tx_request =
+            get_unsigned_seismic_tx_request(sk_wallet, nonce, to, chain_id, decrypted_input).await;
+        let typed_tx = tx_request.build_consensus_tx().unwrap();
+        match typed_tx {
+            TypedTransaction::Seismic(seismic) => seismic.eip712_to_type_data(),
+            _ => panic!("Typed transaction is not a seismic transaction"),
+        }
+    }
+
+    /// Create a seismic transaction with typed data
+    pub async fn get_signed_seismic_tx_typed_data(
+        sk_wallet: &PrivateKeySigner,
+        nonce: u64,
+        to: TxKind,
+        chain_id: u64,
+        plaintext: Bytes,
+    ) -> TypedDataRequest {
+        let tx = get_unsigned_seismic_tx_request(sk_wallet, nonce, to, chain_id, plaintext).await;
+        tx.seismic_elements.unwrap().message_version = 2;
+        let signed = TransactionTestContext::sign_tx(sk_wallet.clone(), tx).await;
+
+        match signed {
+            Seismic(tx) => tx.into(),
+            _ => panic!("Signed transaction is not a seismic transaction"),
+        }
+    }
+
+    /// Get the network public key
+    pub fn get_network_public_key() -> PublicKey {
+        MockEnclaveServer::get_public_key()
+    }
+
+    /// Encrypt plaintext using network public key and client private key
+    pub fn get_ciphertext() -> Bytes {
+        let encrypted_data = client_encrypt(&get_plaintext());
+        encrypted_data
+    }
+
+    /// Encrypt plaintext using network public key and client private key
+    pub fn client_encrypt(plaintext: &Bytes) -> Bytes {
+        get_seismic_elements()
+            .client_encrypt(plaintext, &get_network_public_key(), &get_encryption_private_key())
+            .unwrap()
+    }
+
+    /// Decrypt ciphertext using network public key and client private key
+    pub fn client_decrypt(ciphertext: &Bytes) -> Bytes {
+        get_seismic_elements()
+            .client_decrypt(ciphertext, &get_network_public_key(), &get_encryption_private_key())
+            .unwrap()
+    }
+
+    /// Get the encryption private key
+    pub fn get_encryption_private_key() -> SecretKey {
+        let private_key_bytes =
+            hex_literal::hex!("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f");
+        SecretKey::from_slice(&private_key_bytes).expect("Invalid private key")
+    }
+
+    /// Get the encryption nonce
+    pub fn get_encryption_nonce() -> U96 {
+        U96::MAX
+    }
+
+    /// Get the seismic elements
+    pub fn get_seismic_elements() -> TxSeismicElements {
+        TxSeismicElements {
+            encryption_pubkey: get_encryption_private_key().public(),
+            encryption_nonce: get_encryption_nonce(),
+            message_version: 0,
+        }
+    }
+
+    /// Get a wrong private key
+    pub fn get_wrong_private_key() -> SecretKey {
+        let private_key_bytes =
+            hex_literal::hex!("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1e");
+        SecretKey::from_slice(&private_key_bytes).expect("Invalid private key")
+    }
+
+    /// Get the signing private key
+    pub fn get_signing_private_key() -> SigningKey {
+        let private_key_bytes =
+            hex_literal::hex!("ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80");
+        let signing_key =
+            SigningKey::from_bytes(&private_key_bytes.into()).expect("Invalid private key");
+        signing_key
+    }
+
+    /// Get the plaintext for a seismic transaction
+    pub fn get_plaintext() -> Bytes {
+        Bytes::from_str("24a7f0b7000000000000000000000000000000000000000000000000000000000000000b")
+            .unwrap()
+    }
+
+    /// Get a seismic transaction
+    pub fn get_seismic_tx() -> TxSeismic {
+        let ciphertext = get_ciphertext();
+        TxSeismic {
+            chain_id: 1337,
+            nonce: 1,
+            gas_price: 20000000000,
+            gas_limit: 210000,
+            to: alloy_primitives::TxKind::Call(
+                Address::from_str("0x5fbdb2315678afecb367f032d93f642f64180aa3").unwrap(),
+            ),
+            value: U256::ZERO,
+            input: Bytes::copy_from_slice(&ciphertext),
+            seismic_elements: get_seismic_elements(),
+        }
+    }
+
+    /// Get the encoding of a signed seismic transaction
+    pub fn get_signed_seismic_tx_encoding() -> Vec<u8> {
+        let signed_tx = get_signed_seismic_tx();
+        let mut encoding = Vec::new();
+
+        signed_tx.encode_2718(&mut encoding);
+        encoding
+    }
+
+    /// Sign a seismic transaction
+    pub fn sign_seismic_tx(tx: &TxSeismic) -> PrimitiveSignature {
+        let _signature = get_signing_private_key()
+            .clone()
+            .sign_prehash_recoverable(tx.signature_hash().as_slice())
+            .expect("Failed to sign");
+
+        let recoverid = _signature.1;
+        let _signature = _signature.0;
+
+        let signature = PrimitiveSignature::new(
+            U256::from_be_slice(_signature.r().to_bytes().as_slice()),
+            U256::from_be_slice(_signature.s().to_bytes().as_slice()),
+            recoverid.is_y_odd(),
+        );
+
+        signature
+    }
+
+    /// Get a signed seismic transaction
+    pub fn get_signed_seismic_tx() -> TransactionSigned {
+        let tx = get_seismic_tx();
+        let signature = sign_seismic_tx(&tx);
+        SignableTransaction::into_signed(tx, signature).into()
+    }
+}
diff --git a/crates/seismic/node/tests/basic.rs b/crates/seismic/node/tests/basic.rs
new file mode 100644
index 000000000..537c7c7ff
--- /dev/null
+++ b/crates/seismic/node/tests/basic.rs
@@ -0,0 +1,135 @@
+//! This file is used to test the features of the seismic node without rpc interactions.
+//! See integration.rs for rpc interactions.
+use alloy_primitives::{Bytes, TxKind, U256};
+use alloy_provider::layers::seismic::test_utils;
+use reth_chainspec::SEISMIC_DEV;
+use reth_e2e_test_utils::setup_engine;
+use reth_enclave::start_default_mock_enclave_server;
+use reth_tracing::tracing::*;
+use seismic_node::{
+    node::SeismicNode,
+    utils::{
+        seismic_payload_attributes,
+        test_utils::{client_decrypt, get_signed_seismic_tx_bytes},
+    },
+};
+
+#[tokio::test(flavor = "multi_thread")]
+async fn contract() -> eyre::Result<()> {
+    reth_tracing::init_test_tracing();
+    let chain_id = SEISMIC_DEV.chain;
+
+    let (mut nodes, _tasks, wallet) =
+        setup_engine::<SeismicNode>(2, SEISMIC_DEV.clone(), false, seismic_payload_attributes)
+            .await?;
+    start_default_mock_enclave_server().await;
+    debug!(target: "e2e:contract", "setup seismic node");
+    let mut second_node = nodes.pop().unwrap();
+    let mut first_node = nodes.pop().unwrap();
+    let mut nonce = 0;
+    let mut block_number;
+
+    // ==================== first block for encrypted transaction ====================
+    // Contract deployed
+    //     pragma solidity ^0.8.13;
+    // contract SeismicCounter {
+    //     suint256 number;
+    //     constructor() payable {
+    //         number = 0;
+    //     }
+    //     function setNumber(suint256 newNumber) public {
+    //         number = newNumber;
+    //     }
+    //     function increment() public {
+    //         number++;
+    //     }
+    //     function isOdd() public view returns (bool) {
+    //         return number % 2 == 1;
+    //     }
+    // }
+    // deploy contract
+    let raw_tx = get_signed_seismic_tx_bytes(
+        &wallet.inner,
+        nonce,
+        TxKind::Create,
+        chain_id.id(),
+        test_utils::ContractTestContext::get_deploy_input_plaintext(),
+    )
+    .await;
+
+    // Make the nodes advance
+    let tx_hash = first_node.rpc.inject_tx(raw_tx).await?;
+    let (payload, _) = first_node.advance_block().await?;
+    let block_hash = payload.block().hash();
+    block_number = payload.block().number;
+    first_node.assert_new_block(tx_hash, block_hash, block_number).await?;
+    second_node.engine_api.update_forkchoice(block_hash, block_hash).await?;
+    second_node.assert_new_block(tx_hash, block_hash, block_number).await?;
+
+    let tx_receipt = second_node.rpc.transaction_receipt(tx_hash).await?.unwrap();
+    assert_eq!(tx_receipt.status(), true);
+    let contract_addr = tx_receipt.contract_address.unwrap();
+
+    let code = second_node.rpc.get_code(contract_addr, block_number).await?;
+    assert_eq!(test_utils::ContractTestContext::get_code(), code);
+
+    // call contract function to verify
+    nonce += 1;
+
+    let raw_tx = get_signed_seismic_tx_bytes(
+        &wallet.inner,
+        nonce,
+        TxKind::Call(contract_addr),
+        chain_id.id(),
+        test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+    )
+    .await;
+
+    let encrypted_output: Bytes = first_node.rpc.signed_call(raw_tx.clone(), block_number).await?;
+    let decrypted_output = client_decrypt(&encrypted_output);
+    assert_eq!(U256::from_be_slice(&decrypted_output), U256::ZERO);
+
+    debug!(
+        target: "e2e:contract",
+        ?raw_tx,
+        ?encrypted_output,
+        ?decrypted_output,
+        "transaction call isOdd() before change",
+    );
+
+    // ==================== second block for changing the state of the contract account
+    let raw_tx = get_signed_seismic_tx_bytes(
+        &wallet.inner,
+        nonce,
+        TxKind::Call(contract_addr),
+        chain_id.id(),
+        test_utils::ContractTestContext::get_set_number_input_plaintext(),
+    )
+    .await;
+
+    // Make the first node advance
+    let tx_hash = first_node.rpc.inject_tx(raw_tx).await?;
+    let (payload, _) = first_node.advance_block().await?;
+    let block_hash = payload.block().hash();
+    block_number = payload.block().number;
+    first_node.assert_new_block(tx_hash, block_hash, block_number).await?;
+    second_node.engine_api.update_forkchoice(block_hash, block_hash).await?;
+    second_node.assert_new_block(tx_hash, block_hash, 2).await?;
+
+    // call contract function to verify
+    nonce += 1;
+    let raw_tx = get_signed_seismic_tx_bytes(
+        &wallet.inner,
+        nonce,
+        TxKind::Call(contract_addr),
+        chain_id.id(),
+        test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+    )
+    .await;
+
+    let encrypted_output: Bytes = first_node.rpc.signed_call(raw_tx.clone(), block_number).await?;
+    let decrypted_output = client_decrypt(&encrypted_output);
+    assert_eq!(U256::from_be_slice(&decrypted_output), U256::from(1));
+
+    Ok(())
+}
diff --git a/crates/seismic/node/tests/integration.rs b/crates/seismic/node/tests/integration.rs
new file mode 100644
index 000000000..b243a56f8
--- /dev/null
+++ b/crates/seismic/node/tests/integration.rs
@@ -0,0 +1,583 @@
+//! This file is used to test the seismic node.
+use alloy_dyn_abi::EventExt;
+use alloy_json_abi::{Event, EventParam};
+use alloy_network::{Ethereum, EthereumWallet, NetworkWallet, TransactionBuilder};
+use alloy_primitives::{
+    aliases::{B96, U96},
+    hex,
+    hex::FromHex,
+    Bytes, IntoLogData, TxKind, B256, U256,
+};
+use alloy_provider::{layers::seismic::test_utils, Provider, SeismicSignedProvider, SendableTx};
+use alloy_rpc_types::{
+    Block, Header, Transaction, TransactionInput, TransactionReceipt, TransactionRequest,
+};
+use alloy_sol_types::{sol, SolCall, SolValue};
+use reth_e2e_test_utils::wallet::Wallet;
+use reth_rpc_eth_api::EthApiClient;
+use seismic_enclave::aes_decrypt;
+use seismic_node::utils::{
+    test_utils::{
+        client_decrypt, get_nonce, get_signed_seismic_tx_bytes, get_signed_seismic_tx_typed_data,
+        get_unsigned_seismic_tx_request,
+    },
+    SeismicRethTestCommand,
+};
+use std::{thread, time::Duration};
+use tokio::sync::mpsc;
+
+const PRECOMPILES_TEST_SET_AES_KEY_SELECTOR: &str = "a0619040"; // setAESKey(suint256)
+const PRECOMPILES_TEST_ENCRYPTED_LOG_SELECTOR: &str = "28696e36"; // submitMessage(bytes)
+
+#[tokio::test(flavor = "multi_thread")]
+async fn integration_test() {
+    let (tx, mut rx) = mpsc::channel(1);
+    let (shutdown_tx, shutdown_rx) = mpsc::channel(1);
+
+    SeismicRethTestCommand::run(tx, shutdown_rx).await;
+    rx.recv().await.unwrap();
+
+    test_seismic_reth_rpc_with_rust_client().await;
+    test_seismic_reth_rpc().await;
+    test_seismic_precompiles_end_to_end().await;
+    test_seismic_reth_rpc_with_typed_data().await;
+
+    let _ = shutdown_tx.try_send(()).unwrap();
+    println!("shutdown signal sent");
+    thread::sleep(Duration::from_secs(1));
+}
+
+async fn test_seismic_reth_rpc_with_typed_data() {
+    let reth_rpc_url = SeismicRethTestCommand::url();
+    let chain_id = SeismicRethTestCommand::chain_id();
+    let client = jsonrpsee::http_client::HttpClientBuilder::default().build(reth_rpc_url).unwrap();
+    let wallet = Wallet::default().with_chain_id(chain_id);
+
+    let tx_hash =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::send_raw_transaction(
+            &client,
+            get_signed_seismic_tx_typed_data(
+                &wallet.inner,
+                get_nonce(&client, wallet.inner.address()).await,
+                TxKind::Create,
+                chain_id,
+                test_utils::ContractTestContext::get_deploy_input_plaintext(),
+            )
+            .await
+            .into(),
+        )
+        .await
+        .unwrap();
+    // assert_eq!(tx_hash, itx.tx_hashes[0]);
+    thread::sleep(Duration::from_secs(1));
+    println!("eth_sendRawTransaction deploying contract tx_hash: {:?}", tx_hash);
+
+    // Get the transaction receipt
+    let receipt =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::transaction_receipt(
+            &client, tx_hash,
+        )
+        .await
+        .unwrap()
+        .unwrap();
+    let contract_addr = receipt.contract_address.unwrap();
+    println!(
+        "eth_getTransactionReceipt getting contract deployment transaction receipt: {:?}",
+        receipt
+    );
+    assert_eq!(receipt.status(), true);
+
+    // Make sure the code of the contract is deployed
+    let code = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::get_code(
+        &client,
+        contract_addr,
+        None,
+    )
+    .await
+    .unwrap();
+    assert_eq!(test_utils::ContractTestContext::get_code(), code);
+    println!("eth_getCode getting contract deployment code: {:?}", code);
+
+    // eth_call to check the parity. Should be 0
+    let output = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::call(
+        &client,
+        get_signed_seismic_tx_typed_data(
+            &wallet.inner,
+            get_nonce(&client, wallet.inner.address()).await,
+            TxKind::Call(contract_addr),
+            chain_id,
+            test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+        )
+        .await
+        .into(),
+        None,
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    let decrypted_output = client_decrypt(&output);
+    println!("eth_call decrypted output: {:?}", decrypted_output);
+    assert_eq!(U256::from_be_slice(&decrypted_output), U256::ZERO);
+}
+
+// this is the same test as basic.rs but with actual RPC calls and standalone reth instance
+// with rust client in alloy
+async fn test_seismic_reth_rpc_with_rust_client() {
+    let reth_rpc_url = SeismicRethTestCommand::url();
+    let chain_id = SeismicRethTestCommand::chain_id();
+    let _wallet = Wallet::default().with_chain_id(chain_id);
+    let wallet = EthereumWallet::from(_wallet.inner);
+    let address = <EthereumWallet as NetworkWallet<Ethereum>>::default_signer_address(&wallet);
+
+    let provider =
+        SeismicSignedProvider::new(wallet.clone(), reqwest::Url::parse(&reth_rpc_url).unwrap());
+    let pending_transaction = provider
+        .send_transaction(
+            TransactionRequest::default()
+                .with_input(test_utils::ContractTestContext::get_deploy_input_plaintext())
+                .with_kind(TxKind::Create)
+                .with_from(address),
+        )
+        .await
+        .unwrap();
+    let tx_hash = pending_transaction.tx_hash();
+    // assert_eq!(tx_hash, itx.tx_hashes[0]);
+    thread::sleep(Duration::from_secs(1));
+    println!("eth_sendRawTransaction deploying contract tx_hash: {:?}", tx_hash);
+
+    // Get the transaction receipt
+    let receipt = provider.get_transaction_receipt(tx_hash.clone()).await.unwrap().unwrap();
+    let contract_addr = receipt.contract_address.unwrap();
+    println!(
+        "eth_getTransactionReceipt getting contract deployment transaction receipt: {:?}",
+        receipt
+    );
+    assert_eq!(receipt.status(), true);
+
+    // Make sure the code of the contract is deployed
+    let code = provider.get_code_at(contract_addr).await.unwrap();
+    assert_eq!(test_utils::ContractTestContext::get_code(), code);
+    println!("eth_getCode getting contract deployment code: {:?}", code);
+
+    // eth_call to check the parity. Should be 0
+    let output = provider
+        .seismic_call(SendableTx::Builder(
+            TransactionRequest::default()
+                .with_input(test_utils::ContractTestContext::get_is_odd_input_plaintext())
+                .with_to(contract_addr)
+                .with_from(address),
+        ))
+        .await
+        .unwrap();
+    println!("eth_call decrypted output: {:?}", output);
+    assert_eq!(U256::from_be_slice(&output), U256::ZERO);
+
+    // Send transaction to set suint
+    let pending_transaction = provider
+        .send_transaction(
+            TransactionRequest::default()
+                .with_input(test_utils::ContractTestContext::get_set_number_input_plaintext())
+                .with_to(contract_addr)
+                .with_from(address),
+        )
+        .await
+        .unwrap();
+    let tx_hash = pending_transaction.tx_hash();
+    println!("eth_sendRawTransaction setting number transaction tx_hash: {:?}", tx_hash);
+    thread::sleep(Duration::from_secs(1));
+
+    // Get the transaction receipt
+    let receipt = provider.get_transaction_receipt(tx_hash.clone()).await.unwrap().unwrap();
+    println!("eth_getTransactionReceipt getting set_number transaction receipt: {:?}", receipt);
+    assert_eq!(receipt.status(), true);
+
+    // Final eth_call to check the parity. Should be 1
+    let output = provider
+        .seismic_call(SendableTx::Builder(
+            TransactionRequest::default()
+                .with_input(test_utils::ContractTestContext::get_is_odd_input_plaintext())
+                .with_to(contract_addr)
+                .with_from(address),
+        ))
+        .await
+        .unwrap();
+    println!("eth_call decrypted output: {:?}", output);
+    assert_eq!(U256::from_be_slice(&output), U256::from(1));
+
+    // eth_estimateGas cannot be called directly with rust client
+    // eth_createAccessList cannot be called directly with rust client
+    // rust client also does not support Eip712::typed data requests
+}
+
+// this is the same test as basic.rs but with actual RPC calls and standalone reth instance
+async fn test_seismic_reth_rpc() {
+    let reth_rpc_url = SeismicRethTestCommand::url();
+    let chain_id = SeismicRethTestCommand::chain_id();
+    let client = jsonrpsee::http_client::HttpClientBuilder::default().build(reth_rpc_url).unwrap();
+    let wallet = Wallet::default().with_chain_id(chain_id);
+
+    let tx_hash =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::send_raw_transaction(
+            &client,
+            get_signed_seismic_tx_bytes(
+                &wallet.inner,
+                get_nonce(&client, wallet.inner.address()).await,
+                TxKind::Create,
+                chain_id,
+                test_utils::ContractTestContext::get_deploy_input_plaintext(),
+            )
+            .await
+            .into(),
+        )
+        .await
+        .unwrap();
+    // assert_eq!(tx_hash, itx.tx_hashes[0]);
+    thread::sleep(Duration::from_secs(1));
+    println!("eth_sendRawTransaction deploying contract tx_hash: {:?}", tx_hash);
+
+    // Get the transaction receipt
+    let receipt =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::transaction_receipt(
+            &client, tx_hash,
+        )
+        .await
+        .unwrap()
+        .unwrap();
+    let contract_addr = receipt.contract_address.unwrap();
+    println!(
+        "eth_getTransactionReceipt getting contract deployment transaction receipt: {:?}",
+        receipt
+    );
+    assert_eq!(receipt.status(), true);
+
+    // Make sure the code of the contract is deployed
+    let code = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::get_code(
+        &client,
+        contract_addr,
+        None,
+    )
+    .await
+    .unwrap();
+    assert_eq!(test_utils::ContractTestContext::get_code(), code);
+    println!("eth_getCode getting contract deployment code: {:?}", code);
+
+    // eth_call to check the parity. Should be 0
+    let output = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::call(
+        &client,
+        get_signed_seismic_tx_bytes(
+            &wallet.inner,
+            get_nonce(&client, wallet.inner.address()).await,
+            TxKind::Call(contract_addr),
+            chain_id,
+            test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+        )
+        .await
+        .into(),
+        None,
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    let decrypted_output = client_decrypt(&output);
+    println!("eth_call decrypted output: {:?}", decrypted_output);
+    assert_eq!(U256::from_be_slice(&decrypted_output), U256::ZERO);
+
+    // Send transaction to set suint
+    let tx_hash =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::send_raw_transaction(
+            &client,
+            get_signed_seismic_tx_bytes(
+                &wallet.inner,
+                get_nonce(&client, wallet.inner.address()).await,
+                TxKind::Call(contract_addr),
+                chain_id,
+                test_utils::ContractTestContext::get_set_number_input_plaintext(),
+            )
+            .await
+            .into(),
+        )
+        .await
+        .unwrap();
+    println!("eth_sendRawTransaction setting number transaction tx_hash: {:?}", tx_hash);
+    thread::sleep(Duration::from_secs(1));
+
+    // Get the transaction receipt
+    let receipt =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::transaction_receipt(
+            &client, tx_hash,
+        )
+        .await
+        .unwrap()
+        .unwrap();
+    println!("eth_getTransactionReceipt getting set_number transaction receipt: {:?}", receipt);
+    assert_eq!(receipt.status(), true);
+
+    // Final eth_call to check the parity. Should be 1
+    let output = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::call(
+        &client,
+        get_signed_seismic_tx_bytes(
+            &wallet.inner,
+            get_nonce(&client, wallet.inner.address()).await,
+            TxKind::Call(contract_addr),
+            chain_id,
+            test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+        )
+        .await
+        .into(),
+        None,
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    let decrypted_output = client_decrypt(&output);
+    println!("eth_call decrypted output: {:?}", decrypted_output);
+    assert_eq!(U256::from_be_slice(&decrypted_output), U256::from(1));
+
+    let simulate_tx_request = get_unsigned_seismic_tx_request(
+        &wallet.inner,
+        get_nonce(&client, wallet.inner.address()).await,
+        TxKind::Call(contract_addr),
+        chain_id,
+        test_utils::ContractTestContext::get_is_odd_input_plaintext(),
+    )
+    .await;
+
+    // test eth_estimateGas
+    let gas = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::estimate_gas(
+        &client,
+        simulate_tx_request.clone(),
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    println!("eth_estimateGas for is_odd() gas: {:?}", gas);
+    assert!(gas > U256::ZERO);
+
+    let access_list =
+        EthApiClient::<Transaction, Block, TransactionReceipt, Header>::create_access_list(
+            &client,
+            simulate_tx_request.clone(),
+            None,
+        )
+        .await
+        .unwrap();
+    println!("eth_createAccessList for is_odd() access_list: {:?}", access_list);
+
+    // test call
+    let output = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::call(
+        &client,
+        simulate_tx_request.clone().into(),
+        None,
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    println!("eth_call is_odd() decrypted output: {:?}", output);
+
+    // call with no transaction type
+    let output = EthApiClient::<Transaction, Block, TransactionReceipt, Header>::call(
+        &client,
+        TransactionRequest {
+            from: Some(wallet.inner.address()),
+            input: TransactionInput {
+                data: Some(test_utils::ContractTestContext::get_is_odd_input_plaintext()),
+                ..Default::default()
+            },
+            to: Some(TxKind::Call(contract_addr)),
+            ..Default::default()
+        }
+        .into(),
+        None,
+        None,
+        None,
+    )
+    .await
+    .unwrap();
+    println!("eth_call is_odd() with no transaction type decrypted output: {:?}", output);
+}
+
+async fn test_seismic_precompiles_end_to_end() {
+    let reth_rpc_url = SeismicRethTestCommand::url();
+    let chain_id = SeismicRethTestCommand::chain_id();
+    let _wallet = Wallet::default().with_chain_id(chain_id);
+    let wallet = EthereumWallet::from(_wallet.inner);
+    let address = <EthereumWallet as NetworkWallet<Ethereum>>::default_signer_address(&wallet);
+
+    let provider =
+        SeismicSignedProvider::new(wallet.clone(), reqwest::Url::parse(&reth_rpc_url).unwrap());
+    let pending_transaction = provider
+        .send_transaction(
+            TransactionRequest::default()
+                .with_input(get_encryption_precompiles_contracts())
+                .with_kind(TxKind::Create)
+                .with_from(address),
+        )
+        .await
+        .unwrap();
+    let tx_hash = pending_transaction.tx_hash();
+    thread::sleep(Duration::from_secs(1));
+
+    // Get the transaction receipt
+    let receipt = provider.get_transaction_receipt(tx_hash.clone()).await.unwrap().unwrap();
+    let contract_addr = receipt.contract_address.unwrap();
+    assert_eq!(receipt.status(), true);
+
+    let code = provider.get_code_at(contract_addr).await.unwrap();
+    assert_eq!(get_runtime_code(), code);
+
+    // Prepare addresses & keys
+    let private_key =
+        B256::from_hex("7e34abdcd62eade2e803e0a8123a0015ce542b380537eff288d6da420bcc2d3b").unwrap();
+
+    //
+    // 2. Tx #1: Set AES key in the contract
+    //
+    let unencrypted_aes_key = get_input_data(PRECOMPILES_TEST_SET_AES_KEY_SELECTOR, private_key);
+    let pending_transaction = provider
+        .send_transaction(
+            TransactionRequest::default()
+                .with_input(unencrypted_aes_key)
+                .with_kind(TxKind::Call(contract_addr))
+                .with_from(address),
+        )
+        .await
+        .unwrap();
+    let tx_hash = pending_transaction.tx_hash();
+    thread::sleep(Duration::from_secs(1));
+
+    // Get the transaction receipt
+    let receipt = provider.get_transaction_receipt(tx_hash.clone()).await.unwrap().unwrap();
+    assert_eq!(receipt.status(), true);
+
+    //
+    // 3. Tx #2: Encrypt & send "hello world"
+    //
+    let raw_message = "hello world";
+    let message = Bytes::from(raw_message);
+    type PlaintextType = Bytes; // used for AbiEncode / AbiDecode
+
+    let encoded_message = PlaintextType::abi_encode(&message);
+    let unencrypted_input =
+        concat_input_data(PRECOMPILES_TEST_ENCRYPTED_LOG_SELECTOR, encoded_message.into());
+
+    let pending_transaction = provider
+        .send_transaction(
+            TransactionRequest::default()
+                .with_input(unencrypted_input)
+                .with_kind(TxKind::Call(contract_addr))
+                .with_from(address),
+        )
+        .await
+        .unwrap();
+    let tx_hash = pending_transaction.tx_hash();
+    thread::sleep(Duration::from_secs(1));
+
+    // Get the transaction receipt
+    let receipt = provider.get_transaction_receipt(tx_hash.clone()).await.unwrap().unwrap();
+    assert_eq!(receipt.status(), true);
+
+    //
+    // 4. Tx #3: On-chain decrypt
+    //
+    let logs = receipt.inner.logs();
+    assert_eq!(logs.len(), 1);
+    assert_eq!(logs[0].inner.address, contract_addr);
+
+    // Decode the EncryptedMessage event
+    let log_data = logs[0].inner.data.clone();
+    let event = Event {
+        name: "EncryptedMessage".into(),
+        inputs: vec![
+            EventParam { ty: "int96".into(), indexed: true, ..Default::default() },
+            EventParam { ty: "bytes".into(), indexed: false, ..Default::default() },
+        ],
+        anonymous: false,
+    };
+    let decoded = event.decode_log(&log_data.into_log_data(), false).unwrap();
+
+    sol! {
+        #[derive(Debug, PartialEq)]
+        interface Encryption {
+            function decrypt(uint96 nonce, bytes calldata ciphertext)
+                external
+                view
+                onlyOwner
+                returns (bytes memory plaintext);
+        }
+    }
+
+    // Extract (nonce, ciphertext)
+    let nonce: U96 =
+        U96::from_be_bytes(B96::from_slice(&decoded.indexed[0].abi_encode_packed()).into());
+    let ciphertext = Bytes::from(decoded.body[0].abi_encode_packed());
+
+    let call = Encryption::decryptCall { nonce, ciphertext: ciphertext.clone() };
+    let unencrypted_decrypt_call: Bytes = call.abi_encode().into();
+
+    let decrypted_output = provider
+        .seismic_call(SendableTx::Builder(
+            TransactionRequest::default()
+                .with_input(unencrypted_decrypt_call)
+                .with_kind(TxKind::Call(contract_addr))
+                .with_from(address),
+        ))
+        .await
+        .unwrap();
+    let result_bytes = PlaintextType::abi_decode(&Bytes::from(decrypted_output), false)
+        .expect("failed to decode the bytes");
+    let final_string =
+        String::from_utf8(result_bytes.to_vec()).expect("invalid utf8 in decrypted bytes");
+    assert_eq!(final_string, raw_message);
+
+    // Local Decrypt
+    let secp_private = secp256k1::SecretKey::from_slice(private_key.as_ref()).unwrap();
+    let aes_key: &[u8; 32] = &secp_private.secret_bytes()[0..32].try_into().unwrap();
+    let nonce: [u8; 12] = decoded.indexed[0].abi_encode_packed().try_into().unwrap();
+    let decrypted_locally =
+        aes_decrypt(aes_key.into(), &ciphertext, nonce).expect("AES decryption failed");
+    assert_eq!(decrypted_locally, message);
+}
+
+/// Get the deploy input plaintext
+/// https://github.com/SeismicSystems/early-builds/blob/main/encrypted_logs/src/end-to-end-mvp/EncryptedLogs.sol
+fn get_encryption_precompiles_contracts() -> Bytes {
+    Bytes::from_static(&hex!("6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610dce8061005b5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806328696e361461004e5780638da5cb5b1461006a578063a061904014610088578063ce75255b146100a4575b5f5ffd5b61006860048036038101906100639190610687565b6100d4565b005b61007261019a565b60405161007f9190610711565b60405180910390f35b6100a2600480360381019061009d919061075d565b6101be565b005b6100be60048036038101906100b991906107c9565b610256565b6040516100cb9190610896565b60405180910390f35b5f6100dd610412565b90505f61012d8285858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506104f5565b9050816bffffffffffffffffffffffff167f093a34a48cc07b4bf1355d9c15ec71077c85342d872753188302f99341f961008260405160200161017091906108f0565b60405160208183030381529060405260405161018c9190610896565b60405180910390a250505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390610986565b60405180910390fd5b8060018190b15050565b60605f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610986565b60405180910390fd5b5f838390501161032b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610322906109ee565b60405180910390fd5b5f606790505f6001b086868660405160200161034a9493929190610a92565b60405160208183030381529060405290505f5f8373ffffffffffffffffffffffffffffffffffffffff168360405161038291906108f0565b5f60405180830381855afa9150503d805f81146103ba576040519150601f19603f3d011682016040523d82523d5f602084013e6103bf565b606091505b509150915081610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90610b3c565b60405180910390fd5b809450505050509392505050565b5f5f606490505f5f8273ffffffffffffffffffffffffffffffffffffffff1660206040516020016104439190610b9d565b60405160208183030381529060405260405161045f91906108f0565b5f60405180830381855afa9150503d805f8114610497576040519150601f19603f3d011682016040523d82523d5f602084013e61049c565b606091505b5091509150816104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d890610c01565b60405180910390fd5b5f60208201519050805f1c94505050505090565b60605f606690505f6001b0858560405160200161051493929190610c1f565b60405160208183030381529060405290505f5f8373ffffffffffffffffffffffffffffffffffffffff168360405161054c91906108f0565b5f60405180830381855afa9150503d805f8114610584576040519150601f19603f3d011682016040523d82523d5f602084013e610589565b606091505b5091509150816105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590610cc7565b60405180910390fd5b5f815111610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890610d55565b60405180910390fd5b8094505050505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261064757610646610626565b5b8235905067ffffffffffffffff8111156106645761066361062a565b5b6020830191508360018202830111156106805761067f61062e565b5b9250929050565b5f5f6020838503121561069d5761069c61061e565b5b5f83013567ffffffffffffffff8111156106ba576106b9610622565b5b6106c685828601610632565b92509250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106fb826106d2565b9050919050565b61070b816106f1565b82525050565b5f6020820190506107245f830184610702565b92915050565b5f819050919050565b61073c8161072a565b8114610746575f5ffd5b50565b5f8135905061075781610733565b92915050565b5f602082840312156107725761077161061e565b5b5f61077f84828501610749565b91505092915050565b5f6bffffffffffffffffffffffff82169050919050565b6107a881610788565b81146107b2575f5ffd5b50565b5f813590506107c38161079f565b92915050565b5f5f5f604084860312156107e0576107df61061e565b5b5f6107ed868287016107b5565b935050602084013567ffffffffffffffff81111561080e5761080d610622565b5b61081a86828701610632565b92509250509250925092565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61086882610826565b6108728185610830565b9350610882818560208601610840565b61088b8161084e565b840191505092915050565b5f6020820190508181035f8301526108ae818461085e565b905092915050565b5f81905092915050565b5f6108ca82610826565b6108d481856108b6565b93506108e4818560208601610840565b80840191505092915050565b5f6108fb82846108c0565b915081905092915050565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f610970602183610906565b915061097b82610916565b604082019050919050565b5f6020820190508181035f83015261099d81610964565b9050919050565b7f436970686572746578742063616e6e6f7420626520656d7074790000000000005f82015250565b5f6109d8601a83610906565b91506109e3826109a4565b602082019050919050565b5f6020820190508181035f830152610a05816109cc565b9050919050565b5f819050919050565b610a26610a218261072a565b610a0c565b82525050565b5f8160a01b9050919050565b5f610a4282610a2c565b9050919050565b610a5a610a5582610788565b610a38565b82525050565b828183375f83830152505050565b5f610a7983856108b6565b9350610a86838584610a60565b82840190509392505050565b5f610a9d8287610a15565b602082019150610aad8286610a49565b600c82019150610abe828486610a6e565b915081905095945050505050565b7f414553206465637279707420707265636f6d70696c652063616c6c206661696c5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f610b26602283610906565b9150610b3182610acc565b604082019050919050565b5f6020820190508181035f830152610b5381610b1a565b9050919050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f610b7f82610b69565b9050919050565b610b97610b9282610b5a565b610b75565b82525050565b5f610ba88284610b86565b60048201915081905092915050565b7f524e4720507265636f6d70696c652063616c6c206661696c65640000000000005f82015250565b5f610beb601a83610906565b9150610bf682610bb7565b602082019050919050565b5f6020820190508181035f830152610c1881610bdf565b9050919050565b5f610c2a8286610a15565b602082019150610c3a8285610a49565b600c82019150610c4a82846108c0565b9150819050949350505050565b7f41455320656e637279707420707265636f6d70696c652063616c6c206661696c5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f610cb1602283610906565b9150610cbc82610c57565b604082019050919050565b5f6020820190508181035f830152610cde81610ca5565b9050919050565b7f456e6372797074696f6e2063616c6c2072657475726e6564206e6f206f7574705f8201527f7574000000000000000000000000000000000000000000000000000000000000602082015250565b5f610d3f602283610906565b9150610d4a82610ce5565b604082019050919050565b5f6020820190508181035f830152610d6c81610d33565b905091905056fea2646970667358221220cdc3edd7891930a1ad58becbe2b3f7679ecfc78a3b1f8a803d4c381c8318287864736f6c637827302e382e32382d63692e323032342e31312e342b636f6d6d69742e32306261666332392e6d6f640058"))
+}
+
+fn get_runtime_code() -> Bytes {
+    Bytes::from_static(&hex!("608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806328696e361461004e5780638da5cb5b1461006a578063a061904014610088578063ce75255b146100a4575b5f5ffd5b61006860048036038101906100639190610687565b6100d4565b005b61007261019a565b60405161007f9190610711565b60405180910390f35b6100a2600480360381019061009d919061075d565b6101be565b005b6100be60048036038101906100b991906107c9565b610256565b6040516100cb9190610896565b60405180910390f35b5f6100dd610412565b90505f61012d8285858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506104f5565b9050816bffffffffffffffffffffffff167f093a34a48cc07b4bf1355d9c15ec71077c85342d872753188302f99341f961008260405160200161017091906108f0565b60405160208183030381529060405260405161018c9190610896565b60405180910390a250505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390610986565b60405180910390fd5b8060018190b15050565b60605f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610986565b60405180910390fd5b5f838390501161032b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610322906109ee565b60405180910390fd5b5f606790505f6001b086868660405160200161034a9493929190610a92565b60405160208183030381529060405290505f5f8373ffffffffffffffffffffffffffffffffffffffff168360405161038291906108f0565b5f60405180830381855afa9150503d805f81146103ba576040519150601f19603f3d011682016040523d82523d5f602084013e6103bf565b606091505b509150915081610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb90610b3c565b60405180910390fd5b809450505050509392505050565b5f5f606490505f5f8273ffffffffffffffffffffffffffffffffffffffff1660206040516020016104439190610b9d565b60405160208183030381529060405260405161045f91906108f0565b5f60405180830381855afa9150503d805f8114610497576040519150601f19603f3d011682016040523d82523d5f602084013e61049c565b606091505b5091509150816104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d890610c01565b60405180910390fd5b5f60208201519050805f1c94505050505090565b60605f606690505f6001b0858560405160200161051493929190610c1f565b60405160208183030381529060405290505f5f8373ffffffffffffffffffffffffffffffffffffffff168360405161054c91906108f0565b5f60405180830381855afa9150503d805f8114610584576040519150601f19603f3d011682016040523d82523d5f602084013e610589565b606091505b5091509150816105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590610cc7565b60405180910390fd5b5f815111610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890610d55565b60405180910390fd5b8094505050505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261064757610646610626565b5b8235905067ffffffffffffffff8111156106645761066361062a565b5b6020830191508360018202830111156106805761067f61062e565b5b9250929050565b5f5f6020838503121561069d5761069c61061e565b5b5f83013567ffffffffffffffff8111156106ba576106b9610622565b5b6106c685828601610632565b92509250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106fb826106d2565b9050919050565b61070b816106f1565b82525050565b5f6020820190506107245f830184610702565b92915050565b5f819050919050565b61073c8161072a565b8114610746575f5ffd5b50565b5f8135905061075781610733565b92915050565b5f602082840312156107725761077161061e565b5b5f61077f84828501610749565b91505092915050565b5f6bffffffffffffffffffffffff82169050919050565b6107a881610788565b81146107b2575f5ffd5b50565b5f813590506107c38161079f565b92915050565b5f5f5f604084860312156107e0576107df61061e565b5b5f6107ed868287016107b5565b935050602084013567ffffffffffffffff81111561080e5761080d610622565b5b61081a86828701610632565b92509250509250925092565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61086882610826565b6108728185610830565b9350610882818560208601610840565b61088b8161084e565b840191505092915050565b5f6020820190508181035f8301526108ae818461085e565b905092915050565b5f81905092915050565b5f6108ca82610826565b6108d481856108b6565b93506108e4818560208601610840565b80840191505092915050565b5f6108fb82846108c0565b915081905092915050565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f610970602183610906565b915061097b82610916565b604082019050919050565b5f6020820190508181035f83015261099d81610964565b9050919050565b7f436970686572746578742063616e6e6f7420626520656d7074790000000000005f82015250565b5f6109d8601a83610906565b91506109e3826109a4565b602082019050919050565b5f6020820190508181035f830152610a05816109cc565b9050919050565b5f819050919050565b610a26610a218261072a565b610a0c565b82525050565b5f8160a01b9050919050565b5f610a4282610a2c565b9050919050565b610a5a610a5582610788565b610a38565b82525050565b828183375f83830152505050565b5f610a7983856108b6565b9350610a86838584610a60565b82840190509392505050565b5f610a9d8287610a15565b602082019150610aad8286610a49565b600c82019150610abe828486610a6e565b915081905095945050505050565b7f414553206465637279707420707265636f6d70696c652063616c6c206661696c5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f610b26602283610906565b9150610b3182610acc565b604082019050919050565b5f6020820190508181035f830152610b5381610b1a565b9050919050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f610b7f82610b69565b9050919050565b610b97610b9282610b5a565b610b75565b82525050565b5f610ba88284610b86565b60048201915081905092915050565b7f524e4720507265636f6d70696c652063616c6c206661696c65640000000000005f82015250565b5f610beb601a83610906565b9150610bf682610bb7565b602082019050919050565b5f6020820190508181035f830152610c1881610bdf565b9050919050565b5f610c2a8286610a15565b602082019150610c3a8285610a49565b600c82019150610c4a82846108c0565b9150819050949350505050565b7f41455320656e637279707420707265636f6d70696c652063616c6c206661696c5f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f610cb1602283610906565b9150610cbc82610c57565b604082019050919050565b5f6020820190508181035f830152610cde81610ca5565b9050919050565b7f456e6372797074696f6e2063616c6c2072657475726e6564206e6f206f7574705f8201527f7574000000000000000000000000000000000000000000000000000000000000602082015250565b5f610d3f602283610906565b9150610d4a82610ce5565b604082019050919050565b5f6020820190508181035f830152610d6c81610d33565b905091905056fea2646970667358221220cdc3edd7891930a1ad58becbe2b3f7679ecfc78a3b1f8a803d4c381c8318287864736f6c637827302e382e32382d63692e323032342e31312e342b636f6d6d69742e32306261666332392e6d6f640058"))
+}
+
+/// Gets the input data for a given selector function and one B256 value
+fn get_input_data(selector: &str, value: B256) -> Bytes {
+    let selector_bytes: Vec<u8> = hex::decode(&selector[0..8]).expect("Invalid selector");
+
+    // Convert value to bytes
+    let value_bytes: Bytes = value.into();
+
+    // Initialize the input data with the selector and value
+    let mut input_data = Vec::new();
+    input_data.extend_from_slice(&selector_bytes);
+    input_data.extend_from_slice(&value_bytes);
+
+    input_data.into()
+}
+
+fn concat_input_data(selector: &str, value: Bytes) -> Bytes {
+    let selector_bytes: Vec<u8> = hex::decode(&selector[0..8]).expect("Invalid selector");
+
+    // Convert value to bytes
+    let value_bytes: Bytes = value.into();
+
+    // Initialize the input data with the selector and value
+    let mut input_data = Vec::new();
+    input_data.extend_from_slice(&selector_bytes);
+    input_data.extend_from_slice(&value_bytes);
+
+    input_data.into()
+}
diff --git a/crates/seismic/rpc-api/Cargo.toml b/crates/seismic/rpc-api/Cargo.toml
new file mode 100644
index 000000000..a4e82bb32
--- /dev/null
+++ b/crates/seismic/rpc-api/Cargo.toml
@@ -0,0 +1,58 @@
+[package]
+name = "seismic-rpc-api"
+version.workspace = true
+edition.workspace = true
+rust-version.workspace = true
+license.workspace = true
+homepage.workspace = true
+repository.workspace = true
+description = "Seismic RPC API"
+
+[lints]
+workspace = true
+
+[dependencies]
+reth-tracing.workspace = true
+reth-rpc-eth-types.workspace = true
+reth-rpc-eth-api.workspace = true
+reth-node-core.workspace = true
+reth-rpc-server-types.workspace = true
+reth-enclave.workspace = true
+
+seismic-enclave.workspace = true
+
+alloy-primitives.workspace = true
+alloy-rpc-types.workspace = true
+alloy-dyn-abi.workspace = true
+
+jsonrpsee = { workspace = true, features = ["server", "macros"] }
+secp256k1.workspace = true
+tokio = { workspace = true, features = ["full"] }
+thiserror.workspace = true
+
+[dev-dependencies]
+alloy-rpc-types-engine.workspace = true
+
+reth-rpc-builder.workspace = true
+reth-transaction-pool = { workspace = true, features = ["test-utils"] }
+reth-network-api.workspace = true
+reth-tasks.workspace = true
+reth-chain-state.workspace = true
+reth-beacon-consensus.workspace = true
+reth-chainspec.workspace = true
+reth-consensus.workspace = true
+reth-ethereum-engine-primitives.workspace = true
+reth-evm.workspace = true
+reth-evm-ethereum.workspace = true
+reth-payload-builder = { workspace = true, features = ["test-utils"] }
+reth-provider = { workspace = true, features = ["test-utils"] }
+reth-rpc.workspace = true
+reth-rpc-engine-api.workspace = true
+reth-rpc-layer.workspace = true
+reth-primitives.workspace = true
+
+seismic-node.workspace = true
+
+
+[features]
+client = ["jsonrpsee/client", "jsonrpsee/async-client"]
diff --git a/crates/seismic/rpc-api/src/error.rs b/crates/seismic/rpc-api/src/error.rs
new file mode 100644
index 000000000..1992c1709
--- /dev/null
+++ b/crates/seismic/rpc-api/src/error.rs
@@ -0,0 +1,30 @@
+use reth_rpc_server_types::result::internal_rpc_err;
+
+#[derive(Debug, thiserror::Error)]
+
+/// Seismic API error
+pub enum SeismicApiError {
+    /// Enclave error
+    #[error("enclave error: {0}")]
+    EnclaveError(String),
+}
+
+impl From<SeismicApiError> for jsonrpsee::types::error::ErrorObject<'static> {
+    fn from(error: SeismicApiError) -> Self {
+        match error {
+            SeismicApiError::EnclaveError(e) => internal_rpc_err(format!("enclave error: {e}")),
+        }
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use crate::error::SeismicApiError;
+
+    #[test]
+    fn enclave_error_message() {
+        let err: jsonrpsee::types::error::ErrorObject<'static> =
+            SeismicApiError::EnclaveError("test".to_string()).into();
+        assert_eq!(err.message(), "enclave error: test");
+    }
+}
diff --git a/crates/seismic/rpc-api/src/lib.rs b/crates/seismic/rpc-api/src/lib.rs
new file mode 100644
index 000000000..283b4304f
--- /dev/null
+++ b/crates/seismic/rpc-api/src/lib.rs
@@ -0,0 +1,9 @@
+//! This crate provides the seismic rpc api implementation.
+
+/// Error types for the seismic rpc api
+pub mod error;
+/// The seismic rpc api implementation
+pub mod rpc;
+/// Utils for testing the seismic rpc api
+#[cfg(test)]
+pub mod utils;
diff --git a/crates/seismic/rpc-api/src/rpc.rs b/crates/seismic/rpc-api/src/rpc.rs
new file mode 100644
index 000000000..4fea2939f
--- /dev/null
+++ b/crates/seismic/rpc-api/src/rpc.rs
@@ -0,0 +1,165 @@
+//! Seismic rpc logic.
+//!
+//! `seismic_` namespace overrides:
+//!
+//! - `seismic_getTeePublicKey` will return the public key of the Seismic enclave.
+//!
+//! `eth_` namespace overrides:
+//!
+//! - `eth_signTypedData_v4` will sign a typed data request using the Seismic enclave.
+
+use alloy_dyn_abi::TypedData;
+use alloy_primitives::Address;
+use jsonrpsee::{
+    core::{async_trait, RpcResult},
+    proc_macros::rpc,
+};
+use reth_node_core::node_config::NodeConfig;
+use reth_rpc_eth_api::helpers::{EthTransactions, FullEthApi};
+use reth_tracing::tracing::*;
+use secp256k1::PublicKey;
+use seismic_enclave::{rpc::EnclaveApiClient, EnclaveClient};
+use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4};
+
+use crate::error::SeismicApiError;
+
+/// trait interface for a custom rpc namespace: `seismic`
+///
+/// This defines an additional namespace where all methods are configured as trait functions.
+#[cfg_attr(not(feature = "client"), rpc(server, namespace = "seismic"))]
+#[cfg_attr(feature = "client", rpc(server, client, namespace = "seismic"))]
+pub trait SeismicApi {
+    /// Returns the network public key
+    #[method(name = "getTeePublicKey")]
+    async fn get_tee_public_key(&self) -> RpcResult<PublicKey>;
+}
+
+/// Implementation of the seismic rpc api
+#[derive(Debug, Default)]
+pub struct SeismicApi {
+    enclave_client: EnclaveClient,
+}
+
+impl SeismicApi {
+    /// Creates a new seismic api instance
+    pub fn new<ChainSpec>(config: &NodeConfig<ChainSpec>) -> Self {
+        Self {
+            enclave_client: EnclaveClient::builder()
+                .addr(config.enclave.enclave_server_addr.to_string())
+                .port(config.enclave.enclave_server_port)
+                .timeout(std::time::Duration::from_secs(config.enclave.enclave_timeout))
+                .build(),
+        }
+    }
+
+    /// Creates a new seismic api instance with an enclave client
+    pub fn with_enclave_client(mut self, enclave_client: EnclaveClient) -> Self {
+        self.enclave_client = enclave_client;
+        self
+    }
+}
+
+#[async_trait]
+impl SeismicApiServer for SeismicApi {
+    async fn get_tee_public_key(&self) -> RpcResult<PublicKey> {
+        trace!(target: "rpc::seismic", "Serving seismic_getTeePublicKey");
+        self.enclave_client
+            .get_public_key()
+            .await
+            .map_err(|e| SeismicApiError::EnclaveError(e.to_string()).into())
+    }
+}
+
+/// Localhost with port 0 so a free port is used.
+pub const fn test_address() -> SocketAddr {
+    SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::UNSPECIFIED, 0))
+}
+
+/// Seismic `eth_` RPC namespace overrides.
+#[cfg_attr(not(feature = "client"), rpc(server, namespace = "eth"))]
+#[cfg_attr(feature = "client", rpc(server, client, namespace = "eth"))]
+pub trait EthApiOverride {
+    /// Returns the account and storage values of the specified account including the Merkle-proof.
+    /// This call can be used to verify that the data you are pulling from is not tampered with.
+    #[method(name = "signTypedData_v4")]
+    async fn sign_typed_data_v4(&self, address: Address, data: TypedData) -> RpcResult<String>;
+}
+
+/// Implementation of the `eth_` namespace override
+#[derive(Debug)]
+pub struct EthApiExt<Eth> {
+    eth_api: Eth,
+}
+
+impl<E> EthApiExt<E> {
+    /// Create a new `EthApiExt` module.
+    pub const fn new(eth_api: E) -> Self {
+        Self { eth_api }
+    }
+}
+
+#[async_trait]
+impl<Eth> EthApiOverrideServer for EthApiExt<Eth>
+where
+    Eth: FullEthApi + Send + Sync + 'static,
+{
+    /// Handler for: `eth_signTypedData_v4`
+    async fn sign_typed_data_v4(&self, from: Address, data: TypedData) -> RpcResult<String> {
+        trace!(target: "rpc::eth", "Serving eth_signTypedData_v4");
+        let signature = EthTransactions::sign_typed_data(&self.eth_api, &data, from)
+            .map_err(|err| err.into())?;
+        let signature = alloy_primitives::hex::encode(signature);
+        Ok(format!("0x{signature}"))
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use crate::utils::test_utils::{build_test_eth_api, launch_http};
+    use jsonrpsee::core::client::{ClientT, SubscriptionClientT};
+    use reth_enclave::start_mock_enclave_server_random_port;
+    use reth_provider::test_utils::MockEthProvider;
+    use seismic_node::utils::test_utils::get_seismic_tx;
+
+    use super::*;
+
+    async fn test_basic_seismic_calls<C>(client: &C)
+    where
+        C: ClientT + SubscriptionClientT + Sync,
+    {
+        let _pk = SeismicApiClient::get_tee_public_key(client).await.unwrap();
+    }
+
+    async fn test_basic_eth_calls<C>(client: &C)
+    where
+        C: ClientT + SubscriptionClientT + Sync,
+    {
+        let typed_data = get_seismic_tx().eip712_to_type_data();
+        let _signature =
+            EthApiOverrideClient::sign_typed_data_v4(client, Address::ZERO, typed_data)
+                .await
+                .unwrap_err();
+    }
+
+    #[tokio::test(flavor = "multi_thread")]
+    async fn test_call_seismic_functions_http() {
+        reth_tracing::init_test_tracing();
+        let enclave_client = start_mock_enclave_server_random_port().await;
+
+        let seismic_api = SeismicApi::default().with_enclave_client(enclave_client);
+
+        let handle = launch_http(seismic_api.into_rpc()).await;
+        let client = handle.http_client().unwrap();
+        test_basic_seismic_calls(&client).await;
+    }
+
+    #[tokio::test(flavor = "multi_thread")]
+    async fn test_call_eth_functions_http() {
+        reth_tracing::init_test_tracing();
+
+        let eth_api = build_test_eth_api(MockEthProvider::default());
+        let eth_api = EthApiExt::new(eth_api);
+        let handle = launch_http(eth_api.into_rpc()).await;
+        test_basic_eth_calls(&handle.http_client().unwrap()).await;
+    }
+}
diff --git a/crates/seismic/rpc-api/src/utils.rs b/crates/seismic/rpc-api/src/utils.rs
new file mode 100644
index 000000000..acb42d7f1
--- /dev/null
+++ b/crates/seismic/rpc-api/src/utils.rs
@@ -0,0 +1,154 @@
+//! Utils for testing the seismic rpc api
+
+/// Test utils for the seismic rpc api
+/// copied from reth-rpc-api-builder
+pub mod test_utils {
+    use std::{
+        net::{Ipv4Addr, SocketAddr, SocketAddrV4},
+        sync::Arc,
+    };
+
+    use alloy_rpc_types_engine::{ClientCode, ClientVersionV1};
+    use jsonrpsee::Methods;
+    use reth_beacon_consensus::BeaconConsensusEngineHandle;
+    use reth_chainspec::{ChainSpec, MAINNET};
+    use reth_consensus::noop::NoopConsensus;
+    use reth_ethereum_engine_primitives::{EthEngineTypes, EthereumEngineValidator};
+    use reth_evm::execute::BasicBlockExecutorProvider;
+    use reth_evm_ethereum::{execute::EthExecutionStrategyFactory, EthEvmConfig};
+    use reth_network_api::noop::NoopNetwork;
+    use reth_payload_builder::test_utils::spawn_test_payload_service;
+    use reth_provider::{
+        test_utils::{NoopProvider, TestCanonStateSubscriptions},
+        BlockReader, BlockReaderIdExt, ChainSpecProvider, EvmEnvProvider, StateProviderFactory,
+    };
+    use reth_rpc::EthApi;
+    use reth_rpc_builder::{
+        auth::{AuthRpcModule, AuthServerConfig, AuthServerHandle},
+        RpcModuleBuilder, RpcServerConfig, RpcServerHandle, TransportRpcModuleConfig,
+    };
+    use reth_rpc_engine_api::{capabilities::EngineCapabilities, EngineApi};
+    use reth_rpc_eth_types::{
+        EthStateCache, FeeHistoryCache, FeeHistoryCacheConfig, GasCap, GasPriceOracle,
+    };
+    use reth_rpc_layer::JwtSecret;
+    use reth_rpc_server_types::{
+        constants::{DEFAULT_ETH_PROOF_WINDOW, DEFAULT_MAX_SIMULATE_BLOCKS, DEFAULT_PROOF_PERMITS},
+        RpcModuleSelection,
+    };
+    use reth_tasks::{pool::BlockingTaskPool, TokioTaskExecutor};
+    use reth_transaction_pool::{
+        noop::NoopTransactionPool,
+        test_utils::{testing_pool, TestPool, TestPoolBuilder},
+    };
+    use tokio::sync::mpsc::unbounded_channel;
+
+    /// Localhost with port 0 so a free port is used.
+    pub const fn test_address() -> SocketAddr {
+        SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::UNSPECIFIED, 0))
+    }
+
+    /// Launches a new server for the auth module
+    pub async fn launch_auth(secret: JwtSecret) -> AuthServerHandle {
+        let config = AuthServerConfig::builder(secret).socket_addr(test_address()).build();
+        let (tx, _rx) = unbounded_channel();
+        let beacon_engine_handle =
+            BeaconConsensusEngineHandle::<EthEngineTypes>::new(tx, Default::default());
+        let client = ClientVersionV1 {
+            code: ClientCode::RH,
+            name: "Reth".to_string(),
+            version: "v0.2.0-beta.5".to_string(),
+            commit: "defa64b2".to_string(),
+        };
+
+        let engine_api = EngineApi::new(
+            NoopProvider::default(),
+            MAINNET.clone(),
+            beacon_engine_handle,
+            spawn_test_payload_service().into(),
+            NoopTransactionPool::default(),
+            Box::<TokioTaskExecutor>::default(),
+            client,
+            EngineCapabilities::default(),
+            EthereumEngineValidator::new(MAINNET.clone()),
+        );
+        let module = AuthRpcModule::new(engine_api);
+        module.start_server(config).await.unwrap()
+    }
+
+    /// Launches a new server with http only with the given modules
+    pub async fn launch_http(modules: impl Into<Methods>) -> RpcServerHandle {
+        let builder = test_rpc_builder();
+        let mut server = builder.build(
+            TransportRpcModuleConfig::set_http(RpcModuleSelection::Standard),
+            Box::new(EthApi::with_spawner),
+            Arc::new(EthereumEngineValidator::new(MAINNET.clone())),
+        );
+        server.merge_configured(modules).unwrap();
+        RpcServerConfig::http(Default::default())
+            .with_http_address(test_address())
+            .start(&server)
+            .await
+            .unwrap()
+    }
+
+    /// Returns an [`RpcModuleBuilder`] with testing components.
+    pub fn test_rpc_builder() -> RpcModuleBuilder<
+        NoopProvider,
+        TestPool,
+        NoopNetwork,
+        TokioTaskExecutor,
+        TestCanonStateSubscriptions,
+        EthEvmConfig,
+        BasicBlockExecutorProvider<EthExecutionStrategyFactory>,
+        NoopConsensus,
+    > {
+        RpcModuleBuilder::default()
+            .with_provider(NoopProvider::default())
+            .with_pool(TestPoolBuilder::default().into())
+            .with_network(NoopNetwork::default())
+            .with_executor(TokioTaskExecutor::default())
+            .with_events(TestCanonStateSubscriptions::default())
+            .with_evm_config(EthEvmConfig::new(MAINNET.clone()))
+            .with_block_executor(BasicBlockExecutorProvider::new(
+                EthExecutionStrategyFactory::mainnet(),
+            ))
+            .with_consensus(NoopConsensus::default())
+    }
+
+    /// Builds a test eth api
+    pub fn build_test_eth_api<
+        P: BlockReaderIdExt<
+                Block = reth_primitives::Block,
+                Receipt = reth_primitives::Receipt,
+                Header = reth_primitives::Header,
+            > + BlockReader
+            + ChainSpecProvider<ChainSpec = ChainSpec>
+            + EvmEnvProvider
+            + StateProviderFactory
+            + Unpin
+            + Clone
+            + 'static,
+    >(
+        provider: P,
+    ) -> EthApi<P, TestPool, NoopNetwork, EthEvmConfig> {
+        let evm_config = EthEvmConfig::new(provider.chain_spec());
+        let cache = EthStateCache::spawn(provider.clone(), Default::default());
+        let fee_history_cache = FeeHistoryCache::new(FeeHistoryCacheConfig::default());
+
+        EthApi::new(
+            provider.clone(),
+            testing_pool(),
+            NoopNetwork::default(),
+            cache.clone(),
+            GasPriceOracle::new(provider, Default::default(), cache),
+            GasCap::default(),
+            DEFAULT_MAX_SIMULATE_BLOCKS,
+            DEFAULT_ETH_PROOF_WINDOW,
+            BlockingTaskPool::build().expect("failed to build tracing pool"),
+            fee_history_cache,
+            evm_config,
+            DEFAULT_PROOF_PERMITS,
+        )
+    }
+}
diff --git a/crates/stages/api/src/lib.rs b/crates/stages/api/src/lib.rs
index ec01876c9..08757beca 100644
--- a/crates/stages/api/src/lib.rs
+++ b/crates/stages/api/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/stages/stages/src/lib.rs b/crates/stages/stages/src/lib.rs
index ce6a96cf3..bce68735a 100644
--- a/crates/stages/stages/src/lib.rs
+++ b/crates/stages/stages/src/lib.rs
@@ -75,7 +75,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/crates/stages/stages/src/stages/execution.rs b/crates/stages/stages/src/stages/execution.rs
index 685b0abb9..4aaa0461d 100644
--- a/crates/stages/stages/src/stages/execution.rs
+++ b/crates/stages/stages/src/stages/execution.rs
@@ -831,7 +831,7 @@ mod tests {
         }) if total == block.gas_used);
     }
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn sanity_execution_of_block() {
         let factory = create_test_provider_factory();
         let provider = factory.provider_rw().unwrap();
@@ -961,7 +961,11 @@ mod tests {
             // Get on dupsort would return only first value. This is good enough for this test.
             assert_eq!(
                 provider.tx_ref().get::<tables::PlainStorageState>(account1),
-                Ok(Some(StorageEntry { key: B256::with_last_byte(1), value: U256::from(2) })),
+                Ok(Some(StorageEntry {
+                    key: B256::with_last_byte(1),
+                    value: U256::from(2),
+                    ..Default::default()
+                })),
                 "Post changed of a account"
             );
 
@@ -980,7 +984,7 @@ mod tests {
         }
     }
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn sanity_execute_unwind() {
         let factory = create_test_provider_factory();
         let provider = factory.provider_rw().unwrap();
@@ -1100,7 +1104,7 @@ mod tests {
         }
     }
 
-    #[tokio::test]
+    #[tokio::test(flavor = "multi_thread")]
     async fn test_selfdestruct() {
         let test_db = TestStageDB::default();
         let provider = test_db.factory.database_provider_rw().unwrap();
@@ -1156,14 +1160,18 @@ mod tests {
             .tx_ref()
             .put::<tables::PlainStorageState>(
                 destroyed_address,
-                StorageEntry { key: B256::ZERO, value: U256::ZERO },
+                StorageEntry { key: B256::ZERO, value: U256::ZERO, ..Default::default() },
             )
             .unwrap();
         provider
             .tx_ref()
             .put::<tables::PlainStorageState>(
                 destroyed_address,
-                StorageEntry { key: B256::with_last_byte(1), value: U256::from(1u64) },
+                StorageEntry {
+                    key: B256::with_last_byte(1),
+                    value: U256::from(1u64),
+                    ..Default::default()
+                },
             )
             .unwrap();
 
@@ -1235,11 +1243,15 @@ mod tests {
             vec![
                 (
                     (block.number, destroyed_address).into(),
-                    StorageEntry { key: B256::ZERO, value: U256::ZERO }
+                    StorageEntry { key: B256::ZERO, value: U256::ZERO, ..Default::default() }
                 ),
                 (
                     (block.number, destroyed_address).into(),
-                    StorageEntry { key: B256::with_last_byte(1), value: U256::from(1u64) }
+                    StorageEntry {
+                        key: B256::with_last_byte(1),
+                        value: U256::from(1u64),
+                        ..Default::default()
+                    }
                 )
             ]
         );
diff --git a/crates/stages/stages/src/stages/hashing_storage.rs b/crates/stages/stages/src/stages/hashing_storage.rs
index 0be84665b..05b593ba1 100644
--- a/crates/stages/stages/src/stages/hashing_storage.rs
+++ b/crates/stages/stages/src/stages/hashing_storage.rs
@@ -102,10 +102,11 @@ where
                 // Spawn the hashing task onto the global rayon pool
                 rayon::spawn(move || {
                     for (address, slot) in chunk {
-                        let mut addr_key = Vec::with_capacity(64);
-                        addr_key.put_slice(keccak256(address).as_slice());
-                        addr_key.put_slice(keccak256(slot.key).as_slice());
-                        let _ = tx.send((addr_key, CompactU256::from(slot.value)));
+                        let mut addr_key_is_private = Vec::with_capacity(64);
+                        addr_key_is_private.put_slice(keccak256(address).as_slice());
+                        addr_key_is_private.put_slice(keccak256(slot.key).as_slice());
+                        addr_key_is_private.put_u8(slot.is_private as u8);
+                        let _ = tx.send((addr_key_is_private, CompactU256::from(slot.value)));
                     }
                 });
 
@@ -129,12 +130,14 @@ where
                     );
                 }
 
-                let (addr_key, value) = item?;
+                let (addr_key_is_private, val) = item?;
+
                 cursor.append_dup(
-                    B256::from_slice(&addr_key[..32]),
+                    B256::from_slice(&addr_key_is_private[..32]),
                     StorageEntry {
-                        key: B256::from_slice(&addr_key[32..]),
-                        value: CompactU256::decompress_owned(value)?.into(),
+                        key: B256::from_slice(&addr_key_is_private[32..64]),
+                        is_private: addr_key_is_private[64] != 0,
+                        value: CompactU256::decompress(&val)?.into(),
                     },
                 )?;
             }
@@ -368,6 +371,7 @@ mod tests {
                                 let new_entry = StorageEntry {
                                     key: keccak256([rng.gen::<u8>()]),
                                     value: U256::from(rng.gen::<u8>() % 30 + 1),
+                                    ..Default::default()
                                 };
                                 self.insert_storage_entry(
                                     tx,
@@ -391,6 +395,7 @@ mod tests {
                             StorageEntry {
                                 key: keccak256("mining"),
                                 value: U256::from(rng.gen::<u32>()),
+                                ..Default::default()
                             },
                             progress.header.number == stage_progress,
                         )?;
@@ -479,20 +484,25 @@ mod tests {
             hash: bool,
         ) -> Result<(), reth_db::DatabaseError> {
             let mut storage_cursor = tx.cursor_dup_write::<tables::PlainStorageState>()?;
-            let prev_entry =
-                match storage_cursor.seek_by_key_subkey(bn_address.address(), entry.key)? {
-                    Some(e) if e.key == entry.key => {
-                        tx.delete::<tables::PlainStorageState>(bn_address.address(), Some(e))
-                            .expect("failed to delete entry");
-                        e
-                    }
-                    _ => StorageEntry { key: entry.key, value: U256::from(0) },
-                };
+            let prev_entry = match storage_cursor
+                .seek_by_key_subkey(bn_address.address(), entry.key)?
+            {
+                Some(e) if e.key == entry.key => {
+                    tx.delete::<tables::PlainStorageState>(bn_address.address(), Some(e))
+                        .expect("failed to delete entry");
+                    e
+                }
+                _ => StorageEntry { key: entry.key, value: U256::from(0), ..Default::default() },
+            };
             tx.put::<tables::PlainStorageState>(bn_address.address(), entry)?;
 
             if hash {
                 let hashed_address = keccak256(bn_address.address());
-                let hashed_entry = StorageEntry { key: keccak256(entry.key), value: entry.value };
+                let hashed_entry = StorageEntry {
+                    key: keccak256(entry.key),
+                    value: entry.value,
+                    ..Default::default()
+                };
 
                 if let Some(e) = tx
                     .cursor_dup_write::<tables::HashedStorages>()?
diff --git a/crates/stages/stages/src/stages/index_storage_history.rs b/crates/stages/stages/src/stages/index_storage_history.rs
index ba61e6312..0dcc9a8a0 100644
--- a/crates/stages/stages/src/stages/index_storage_history.rs
+++ b/crates/stages/stages/src/stages/index_storage_history.rs
@@ -181,7 +181,7 @@ mod tests {
 
     const fn storage(key: B256) -> StorageEntry {
         // Value is not used in indexing stage.
-        StorageEntry { key, value: U256::ZERO }
+        StorageEntry { key, value: U256::ZERO, is_private: false }
     }
 
     const fn block_number_address(block_number: u64) -> BlockNumberAddress {
diff --git a/crates/stages/stages/src/stages/merkle.rs b/crates/stages/stages/src/stages/merkle.rs
index 8cd7abc73..b7f049832 100644
--- a/crates/stages/stages/src/stages/merkle.rs
+++ b/crates/stages/stages/src/stages/merkle.rs
@@ -621,7 +621,7 @@ mod tests {
                     let mut storage_cursor =
                         tx.cursor_dup_write::<tables::HashedStorages>().unwrap();
 
-                    let mut tree: BTreeMap<B256, BTreeMap<B256, U256>> = BTreeMap::new();
+                    let mut tree: BTreeMap<B256, BTreeMap<B256, (U256, bool)>> = BTreeMap::new();
 
                     let mut rev_changeset_walker =
                         storage_changesets_cursor.walk_back(None).unwrap();
@@ -634,10 +634,10 @@ mod tests {
 
                         tree.entry(keccak256(bn_address.address()))
                             .or_default()
-                            .insert(keccak256(entry.key), entry.value);
+                            .insert(keccak256(entry.key), (entry.value, entry.is_private));
                     }
                     for (hashed_address, storage) in tree {
-                        for (hashed_slot, value) in storage {
+                        for (hashed_slot, (value, is_private)) in storage {
                             let storage_entry = storage_cursor
                                 .seek_by_key_subkey(hashed_address, hashed_slot)
                                 .unwrap();
@@ -646,7 +646,8 @@ mod tests {
                             }
 
                             if !value.is_zero() {
-                                let storage_entry = StorageEntry { key: hashed_slot, value };
+                                let storage_entry =
+                                    StorageEntry { key: hashed_slot, value, is_private };
                                 storage_cursor.upsert(hashed_address, storage_entry).unwrap();
                             }
                         }
diff --git a/crates/stages/types/src/lib.rs b/crates/stages/types/src/lib.rs
index 4e01bf7db..2f0361957 100644
--- a/crates/stages/types/src/lib.rs
+++ b/crates/stages/types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/static-file/static-file/src/lib.rs b/crates/static-file/static-file/src/lib.rs
index 6c95baaae..6bdd81fcb 100644
--- a/crates/static-file/static-file/src/lib.rs
+++ b/crates/static-file/static-file/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
diff --git a/crates/static-file/types/src/lib.rs b/crates/static-file/types/src/lib.rs
index 7a9980b35..f4ccff711 100644
--- a/crates/static-file/types/src/lib.rs
+++ b/crates/static-file/types/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/codecs/Cargo.toml b/crates/storage/codecs/Cargo.toml
index 76a372162..47da952df 100644
--- a/crates/storage/codecs/Cargo.toml
+++ b/crates/storage/codecs/Cargo.toml
@@ -11,6 +11,9 @@ repository.workspace = true
 workspace = true
 
 [dependencies]
+# enclave
+seismic-enclave.workspace = true
+
 # reth
 reth-codecs-derive = { path = "./derive", default-features = false }
 
diff --git a/crates/storage/codecs/derive/src/arbitrary.rs b/crates/storage/codecs/derive/src/arbitrary.rs
index 91c78923c..14b3630d8 100644
--- a/crates/storage/codecs/derive/src/arbitrary.rs
+++ b/crates/storage/codecs/derive/src/arbitrary.rs
@@ -13,7 +13,7 @@ pub fn maybe_generate_tests(
     mod_tests: &Ident,
 ) -> TokenStream2 {
     // Same as proptest
-    let mut default_cases = 256;
+    let mut default_cases = 1;
 
     let mut traits = vec![];
     let mut roundtrips = vec![];
diff --git a/crates/storage/codecs/derive/src/compact/generator.rs b/crates/storage/codecs/derive/src/compact/generator.rs
index 26a1f1012..4c559d00a 100644
--- a/crates/storage/codecs/derive/src/compact/generator.rs
+++ b/crates/storage/codecs/derive/src/compact/generator.rs
@@ -107,8 +107,17 @@ fn generate_from_compact(
     zstd: Option<ZstdConfig>,
 ) -> TokenStream2 {
     let mut lines = vec![];
-    let mut known_types =
-        vec!["B256", "Address", "Bloom", "Vec", "TxHash", "BlockHash", "FixedBytes", "Cow"];
+    let mut known_types = vec![
+        "B256",
+        "Address",
+        "Bloom",
+        "Vec",
+        "TxHash",
+        "BlockHash",
+        "FixedBytes",
+        "Cow",
+        "TxSeismicElements",
+    ];
 
     // Only types without `Bytes` should be added here. It's currently manually added, since
     // it's hard to figure out with derive_macro which types have Bytes fields.
diff --git a/crates/storage/codecs/derive/src/compact/mod.rs b/crates/storage/codecs/derive/src/compact/mod.rs
index e7906bbdb..ef91a7788 100644
--- a/crates/storage/codecs/derive/src/compact/mod.rs
+++ b/crates/storage/codecs/derive/src/compact/mod.rs
@@ -204,6 +204,7 @@ pub fn get_bit_size(ftype: &str) -> u8 {
         "u64" | "BlockNumber" | "TxNumber" | "ChainId" | "NumTransactions" => 4,
         "u128" => 5,
         "U256" => 6,
+        "u8" => 1,
         _ => 0,
     }
 }
diff --git a/crates/storage/codecs/derive/src/lib.rs b/crates/storage/codecs/derive/src/lib.rs
index a835e8fab..b4c7998ef 100644
--- a/crates/storage/codecs/derive/src/lib.rs
+++ b/crates/storage/codecs/derive/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![allow(unreachable_pub, missing_docs)]
diff --git a/crates/storage/codecs/src/alloy/transaction/mod.rs b/crates/storage/codecs/src/alloy/transaction/mod.rs
index 5c829ddf5..1ef8f8726 100644
--- a/crates/storage/codecs/src/alloy/transaction/mod.rs
+++ b/crates/storage/codecs/src/alloy/transaction/mod.rs
@@ -1,14 +1,6 @@
 //! Compact implementation for transaction types
 
-cond_mod!(
-    eip1559,
-    eip2930,
-    eip4844,
-    eip7702,
-    legacy,
-    txtype
-);
-
+cond_mod!(eip1559, eip2930, eip4844, eip7702, legacy, txtype, seismic);
 
 #[cfg(all(feature = "test-utils", feature = "op"))]
 pub mod optimism;
@@ -24,14 +16,17 @@ mod tests {
     // this check is to ensure we do not inadvertently add too many fields to a struct which would
     // expand the flags field and break backwards compatibility
 
-    use alloy_primitives::hex;
     use crate::{
-        alloy::{header::Header, transaction::{
-            eip1559::TxEip1559, eip2930::TxEip2930, eip4844::TxEip4844, eip7702::TxEip7702,
-            legacy::TxLegacy,
-        }},
+        alloy::{
+            header::Header,
+            transaction::{
+                eip1559::TxEip1559, eip2930::TxEip2930, eip4844::TxEip4844, eip7702::TxEip7702,
+                legacy::TxLegacy,
+            },
+        },
         test_utils::test_decode,
     };
+    use alloy_primitives::hex;
 
     #[test]
     fn test_ensure_backwards_compatibility() {
diff --git a/crates/storage/codecs/src/alloy/transaction/seismic.rs b/crates/storage/codecs/src/alloy/transaction/seismic.rs
new file mode 100644
index 000000000..813176334
--- /dev/null
+++ b/crates/storage/codecs/src/alloy/transaction/seismic.rs
@@ -0,0 +1,191 @@
+//! Compact implementation for [`AlloyTxSeismic`]
+
+use crate::Compact;
+use alloy_consensus::{transaction::TxSeismicElements, TxSeismic as AlloyTxSeismic};
+use alloy_primitives::{aliases::U96, Bytes, ChainId, TxKind, U256};
+use bytes::{Buf, BytesMut};
+
+/// Seismic transaction.
+#[derive(Debug, Clone, PartialEq, Eq, Default, Compact)]
+#[reth_codecs(crate = "crate")]
+#[cfg_attr(
+    any(test, feature = "test-utils"),
+    derive(arbitrary::Arbitrary, serde::Serialize, serde::Deserialize),
+    crate::add_arbitrary_tests(crate, compact)
+)]
+#[cfg_attr(feature = "test-utils", allow(unreachable_pub), visibility::make(pub))]
+pub(crate) struct TxSeismic {
+    /// Added as EIP-155: Simple replay attack protection
+    chain_id: ChainId,
+    /// A scalar value equal to the number of transactions sent by the sender; formally Tn.
+    nonce: u64,
+    /// A scalar value equal to the number of
+    /// Wei to be paid per unit of gas for all computation
+    /// costs incurred as a result of the execution of this transaction; formally Tp.
+    ///
+    /// As ethereum circulation is around 120mil eth as of 2022 that is around
+    /// 120000000000000000000000000 wei we are safe to use u128 as its max number is:
+    /// 340282366920938463463374607431768211455
+    gas_price: u128,
+    /// A scalar value equal to the maximum
+    /// amount of gas that should be used in executing
+    /// this transaction. This is paid up-front, before any
+    /// computation is done and may not be increased
+    /// later; formally Tg.
+    gas_limit: u64,
+    /// The 160-bit address of the message call’s recipient or, for a contract creation
+    /// transaction, ∅, used here to denote the only member of B0 ; formally Tt.
+    to: TxKind,
+    /// A scalar value equal to the number of Wei to
+    /// be transferred to the message call’s recipient or,
+    /// in the case of contract creation, as an endowment
+    /// to the newly created account; formally Tv.
+    value: U256,
+    /// seismic elements
+    seismic_elements: TxSeismicElements,
+    /// Input has two uses depending if transaction is Create or Call (if `to` field is None or
+    /// Some). pub init: An unlimited size byte array specifying the
+    /// EVM-code for the account initialisation procedure CREATE,
+    /// data: An unlimited size byte array specifying the
+    /// input data of the message call, formally Td.
+    input: Bytes,
+}
+
+impl Compact for TxSeismicElements {
+    fn to_compact<B>(&self, buf: &mut B) -> usize
+    where
+        B: bytes::BufMut + AsMut<[u8]>,
+    {
+        let mut len = 0;
+        len += self.encryption_pubkey.serialize().to_compact(buf);
+
+        buf.put_u8(self.message_version);
+        len += core::mem::size_of::<u8>();
+
+        let mut cache = BytesMut::new();
+        let nonce_len = self.encryption_nonce.to_compact(&mut cache);
+        buf.put_u8(nonce_len as u8);
+        buf.put_slice(&cache);
+        len += nonce_len + 1;
+
+        len
+    }
+
+    fn from_compact(mut buf: &[u8], _len: usize) -> (Self, &[u8]) {
+        let encryption_pubkey_compressed_bytes =
+            &buf[..seismic_enclave::constants::PUBLIC_KEY_SIZE];
+        let encryption_pubkey =
+            seismic_enclave::PublicKey::from_slice(encryption_pubkey_compressed_bytes).unwrap();
+        buf.advance(seismic_enclave::constants::PUBLIC_KEY_SIZE);
+
+        let (message_version, buf) = (buf[0], &buf[1..]);
+
+        let (nonce_len, buf) = (buf[0], &buf[1..]);
+        let (encryption_nonce, buf) = U96::from_compact(buf, nonce_len as usize);
+        (Self { encryption_pubkey, encryption_nonce, message_version }, buf)
+    }
+}
+
+impl Compact for AlloyTxSeismic {
+    fn to_compact<B>(&self, buf: &mut B) -> usize
+    where
+        B: bytes::BufMut + AsMut<[u8]>,
+    {
+        let tx = TxSeismic {
+            chain_id: self.chain_id,
+            nonce: self.nonce,
+            gas_price: self.gas_price,
+            gas_limit: self.gas_limit,
+            to: self.to,
+            value: self.value,
+            seismic_elements: self.seismic_elements,
+            input: self.input.clone(),
+        };
+
+        tx.to_compact(buf)
+    }
+
+    fn from_compact(buf: &[u8], len: usize) -> (Self, &[u8]) {
+        let (tx, _) = TxSeismic::from_compact(buf, len);
+
+        let alloy_tx = Self {
+            chain_id: tx.chain_id,
+            nonce: tx.nonce,
+            gas_price: tx.gas_price,
+            gas_limit: tx.gas_limit,
+            to: tx.to,
+            value: tx.value,
+            seismic_elements: tx.seismic_elements,
+            input: tx.input,
+        };
+
+        (alloy_tx, buf)
+    }
+}
+
+#[cfg(test)]
+mod tests {
+    use super::*;
+    use alloy_primitives::{hex, Bytes, TxKind};
+    use bytes::BytesMut;
+    use seismic_enclave::PublicKey;
+
+    #[test]
+    fn test_seismic_tx_compact_roundtrip() {
+        // Create a test transaction based on the example in file_context_0
+        let tx = AlloyTxSeismic {
+            chain_id: 1166721750861005481,
+            nonce: 13985005159674441909,
+            gas_price: 296133358425745351516777806240018869443,
+            gas_limit: 6091425913586946366,
+            to: TxKind::Create,
+            value: U256::from_str_radix(
+                "30997721070913355446596643088712595347117842472993214294164452566768407578853",
+                10,
+            )
+            .unwrap(),
+            seismic_elements: TxSeismicElements {
+                encryption_pubkey: PublicKey::from_slice(
+                    &hex::decode(
+                        "02d211b6b0a191b9469bb3674e9c609f453d3801c3e3fd7e0bb00c6cc1e1d941df",
+                    )
+                    .unwrap(),
+                )
+                .unwrap(),
+                encryption_nonce: U96::from_str_radix("11856476099097235301", 10).unwrap(),
+                message_version: 85,
+            },
+            input: Bytes::from_static(&[0x24]),
+        };
+
+        // Encode to compact format
+        let mut buf = BytesMut::new();
+        let encoded_size = tx.to_compact(&mut buf);
+
+        // Decode from compact format
+        let (decoded_tx, _) = AlloyTxSeismic::from_compact(&buf, encoded_size);
+
+        // Verify the roundtrip
+        assert_eq!(tx.chain_id, decoded_tx.chain_id);
+        assert_eq!(tx.nonce, decoded_tx.nonce);
+        assert_eq!(tx.gas_price, decoded_tx.gas_price);
+        assert_eq!(tx.gas_limit, decoded_tx.gas_limit);
+        assert_eq!(tx.to, decoded_tx.to);
+        assert_eq!(tx.value, decoded_tx.value);
+        assert_eq!(tx.input, decoded_tx.input);
+
+        // Check seismic elements
+        assert_eq!(
+            tx.seismic_elements.encryption_pubkey.serialize(),
+            decoded_tx.seismic_elements.encryption_pubkey.serialize()
+        );
+        assert_eq!(
+            tx.seismic_elements.encryption_nonce,
+            decoded_tx.seismic_elements.encryption_nonce
+        );
+        assert_eq!(
+            tx.seismic_elements.message_version,
+            decoded_tx.seismic_elements.message_version
+        );
+    }
+}
diff --git a/crates/storage/codecs/src/alloy/transaction/txtype.rs b/crates/storage/codecs/src/alloy/transaction/txtype.rs
index 63f80bfaf..e6efbac99 100644
--- a/crates/storage/codecs/src/alloy/transaction/txtype.rs
+++ b/crates/storage/codecs/src/alloy/transaction/txtype.rs
@@ -1,8 +1,13 @@
 //! Compact implementation for [`TxType`]
 
-use crate::txtype::{COMPACT_EXTENDED_IDENTIFIER_FLAG, COMPACT_IDENTIFIER_EIP1559, COMPACT_IDENTIFIER_EIP2930, COMPACT_IDENTIFIER_LEGACY};
-use alloy_consensus::constants::{EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID};
-use alloy_consensus::TxType;
+use crate::txtype::{
+    COMPACT_EXTENDED_IDENTIFIER_FLAG, COMPACT_IDENTIFIER_EIP1559, COMPACT_IDENTIFIER_EIP2930,
+    COMPACT_IDENTIFIER_LEGACY,
+};
+use alloy_consensus::{
+    constants::{EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID, SEISMIC_TX_TYPE_ID},
+    TxType,
+};
 
 impl crate::Compact for TxType {
     fn to_compact<B>(&self, buf: &mut B) -> usize
@@ -23,6 +28,10 @@ impl crate::Compact for TxType {
                 buf.put_u8(EIP7702_TX_TYPE_ID);
                 COMPACT_EXTENDED_IDENTIFIER_FLAG
             }
+            Self::Seismic => {
+                buf.put_u8(SEISMIC_TX_TYPE_ID);
+                COMPACT_EXTENDED_IDENTIFIER_FLAG
+            }
         }
     }
 
@@ -41,6 +50,7 @@ impl crate::Compact for TxType {
                     match extended_identifier {
                         EIP4844_TX_TYPE_ID => Self::Eip4844,
                         EIP7702_TX_TYPE_ID => Self::Eip7702,
+                        SEISMIC_TX_TYPE_ID => Self::Seismic,
                         _ => panic!("Unsupported TxType identifier: {extended_identifier}"),
                     }
                 }
@@ -55,10 +65,9 @@ impl crate::Compact for TxType {
 mod tests {
     use super::*;
     use rstest::rstest;
-    
-    use alloy_consensus::constants::{EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID};
-    use crate::Compact;
 
+    use crate::Compact;
+    use alloy_consensus::constants::{EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID};
 
     #[rstest]
     #[case(TxType::Legacy, COMPACT_IDENTIFIER_LEGACY, vec![])]
@@ -94,4 +103,4 @@ mod tests {
         assert_eq!(actual_type, expected_type, "Unexpected TxType for identifier {identifier}");
         assert!(remaining_buf.is_empty(), "Buffer not fully consumed for identifier {identifier}");
     }
-}
\ No newline at end of file
+}
diff --git a/crates/storage/codecs/src/lib.rs b/crates/storage/codecs/src/lib.rs
index cf18e548b..1519673c1 100644
--- a/crates/storage/codecs/src/lib.rs
+++ b/crates/storage/codecs/src/lib.rs
@@ -11,7 +11,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
@@ -22,7 +22,7 @@ extern crate alloc;
 pub use reth_codecs_derive::*;
 use serde as _;
 
-use alloy_primitives::{Address, Bloom, Bytes, FixedBytes, U256};
+use alloy_primitives::{aliases::U96, Address, Bloom, Bytes, FixedBytes, U256};
 use bytes::{Buf, BufMut};
 
 use alloc::{
@@ -397,6 +397,31 @@ impl Compact for U256 {
     }
 }
 
+impl Compact for U96 {
+    #[inline]
+    fn to_compact<B>(&self, buf: &mut B) -> usize
+    where
+        B: bytes::BufMut + AsMut<[u8]>,
+    {
+        let inner = self.to_be_bytes::<12>();
+        let size = 12 - (self.leading_zeros() / 8);
+        buf.put_slice(&inner[12 - size..]);
+        size
+    }
+
+    #[inline]
+    fn from_compact(mut buf: &[u8], len: usize) -> (Self, &[u8]) {
+        if len == 0 {
+            return (Self::ZERO, buf)
+        }
+
+        let mut arr = [0; 12];
+        arr[(12 - len)..].copy_from_slice(&buf[..len]);
+        buf.advance(len);
+        (Self::from_be_bytes(arr), buf)
+    }
+}
+
 impl Compact for Bytes {
     #[inline]
     fn to_compact<B>(&self, buf: &mut B) -> usize
diff --git a/crates/storage/db-api/src/lib.rs b/crates/storage/db-api/src/lib.rs
index db4cb1000..95a50c471 100644
--- a/crates/storage/db-api/src/lib.rs
+++ b/crates/storage/db-api/src/lib.rs
@@ -54,7 +54,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/db-common/src/init.rs b/crates/storage/db-common/src/init.rs
index 95b2a5d5c..14f6de1f8 100644
--- a/crates/storage/db-common/src/init.rs
+++ b/crates/storage/db-common/src/init.rs
@@ -215,7 +215,8 @@ where
                 m.iter()
                     .map(|(key, value)| {
                         let value = U256::from_be_bytes(value.0);
-                        (*key, (U256::ZERO, value))
+                        let is_private = false;
+                        (*key, ((U256::ZERO, false), (value, is_private)))
                     })
                     .collect::<HashMap<_, _>>()
             })
@@ -223,7 +224,10 @@ where
 
         reverts_init.insert(
             *address,
-            (Some(None), storage.keys().map(|k| StorageEntry::new(*k, U256::ZERO)).collect()),
+            (
+                Some(None),
+                storage.keys().map(|k| StorageEntry { key: *k, ..Default::default() }).collect(),
+            ),
         );
 
         state_init.insert(
@@ -274,7 +278,14 @@ where
     let alloc_storage = alloc.filter_map(|(addr, account)| {
         // only return Some if there is storage
         account.storage.as_ref().map(|storage| {
-            (*addr, storage.iter().map(|(&key, &value)| StorageEntry { key, value: value.into() }))
+            (
+                *addr,
+                storage.clone().into_iter().map(|(key, value)| StorageEntry {
+                    key,
+                    value: value.into(),
+                    is_private: false,
+                }),
+            )
         })
     });
     provider.insert_storage_for_hashing(alloc_storage)?;
diff --git a/crates/storage/db-common/src/lib.rs b/crates/storage/db-common/src/lib.rs
index 173e53143..ec01e12af 100644
--- a/crates/storage/db-common/src/lib.rs
+++ b/crates/storage/db-common/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/db/src/implementation/mdbx/mod.rs b/crates/storage/db/src/implementation/mdbx/mod.rs
index 8c3d36308..f2b35b0e8 100644
--- a/crates/storage/db/src/implementation/mdbx/mod.rs
+++ b/crates/storage/db/src/implementation/mdbx/mod.rs
@@ -577,8 +577,16 @@ mod tests {
 
         let mut dup_cursor = tx.cursor_dup_write::<PlainStorageState>().unwrap();
 
-        let entry_0 = StorageEntry { key: B256::with_last_byte(1), value: U256::from(0) };
-        let entry_1 = StorageEntry { key: B256::with_last_byte(1), value: U256::from(1) };
+        let entry_0 = StorageEntry {
+            key: B256::with_last_byte(1),
+            value: U256::from(0),
+            ..Default::default()
+        };
+        let entry_1 = StorageEntry {
+            key: B256::with_last_byte(1),
+            value: U256::from(1),
+            ..Default::default()
+        };
 
         dup_cursor.upsert(Address::with_last_byte(1), entry_0).expect(ERROR_UPSERT);
         dup_cursor.upsert(Address::with_last_byte(1), entry_1).expect(ERROR_UPSERT);
@@ -946,11 +954,11 @@ mod tests {
         let subkey1 = B256::random();
         let subkey2 = B256::random();
 
-        let entry1 = StorageEntry { key: subkey1, value: U256::ZERO };
+        let entry1 = StorageEntry { key: subkey1, value: U256::ZERO, ..Default::default() };
         assert!(dup_cursor.insert(key, entry1).is_ok());
 
         // Can't insert
-        let entry2 = StorageEntry { key: subkey2, value: U256::ZERO };
+        let entry2 = StorageEntry { key: subkey2, value: U256::ZERO, ..Default::default() };
         assert!(dup_cursor.insert(key, entry2).is_err());
     }
 
@@ -1103,12 +1111,12 @@ mod tests {
         let subkey = B256::random();
 
         let value = U256::from(1);
-        let entry1 = StorageEntry { key: subkey, value };
+        let entry1 = StorageEntry { key: subkey, value, ..Default::default() };
         dup_cursor.upsert(key, entry1).expect(ERROR_UPSERT);
         assert_eq!(dup_cursor.seek_by_key_subkey(key, subkey), Ok(Some(entry1)));
 
         let value = U256::from(2);
-        let entry2 = StorageEntry { key: subkey, value };
+        let entry2 = StorageEntry { key: subkey, value, ..Default::default() };
         dup_cursor.upsert(key, entry2).expect(ERROR_UPSERT);
         assert_eq!(dup_cursor.seek_by_key_subkey(key, subkey), Ok(Some(entry1)));
         assert_eq!(dup_cursor.next_dup_val(), Ok(Some(entry2)));
@@ -1220,11 +1228,19 @@ mod tests {
         env.update(|tx| tx.put::<PlainStorageState>(key, value00).expect(ERROR_PUT)).unwrap();
 
         // PUT (2,2)
-        let value22 = StorageEntry { key: B256::with_last_byte(2), value: U256::from(2) };
+        let value22 = StorageEntry {
+            key: B256::with_last_byte(2),
+            value: U256::from(2),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key, value22).expect(ERROR_PUT)).unwrap();
 
         // PUT (1,1)
-        let value11 = StorageEntry { key: B256::with_last_byte(1), value: U256::from(1) };
+        let value11 = StorageEntry {
+            key: B256::with_last_byte(1),
+            value: U256::from(1),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key, value11).expect(ERROR_PUT)).unwrap();
 
         // Iterate with cursor
@@ -1266,11 +1282,19 @@ mod tests {
         env.update(|tx| tx.put::<PlainStorageState>(key1, value00).expect(ERROR_PUT)).unwrap();
 
         // PUT key1 (1,1)
-        let value11 = StorageEntry { key: B256::with_last_byte(1), value: U256::from(1) };
+        let value11 = StorageEntry {
+            key: B256::with_last_byte(1),
+            value: U256::from(1),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key1, value11).expect(ERROR_PUT)).unwrap();
 
         // PUT key2 (2,2)
-        let value22 = StorageEntry { key: B256::with_last_byte(2), value: U256::from(2) };
+        let value22 = StorageEntry {
+            key: B256::with_last_byte(2),
+            value: U256::from(2),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key2, value22).expect(ERROR_PUT)).unwrap();
 
         // Iterate with walk_dup
@@ -1306,7 +1330,11 @@ mod tests {
         let key2 = Address::new([0x22; 20]);
 
         // PUT key1 (0,1)
-        let value01 = StorageEntry { key: B256::with_last_byte(0), value: U256::from(1) };
+        let value01 = StorageEntry {
+            key: B256::with_last_byte(0),
+            value: U256::from(1),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key1, value01).expect(ERROR_PUT)).unwrap();
 
         // PUT key1 (0,0)
@@ -1314,7 +1342,11 @@ mod tests {
         env.update(|tx| tx.put::<PlainStorageState>(key1, value00).expect(ERROR_PUT)).unwrap();
 
         // PUT key2 (2,2)
-        let value22 = StorageEntry { key: B256::with_last_byte(2), value: U256::from(2) };
+        let value22 = StorageEntry {
+            key: B256::with_last_byte(2),
+            value: U256::from(2),
+            ..Default::default()
+        };
         env.update(|tx| tx.put::<PlainStorageState>(key2, value22).expect(ERROR_PUT)).unwrap();
 
         // Iterate with walk
diff --git a/crates/storage/db/src/lib.rs b/crates/storage/db/src/lib.rs
index 7090b4262..498e788c3 100644
--- a/crates/storage/db/src/lib.rs
+++ b/crates/storage/db/src/lib.rs
@@ -10,7 +10,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/errors/Cargo.toml b/crates/storage/errors/Cargo.toml
index 2e864e09d..987f80503 100644
--- a/crates/storage/errors/Cargo.toml
+++ b/crates/storage/errors/Cargo.toml
@@ -15,6 +15,7 @@ workspace = true
 reth-primitives-traits.workspace = true
 reth-fs-util.workspace = true
 reth-static-file-types.workspace = true
+reth-enclave.workspace = true
 
 # ethereum
 alloy-eips.workspace = true
diff --git a/crates/storage/errors/src/lib.rs b/crates/storage/errors/src/lib.rs
index 6abb0cd9b..8207d6ca0 100644
--- a/crates/storage/errors/src/lib.rs
+++ b/crates/storage/errors/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/errors/src/provider.rs b/crates/storage/errors/src/provider.rs
index d4b69cffb..df2c202d5 100644
--- a/crates/storage/errors/src/provider.rs
+++ b/crates/storage/errors/src/provider.rs
@@ -3,6 +3,7 @@ use alloc::{boxed::Box, string::String};
 use alloy_eips::{BlockHashOrNumber, HashOrNumber};
 use alloy_primitives::{Address, BlockHash, BlockNumber, TxNumber, B256};
 use derive_more::Display;
+use reth_enclave::EnclaveError;
 use reth_primitives_traits::GotExpected;
 use reth_static_file_types::StaticFileSegment;
 
@@ -136,6 +137,14 @@ pub enum ProviderError {
     UnifiedStorageWriterError(UnifiedStorageWriterError),
     /// Received invalid output from configured storage implementation.
     InvalidStorageOutput,
+    /// Enclave encryptography error.
+    EnclaveError(EnclaveError),
+}
+
+impl From<EnclaveError> for ProviderError {
+    fn from(err: EnclaveError) -> Self {
+        Self::EnclaveError(err)
+    }
 }
 
 impl From<DatabaseError> for ProviderError {
diff --git a/crates/storage/libmdbx-rs/mdbx-sys/src/lib.rs b/crates/storage/libmdbx-rs/mdbx-sys/src/lib.rs
index 6f86951ca..84823eb61 100644
--- a/crates/storage/libmdbx-rs/mdbx-sys/src/lib.rs
+++ b/crates/storage/libmdbx-rs/mdbx-sys/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![allow(non_upper_case_globals, non_camel_case_types, non_snake_case, clippy::all)]
diff --git a/crates/storage/libmdbx-rs/src/lib.rs b/crates/storage/libmdbx-rs/src/lib.rs
index 6a0fe97f7..7f7293c24 100644
--- a/crates/storage/libmdbx-rs/src/lib.rs
+++ b/crates/storage/libmdbx-rs/src/lib.rs
@@ -2,7 +2,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![allow(missing_docs, clippy::needless_pass_by_ref_mut)]
diff --git a/crates/storage/nippy-jar/src/lib.rs b/crates/storage/nippy-jar/src/lib.rs
index 98eddf22e..48b3dfb2d 100644
--- a/crates/storage/nippy-jar/src/lib.rs
+++ b/crates/storage/nippy-jar/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/provider/src/bundle_state/state_reverts.rs b/crates/storage/provider/src/bundle_state/state_reverts.rs
index 3e1ba2a4b..8b0c942a3 100644
--- a/crates/storage/provider/src/bundle_state/state_reverts.rs
+++ b/crates/storage/provider/src/bundle_state/state_reverts.rs
@@ -1,5 +1,5 @@
-use alloy_primitives::{B256, U256};
-use revm::db::states::RevertToSlot;
+use alloy_primitives::B256;
+use revm::{db::states::RevertToSlot, primitives::FlaggedStorage};
 use std::iter::Peekable;
 
 /// Iterator over storage reverts.
@@ -13,7 +13,7 @@ pub struct StorageRevertsIter<R: Iterator, W: Iterator> {
 impl<R, W> StorageRevertsIter<R, W>
 where
     R: Iterator<Item = (B256, RevertToSlot)>,
-    W: Iterator<Item = (B256, U256)>,
+    W: Iterator<Item = (B256, FlaggedStorage)>,
 {
     /// Create a new iterator over storage reverts.
     pub fn new(
@@ -24,12 +24,12 @@ where
     }
 
     /// Consume next revert and return it.
-    fn next_revert(&mut self) -> Option<(B256, U256)> {
+    fn next_revert(&mut self) -> Option<(B256, FlaggedStorage)> {
         self.reverts.next().map(|(key, revert)| (key, revert.to_previous_value()))
     }
 
     /// Consume next wiped storage and return it.
-    fn next_wiped(&mut self) -> Option<(B256, U256)> {
+    fn next_wiped(&mut self) -> Option<(B256, FlaggedStorage)> {
         self.wiped.next()
     }
 }
@@ -37,9 +37,9 @@ where
 impl<R, W> Iterator for StorageRevertsIter<R, W>
 where
     R: Iterator<Item = (B256, RevertToSlot)>,
-    W: Iterator<Item = (B256, U256)>,
+    W: Iterator<Item = (B256, FlaggedStorage)>,
 {
-    type Item = (B256, U256);
+    type Item = (B256, FlaggedStorage);
 
     /// Iterate over storage reverts and wiped entries and return items in the sorted order.
     /// NOTE: The implementation assumes that inner iterators are already sorted.
@@ -85,7 +85,7 @@ mod tests {
     fn test_storage_reverts_iter_empty() {
         // Create empty sample data for reverts and wiped entries.
         let reverts: Vec<(B256, RevertToSlot)> = vec![];
-        let wiped: Vec<(B256, U256)> = vec![];
+        let wiped: Vec<(B256, FlaggedStorage)> = vec![];
 
         // Create the iterator with the empty data.
         let iter = StorageRevertsIter::new(reverts, wiped);
@@ -102,7 +102,7 @@ mod tests {
         // Create sample data for only reverts.
         let reverts = vec![
             (B256::from_slice(&[4; 32]), RevertToSlot::Destroyed),
-            (B256::from_slice(&[5; 32]), RevertToSlot::Some(U256::from(40))),
+            (B256::from_slice(&[5; 32]), RevertToSlot::Some(FlaggedStorage::new_from_value(40))),
         ];
 
         // Create the iterator with only reverts and no wiped entries.
@@ -115,8 +115,9 @@ mod tests {
         assert_eq!(
             results,
             vec![
-                (B256::from_slice(&[4; 32]), U256::ZERO), // Revert slot previous value
-                (B256::from_slice(&[5; 32]), U256::from(40)), // Only revert present.
+                (B256::from_slice(&[4; 32]), FlaggedStorage::ZERO), // Revert slot previous value
+                (B256::from_slice(&[5; 32]), FlaggedStorage::new_from_value(40)), /* Only revert
+                                                                     * present. */
             ]
         );
     }
@@ -125,8 +126,8 @@ mod tests {
     fn test_storage_reverts_iter_wiped_only() {
         // Create sample data for only wiped entries.
         let wiped = vec![
-            (B256::from_slice(&[6; 32]), U256::from(50)),
-            (B256::from_slice(&[7; 32]), U256::from(60)),
+            (B256::from_slice(&[6; 32]), FlaggedStorage::new_from_value(50)),
+            (B256::from_slice(&[7; 32]), FlaggedStorage::new_from_value(60)),
         ];
 
         // Create the iterator with only wiped entries and no reverts.
@@ -139,8 +140,10 @@ mod tests {
         assert_eq!(
             results,
             vec![
-                (B256::from_slice(&[6; 32]), U256::from(50)), // Only wiped present.
-                (B256::from_slice(&[7; 32]), U256::from(60)), // Only wiped present.
+                (B256::from_slice(&[6; 32]), FlaggedStorage::new_from_value(50)), /* Only wiped
+                                                                                   * present. */
+                (B256::from_slice(&[7; 32]), FlaggedStorage::new_from_value(60)), /* Only wiped
+                                                                                   * present. */
             ]
         );
     }
@@ -149,15 +152,15 @@ mod tests {
     fn test_storage_reverts_iter_interleaved() {
         // Create sample data for interleaved reverts and wiped entries.
         let reverts = vec![
-            (B256::from_slice(&[8; 32]), RevertToSlot::Some(U256::from(70))),
-            (B256::from_slice(&[9; 32]), RevertToSlot::Some(U256::from(80))),
+            (B256::from_slice(&[8; 32]), RevertToSlot::Some(FlaggedStorage::new_from_value(70))),
+            (B256::from_slice(&[9; 32]), RevertToSlot::Some(FlaggedStorage::new_from_value(80))),
             // Some higher key than wiped
-            (B256::from_slice(&[15; 32]), RevertToSlot::Some(U256::from(90))),
+            (B256::from_slice(&[15; 32]), RevertToSlot::Some(FlaggedStorage::new_from_value(90))),
         ];
 
         let wiped = vec![
-            (B256::from_slice(&[8; 32]), U256::from(75)), // Same key as revert
-            (B256::from_slice(&[10; 32]), U256::from(85)), // Wiped with new key
+            (B256::from_slice(&[8; 32]), FlaggedStorage::new_from_value(75)), // Same key as revert
+            (B256::from_slice(&[10; 32]), FlaggedStorage::new_from_value(85)), // Wiped with new key
         ];
 
         // Create the iterator with the sample data.
@@ -170,10 +173,11 @@ mod tests {
         assert_eq!(
             results,
             vec![
-                (B256::from_slice(&[8; 32]), U256::from(70)), // Revert takes priority.
-                (B256::from_slice(&[9; 32]), U256::from(80)), // Only revert present.
-                (B256::from_slice(&[10; 32]), U256::from(85)), // Wiped entry.
-                (B256::from_slice(&[15; 32]), U256::from(90)), // WGreater revert entry
+                (B256::from_slice(&[8; 32]), FlaggedStorage::new_from_value(70)), /* Revert takes priority. */
+                (B256::from_slice(&[9; 32]), FlaggedStorage::new_from_value(80)), /* Only revert
+                                                                                   * present. */
+                (B256::from_slice(&[10; 32]), FlaggedStorage::new_from_value(85)), // Wiped entry.
+                (B256::from_slice(&[15; 32]), FlaggedStorage::new_from_value(90)), /* WGreater revert entry */
             ]
         );
     }
diff --git a/crates/storage/provider/src/lib.rs b/crates/storage/provider/src/lib.rs
index deccdea28..2f596d770 100644
--- a/crates/storage/provider/src/lib.rs
+++ b/crates/storage/provider/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/provider/src/providers/bundle_state_provider.rs b/crates/storage/provider/src/providers/bundle_state_provider.rs
index 16cd64ca2..101b78971 100644
--- a/crates/storage/provider/src/providers/bundle_state_provider.rs
+++ b/crates/storage/provider/src/providers/bundle_state_provider.rs
@@ -9,6 +9,7 @@ use reth_trie::{
     updates::TrieUpdates, AccountProof, HashedPostState, HashedStorage, MultiProof,
     MultiProofTargets, StorageMultiProof, TrieInput,
 };
+use revm::primitives::FlaggedStorage;
 
 /// A state provider that resolves to data from either a wrapped [`crate::ExecutionOutcome`]
 /// or an underlying state provider.
@@ -197,7 +198,7 @@ impl<SP: StateProvider, EDP: ExecutionDataProvider> StateProvider for BundleStat
         &self,
         account: Address,
         storage_key: alloy_primitives::StorageKey,
-    ) -> ProviderResult<Option<alloy_primitives::StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         let u256_storage_key = storage_key.into();
         if let Some(value) = self
             .block_execution_data_provider
diff --git a/crates/storage/provider/src/providers/consistent.rs b/crates/storage/provider/src/providers/consistent.rs
index 6d7529d2b..139f0161b 100644
--- a/crates/storage/provider/src/providers/consistent.rs
+++ b/crates/storage/provider/src/providers/consistent.rs
@@ -267,10 +267,13 @@ impl<N: ProviderNodeTypes> ConsistentProvider<N> {
                 hash_map::Entry::Vacant(entry) => {
                     let new_storage_value =
                         state_provider.storage(address, old_storage.key)?.unwrap_or_default();
-                    entry.insert((old_storage.value, new_storage_value));
+                    entry.insert((
+                        (old_storage.value, old_storage.is_private),
+                        (new_storage_value.value, old_storage.is_private),
+                    ));
                 }
                 hash_map::Entry::Occupied(mut entry) => {
-                    entry.get_mut().0 = old_storage.value;
+                    entry.get_mut().0 = (old_storage.value, old_storage.is_private);
                 }
             };
 
@@ -1382,7 +1385,11 @@ impl<N: ProviderNodeTypes> StorageChangeSetReader for ConsistentProvider<N> {
                     revert.storage_revert.into_iter().map(move |(key, value)| {
                         (
                             BlockNumberAddress((block_number, revert.address)),
-                            StorageEntry { key: key.into(), value: value.to_previous_value() },
+                            StorageEntry {
+                                key: key.into(),
+                                value: value.to_previous_value().value,
+                                is_private: value.to_previous_value().is_private,
+                            },
                         )
                     })
                 })
diff --git a/crates/storage/provider/src/providers/database/provider.rs b/crates/storage/provider/src/providers/database/provider.rs
index 03ece42b6..4d97edb10 100644
--- a/crates/storage/provider/src/providers/database/provider.rs
+++ b/crates/storage/provider/src/providers/database/provider.rs
@@ -72,7 +72,7 @@ use reth_trie::{
 use reth_trie_db::{DatabaseStateRoot, DatabaseStorageTrieCursor};
 use revm::{
     db::states::{PlainStateReverts, PlainStorageChangeset, PlainStorageRevert, StateChangeset},
-    primitives::{BlockEnv, CfgEnvWithHandlerCfg},
+    primitives::{BlockEnv, CfgEnvWithHandlerCfg, FlaggedStorage},
 };
 use std::{
     cmp::Ordering,
@@ -780,10 +780,13 @@ impl<TX: DbTx + 'static, N: NodeTypesForProvider> DatabaseProvider<TX, N> {
                         .seek_by_key_subkey(address, old_storage.key)?
                         .filter(|storage| storage.key == old_storage.key)
                         .unwrap_or_default();
-                    entry.insert((old_storage.value, new_storage.value));
+                    entry.insert((
+                        (old_storage.value, old_storage.is_private),
+                        (new_storage.value, new_storage.is_private),
+                    ));
                 }
                 hash_map::Entry::Occupied(mut entry) => {
-                    entry.get_mut().0 = old_storage.value;
+                    entry.get_mut().0 = (old_storage.value, old_storage.is_private);
                 }
             };
 
@@ -1735,7 +1738,7 @@ impl<TX: DbTx + 'static, N: NodeTypes> StorageReader for DatabaseProvider<TX, N>
                         Ok(plain_storage
                             .seek_by_key_subkey(address, key)?
                             .filter(|v| v.key == key)
-                            .unwrap_or_else(|| StorageEntry { key, value: Default::default() }))
+                            .unwrap_or_else(|| StorageEntry { key, ..Default::default() }))
                     })
                     .collect::<ProviderResult<Vec<_>>>()
                     .map(|storage| (address, storage))
@@ -1886,16 +1889,19 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
                 if wiped {
                     tracing::trace!(?address, "Wiping storage");
                     if let Some((_, entry)) = storages_cursor.seek_exact(address)? {
-                        wiped_storage.push((entry.key, entry.value));
+                        wiped_storage.push((entry.key, entry.into()));
                         while let Some(entry) = storages_cursor.next_dup_val()? {
-                            wiped_storage.push((entry.key, entry.value))
+                            wiped_storage.push((entry.key, entry.into()))
                         }
                     }
                 }
 
                 tracing::trace!(?address, ?storage, "Writing storage reverts");
                 for (key, value) in StorageRevertsIter::new(storage, wiped_storage) {
-                    storage_changeset_cursor.append_dup(storage_id, StorageEntry { key, value })?;
+                    storage_changeset_cursor.append_dup(
+                        storage_id,
+                        StorageEntry { key, value: value.value, is_private: value.is_private },
+                    )?;
                 }
             }
         }
@@ -1960,7 +1966,11 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
             // cast storages to B256.
             let mut storage = storage
                 .into_iter()
-                .map(|(k, value)| StorageEntry { key: k.into(), value })
+                .map(|(k, value)| StorageEntry {
+                    key: k.into(),
+                    value: value.value,
+                    is_private: value.is_private,
+                })
                 .collect::<Vec<_>>();
             // sort storage slots by key.
             storage.par_sort_unstable_by_key(|a| a.key);
@@ -2003,7 +2013,11 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
             }
 
             for (hashed_slot, value) in storage.storage_slots_sorted() {
-                let entry = StorageEntry { key: hashed_slot, value };
+                let entry = StorageEntry {
+                    key: hashed_slot,
+                    value: value.value,
+                    is_private: value.is_private,
+                };
                 if let Some(db_entry) =
                     hashed_storage_cursor.seek_by_key_subkey(*hashed_address, entry.key)?
                 {
@@ -2093,7 +2107,11 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
 
             // revert storages
             for (storage_key, (old_storage_value, _new_storage_value)) in storage {
-                let storage_entry = StorageEntry { key: *storage_key, value: *old_storage_value };
+                let storage_entry = StorageEntry {
+                    key: *storage_key,
+                    value: old_storage_value.0,
+                    is_private: old_storage_value.1,
+                };
                 // delete previous value
                 // TODO: This does not use dupsort features
                 if plain_storage_cursor
@@ -2105,7 +2123,7 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
                 }
 
                 // insert value if needed
-                if !old_storage_value.is_zero() {
+                if !FlaggedStorage::new(old_storage_value.0, old_storage_value.1).is_zero() {
                     plain_storage_cursor.upsert(*address, storage_entry)?;
                 }
             }
@@ -2193,7 +2211,11 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
 
             // revert storages
             for (storage_key, (old_storage_value, _new_storage_value)) in storage {
-                let storage_entry = StorageEntry { key: *storage_key, value: *old_storage_value };
+                let storage_entry = StorageEntry {
+                    key: *storage_key,
+                    value: old_storage_value.0,
+                    is_private: old_storage_value.1,
+                };
                 // delete previous value
                 // TODO: This does not use dupsort features
                 if plain_storage_cursor
@@ -2205,7 +2227,7 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypesForProvider> StateWriter
                 }
 
                 // insert value if needed
-                if !old_storage_value.is_zero() {
+                if !FlaggedStorage::new(old_storage_value.0, old_storage_value.1).is_zero() {
                     plain_storage_cursor.upsert(*address, storage_entry)?;
                 }
             }
@@ -2414,16 +2436,21 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypes> HashingWriter for DatabaseProvi
         let mut hashed_storages = changesets
             .into_iter()
             .map(|(BlockNumberAddress((_, address)), storage_entry)| {
-                (keccak256(address), keccak256(storage_entry.key), storage_entry.value)
+                (
+                    keccak256(address),
+                    keccak256(storage_entry.key),
+                    storage_entry.value,
+                    storage_entry.is_private,
+                )
             })
             .collect::<Vec<_>>();
-        hashed_storages.sort_by_key(|(ha, hk, _)| (*ha, *hk));
+        hashed_storages.sort_by_key(|(ha, hk, _, _)| (*ha, *hk));
 
         // Apply values to HashedState, and remove the account if it's None.
         let mut hashed_storage_keys: HashMap<B256, BTreeSet<B256>> =
             HashMap::with_capacity_and_hasher(hashed_storages.len(), Default::default());
         let mut hashed_storage = self.tx.cursor_dup_write::<tables::HashedStorages>()?;
-        for (hashed_address, key, value) in hashed_storages.into_iter().rev() {
+        for (hashed_address, key, value, is_private) in hashed_storages.into_iter().rev() {
             hashed_storage_keys.entry(hashed_address).or_default().insert(key);
 
             if hashed_storage
@@ -2435,7 +2462,7 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypes> HashingWriter for DatabaseProvi
             }
 
             if !value.is_zero() {
-                hashed_storage.upsert(hashed_address, StorageEntry { key, value })?;
+                hashed_storage.upsert(hashed_address, StorageEntry { key, value, is_private })?;
             }
         }
         Ok(hashed_storage_keys)
@@ -2468,10 +2495,10 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypes> HashingWriter for DatabaseProvi
                 map
             });
 
-        let hashed_storage_keys = hashed_storages
-            .iter()
-            .map(|(hashed_address, entries)| (*hashed_address, entries.keys().copied().collect()))
-            .collect();
+        let hashed_storage_keys =
+            HashMap::from_iter(hashed_storages.iter().map(|(hashed_address, entries)| {
+                (*hashed_address, BTreeSet::from_iter(entries.keys().copied()))
+            }));
 
         let mut hashed_storage_cursor = self.tx.cursor_dup_write::<tables::HashedStorages>()?;
         // Hash the address and key and apply them to HashedStorage (if Storage is None
@@ -2487,7 +2514,10 @@ impl<TX: DbTxMut + DbTx + 'static, N: NodeTypes> HashingWriter for DatabaseProvi
                 }
 
                 if !value.is_zero() {
-                    hashed_storage_cursor.upsert(hashed_address, StorageEntry { key, value })?;
+                    hashed_storage_cursor.upsert(
+                        hashed_address,
+                        StorageEntry { key, value, ..Default::default() },
+                    )?;
                 }
                 Ok(())
             })
diff --git a/crates/storage/provider/src/providers/state/historical.rs b/crates/storage/provider/src/providers/state/historical.rs
index be5c3b504..898e960bf 100644
--- a/crates/storage/provider/src/providers/state/historical.rs
+++ b/crates/storage/provider/src/providers/state/historical.rs
@@ -3,9 +3,7 @@ use crate::{
     HashedPostStateProvider, ProviderError, StateProvider, StateRootProvider,
 };
 use alloy_eips::merge::EPOCH_SLOTS;
-use alloy_primitives::{
-    map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, StorageValue, B256,
-};
+use alloy_primitives::{map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, B256};
 use reth_db::{tables, BlockNumberList};
 use reth_db_api::{
     cursor::{DbCursorRO, DbDupCursorRO},
@@ -29,6 +27,7 @@ use reth_trie_db::{
     DatabaseHashedPostState, DatabaseHashedStorage, DatabaseProof, DatabaseStateRoot,
     DatabaseStorageProof, DatabaseStorageRoot, DatabaseTrieWitness, StateCommitment,
 };
+use revm::primitives::FlaggedStorage;
 use std::fmt::Debug;
 
 /// State provider for a given block number which takes a tx reference.
@@ -412,7 +411,7 @@ impl<Provider: DBProvider + BlockNumReader + BlockHashReader + StateCommitmentPr
         &self,
         address: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         match self.storage_history_lookup(address, storage_key)? {
             HistoryInfo::NotYetWritten => Ok(None),
             HistoryInfo::InChangeset(changeset_block_number) => Ok(Some(
@@ -425,15 +424,15 @@ impl<Provider: DBProvider + BlockNumReader + BlockHashReader + StateCommitmentPr
                         address,
                         storage_key: Box::new(storage_key),
                     })?
-                    .value,
+                    .into(),
             )),
             HistoryInfo::InPlainState | HistoryInfo::MaybeInPlainState => Ok(self
                 .tx()
                 .cursor_dup_read::<tables::PlainStorageState>()?
                 .seek_by_key_subkey(address, storage_key)?
                 .filter(|entry| entry.key == storage_key)
-                .map(|entry| entry.value)
-                .or(Some(StorageValue::ZERO))),
+                .map(|entry| entry.into())
+                .or(Some(FlaggedStorage::ZERO))),
         }
     }
 
@@ -554,6 +553,7 @@ mod tests {
         StateCommitmentProvider,
     };
     use reth_storage_errors::provider::ProviderError;
+    use revm::primitives::FlaggedStorage;
 
     const ADDRESS: Address = address!("0000000000000000000000000000000000000001");
     const HIGHER_ADDRESS: Address = address!("0000000000000000000000000000000000000005");
@@ -704,13 +704,15 @@ mod tests {
         )
         .unwrap();
 
-        let higher_entry_plain = StorageEntry { key: STORAGE, value: U256::from(1000) };
-        let higher_entry_at4 = StorageEntry { key: STORAGE, value: U256::from(0) };
-        let entry_plain = StorageEntry { key: STORAGE, value: U256::from(100) };
-        let entry_at15 = StorageEntry { key: STORAGE, value: U256::from(15) };
-        let entry_at10 = StorageEntry { key: STORAGE, value: U256::from(10) };
-        let entry_at7 = StorageEntry { key: STORAGE, value: U256::from(7) };
-        let entry_at3 = StorageEntry { key: STORAGE, value: U256::from(0) };
+        let higher_entry_plain =
+            StorageEntry { key: STORAGE, value: U256::from(1000), is_private: false };
+        let higher_entry_at4 =
+            StorageEntry { key: STORAGE, value: U256::from(0), is_private: false };
+        let entry_plain = StorageEntry { key: STORAGE, value: U256::from(100), is_private: false };
+        let entry_at15 = StorageEntry { key: STORAGE, value: U256::from(15), is_private: false };
+        let entry_at10 = StorageEntry { key: STORAGE, value: U256::from(10), is_private: false };
+        let entry_at7 = StorageEntry { key: STORAGE, value: U256::from(7), is_private: false };
+        let entry_at3 = StorageEntry { key: STORAGE, value: U256::from(0), is_private: false };
 
         // setup
         tx.put::<tables::StorageChangeSets>((3, ADDRESS).into(), entry_at3).unwrap();
@@ -730,31 +732,31 @@ mod tests {
         assert_eq!(HistoricalStateProviderRef::new(&db, 0).storage(ADDRESS, STORAGE), Ok(None));
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 3).storage(ADDRESS, STORAGE),
-            Ok(Some(U256::ZERO))
+            Ok(Some(FlaggedStorage::ZERO))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 4).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_at7.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_at7.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 7).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_at7.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_at7.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 9).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_at10.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_at10.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 10).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_at10.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_at10.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 11).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_at15.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_at15.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 16).storage(ADDRESS, STORAGE),
-            Ok(Some(entry_plain.value))
+            Ok(Some(FlaggedStorage::new_from_value(entry_plain.value)))
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 1).storage(HIGHER_ADDRESS, STORAGE),
@@ -762,7 +764,7 @@ mod tests {
         );
         assert_eq!(
             HistoricalStateProviderRef::new(&db, 1000).storage(HIGHER_ADDRESS, STORAGE),
-            Ok(Some(higher_entry_plain.value))
+            Ok(Some(FlaggedStorage::new_from_value(higher_entry_plain.value)))
         );
     }
 
diff --git a/crates/storage/provider/src/providers/state/latest.rs b/crates/storage/provider/src/providers/state/latest.rs
index abbab7259..313ae96e4 100644
--- a/crates/storage/provider/src/providers/state/latest.rs
+++ b/crates/storage/provider/src/providers/state/latest.rs
@@ -2,9 +2,7 @@ use crate::{
     providers::state::macros::delegate_provider_impls, AccountReader, BlockHashReader,
     HashedPostStateProvider, StateProvider, StateRootProvider,
 };
-use alloy_primitives::{
-    map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, StorageValue, B256,
-};
+use alloy_primitives::{map::B256HashMap, Address, BlockNumber, Bytes, StorageKey, B256};
 use reth_db::tables;
 use reth_db_api::{cursor::DbDupCursorRO, transaction::DbTx};
 use reth_primitives::{Account, Bytecode};
@@ -23,6 +21,7 @@ use reth_trie_db::{
     DatabaseProof, DatabaseStateRoot, DatabaseStorageProof, DatabaseStorageRoot,
     DatabaseTrieWitness, StateCommitment,
 };
+use revm::primitives::FlaggedStorage;
 
 /// State provider over latest state that takes tx reference.
 ///
@@ -173,11 +172,11 @@ impl<Provider: DBProvider + BlockHashReader + StateCommitmentProvider> StateProv
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         let mut cursor = self.tx().cursor_dup_read::<tables::PlainStorageState>()?;
         if let Some(entry) = cursor.seek_by_key_subkey(account, storage_key)? {
             if entry.key == storage_key {
-                return Ok(Some(entry.value))
+                return Ok(Some(entry.into()))
             }
         }
         Ok(None)
diff --git a/crates/storage/provider/src/providers/state/macros.rs b/crates/storage/provider/src/providers/state/macros.rs
index da7507df8..994eed456 100644
--- a/crates/storage/provider/src/providers/state/macros.rs
+++ b/crates/storage/provider/src/providers/state/macros.rs
@@ -38,7 +38,7 @@ macro_rules! delegate_provider_impls {
                 fn canonical_hashes_range(&self, start: alloy_primitives::BlockNumber, end: alloy_primitives::BlockNumber) -> reth_storage_errors::provider::ProviderResult<Vec<alloy_primitives::B256>>;
             }
             StateProvider $(where [$($generics)*])? {
-                fn storage(&self, account: alloy_primitives::Address, storage_key: alloy_primitives::StorageKey) -> reth_storage_errors::provider::ProviderResult<Option<alloy_primitives::StorageValue>>;
+                fn storage(&self, account: alloy_primitives::Address, storage_key: alloy_primitives::StorageKey) -> reth_storage_errors::provider::ProviderResult<Option<revm::primitives::FlaggedStorage>>;
                 fn bytecode_by_hash(&self, code_hash: alloy_primitives::B256) -> reth_storage_errors::provider::ProviderResult<Option<reth_primitives::Bytecode>>;
             }
             StateRootProvider $(where [$($generics)*])? {
diff --git a/crates/storage/provider/src/test_utils/blocks.rs b/crates/storage/provider/src/test_utils/blocks.rs
index 7f357aa18..a95169707 100644
--- a/crates/storage/provider/src/test_utils/blocks.rs
+++ b/crates/storage/provider/src/test_utils/blocks.rs
@@ -16,7 +16,10 @@ use reth_primitives::{
     TransactionSigned, TxType,
 };
 use reth_trie::root::{state_root_unhashed, storage_root_unhashed};
-use revm::{db::BundleState, primitives::AccountInfo};
+use revm::{
+    db::BundleState,
+    primitives::{AccountInfo, FlaggedStorage},
+};
 use std::{str::FromStr, sync::LazyLock};
 
 /// Assert genesis block
@@ -200,7 +203,13 @@ fn block1(number: BlockNumber) -> (SealedBlockWithSenders, ExecutionOutcome) {
             .revert_account_info(number, account1, Some(None))
             .state_present_account_info(account2, info)
             .revert_account_info(number, account2, Some(None))
-            .state_storage(account1, HashMap::from_iter([(slot, (U256::ZERO, U256::from(10)))]))
+            .state_storage(
+                account1,
+                HashMap::from_iter([(
+                    slot,
+                    (FlaggedStorage::ZERO, FlaggedStorage::new_from_value(10)),
+                )]),
+            )
             .build(),
         vec![vec![Some(
             #[allow(clippy::needless_update)] // side-effect of optimism fields
@@ -254,13 +263,23 @@ fn block2(
                 account,
                 AccountInfo { nonce: 3, balance: U256::from(20), ..Default::default() },
             )
-            .state_storage(account, HashMap::from_iter([(slot, (U256::ZERO, U256::from(15)))]))
+            .state_storage(
+                account,
+                HashMap::from_iter([(
+                    slot,
+                    (FlaggedStorage::ZERO, FlaggedStorage::new_from_value(15)),
+                )]),
+            )
             .revert_account_info(
                 number,
                 account,
                 Some(Some(AccountInfo { nonce: 1, balance: U256::from(10), ..Default::default() })),
             )
-            .revert_storage(number, account, Vec::from([(slot, U256::from(10))]))
+            .revert_storage(
+                number,
+                account,
+                Vec::from([(slot, FlaggedStorage::new_from_value(10))]),
+            )
             .build(),
         vec![vec![Some(
             #[allow(clippy::needless_update)] // side-effect of optimism fields
@@ -321,10 +340,9 @@ fn block3(
             )
             .state_storage(
                 address,
-                slot_range
-                    .clone()
-                    .map(|slot| (U256::from(slot), (U256::ZERO, U256::from(slot))))
-                    .collect(),
+                HashMap::from_iter(slot_range.clone().map(|slot| {
+                    (U256::from(slot), (FlaggedStorage::ZERO, FlaggedStorage::new_from_value(slot)))
+                })),
             )
             .revert_account_info(number, address, Some(None))
             .revert_storage(number, address, Vec::new());
@@ -387,18 +405,22 @@ fn block4(
                 )
                 .state_storage(
                     address,
-                    slot_range
-                        .clone()
-                        .map(|slot| (U256::from(slot), (U256::from(slot), U256::from(slot * 2))))
-                        .collect(),
+                    HashMap::from_iter(slot_range.clone().map(|slot| {
+                        (
+                            U256::from(slot),
+                            (
+                                FlaggedStorage::new_from_value(slot),
+                                FlaggedStorage::new_from_value(slot * 2),
+                            ),
+                        )
+                    })),
                 )
         } else {
             bundle_state_builder.state_address(address).state_storage(
                 address,
-                slot_range
-                    .clone()
-                    .map(|slot| (U256::from(slot), (U256::from(slot), U256::ZERO)))
-                    .collect(),
+                HashMap::from_iter(slot_range.clone().map(|slot| {
+                    (U256::from(slot), (FlaggedStorage::new_from_value(slot), FlaggedStorage::ZERO))
+                })),
             )
         };
         // record previous account info
@@ -415,7 +437,11 @@ fn block4(
             .revert_storage(
                 number,
                 address,
-                slot_range.clone().map(|slot| (U256::from(slot), U256::from(slot))).collect(),
+                Vec::from_iter(
+                    slot_range
+                        .clone()
+                        .map(|slot| (U256::from(slot), FlaggedStorage::new_from_value(slot))),
+                ),
             );
     }
     let execution_outcome = ExecutionOutcome::new(
@@ -475,34 +501,38 @@ fn block5(
             )
             .state_storage(
                 address,
-                slot_range
-                    .clone()
-                    .take(50)
-                    .map(|slot| (U256::from(slot), (U256::from(slot), U256::from(slot * 4))))
-                    .collect(),
+                HashMap::from_iter(slot_range.clone().take(50).map(|slot| {
+                    (
+                        U256::from(slot),
+                        (
+                            FlaggedStorage::new_from_value(slot),
+                            FlaggedStorage::new_from_value(slot * 4),
+                        ),
+                    )
+                })),
             );
-        bundle_state_builder = if idx % 2 == 0 {
-            bundle_state_builder
-                .revert_account_info(
-                    number,
-                    address,
-                    Some(Some(AccountInfo {
-                        nonce: 1,
-                        balance: U256::from(idx * 2),
-                        ..Default::default()
-                    })),
-                )
-                .revert_storage(
-                    number,
-                    address,
-                    slot_range
-                        .clone()
-                        .map(|slot| (U256::from(slot), U256::from(slot * 2)))
-                        .collect(),
-                )
-        } else {
-            bundle_state_builder.revert_address(number, address)
-        };
+        bundle_state_builder =
+            if idx % 2 == 0 {
+                bundle_state_builder
+                    .revert_account_info(
+                        number,
+                        address,
+                        Some(Some(AccountInfo {
+                            nonce: 1,
+                            balance: U256::from(idx * 2),
+                            ..Default::default()
+                        })),
+                    )
+                    .revert_storage(
+                        number,
+                        address,
+                        Vec::from_iter(slot_range.clone().map(|slot| {
+                            (U256::from(slot), FlaggedStorage::new_from_value(slot * 2))
+                        })),
+                    )
+            } else {
+                bundle_state_builder.revert_address(number, address)
+            };
     }
     let execution_outcome = ExecutionOutcome::new(
         bundle_state_builder.build(),
diff --git a/crates/storage/provider/src/test_utils/mock.rs b/crates/storage/provider/src/test_utils/mock.rs
index 69635a55f..95bb48b30 100644
--- a/crates/storage/provider/src/test_utils/mock.rs
+++ b/crates/storage/provider/src/test_utils/mock.rs
@@ -13,7 +13,7 @@ use alloy_eips::{
 use alloy_primitives::{
     keccak256,
     map::{B256HashMap, HashMap},
-    Address, BlockHash, BlockNumber, Bytes, StorageKey, StorageValue, TxHash, TxNumber, B256, U256,
+    Address, BlockHash, BlockNumber, Bytes, StorageKey, TxHash, TxNumber, B256, U256,
 };
 use parking_lot::Mutex;
 use reth_chainspec::{ChainInfo, ChainSpec};
@@ -38,7 +38,7 @@ use reth_trie::{
     MultiProofTargets, StorageMultiProof, StorageProof, TrieInput,
 };
 use reth_trie_db::MerklePatriciaTrie;
-use revm::primitives::{BlockEnv, CfgEnvWithHandlerCfg};
+use revm::primitives::{BlockEnv, CfgEnvWithHandlerCfg, FlaggedStorage};
 use std::{
     collections::BTreeMap,
     ops::{RangeBounds, RangeInclusive},
@@ -77,7 +77,7 @@ impl Default for MockEthProvider {
 pub struct ExtendedAccount {
     account: Account,
     bytecode: Option<Bytecode>,
-    storage: HashMap<StorageKey, StorageValue>,
+    storage: HashMap<StorageKey, FlaggedStorage>,
 }
 
 impl ExtendedAccount {
@@ -102,7 +102,7 @@ impl ExtendedAccount {
     /// the value is updated.
     pub fn extend_storage(
         mut self,
-        storage: impl IntoIterator<Item = (StorageKey, StorageValue)>,
+        storage: impl IntoIterator<Item = (StorageKey, FlaggedStorage)>,
     ) -> Self {
         self.storage.extend(storage);
         self
@@ -690,7 +690,7 @@ impl StateProvider for MockEthProvider {
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         let lock = self.accounts.lock();
         Ok(lock.get(&account).and_then(|account| account.storage.get(&storage_key)).copied())
     }
diff --git a/crates/storage/provider/src/test_utils/mod.rs b/crates/storage/provider/src/test_utils/mod.rs
index b6788914e..9b6ea1718 100644
--- a/crates/storage/provider/src/test_utils/mod.rs
+++ b/crates/storage/provider/src/test_utils/mod.rs
@@ -72,7 +72,11 @@ pub fn insert_genesis<N: ProviderNodeTypes<ChainSpec = ChainSpec>>(
         account.storage.map(|storage| {
             (
                 addr,
-                storage.into_iter().map(|(key, value)| StorageEntry { key, value: value.into() }),
+                storage.into_iter().map(|(key, value)| StorageEntry {
+                    key,
+                    value: value.into(),
+                    ..Default::default()
+                }),
             )
         })
     });
diff --git a/crates/storage/provider/src/writer/mod.rs b/crates/storage/provider/src/writer/mod.rs
index 7ab6499cc..8138c66fa 100644
--- a/crates/storage/provider/src/writer/mod.rs
+++ b/crates/storage/provider/src/writer/mod.rs
@@ -249,6 +249,7 @@ mod tests {
         },
         primitives::{
             Account as RevmAccount, AccountInfo as RevmAccountInfo, AccountStatus, EvmStorageSlot,
+            FlaggedStorage,
         },
         DatabaseCommit, State,
     };
@@ -276,7 +277,10 @@ mod tests {
                     .insert(hashed_address, Account { nonce: 1, ..Default::default() })
                     .unwrap();
                 storage_cursor
-                    .insert(hashed_address, StorageEntry { key: hashed_slot, value: U256::from(1) })
+                    .insert(
+                        hashed_address,
+                        StorageEntry { key: hashed_slot, value: U256::from(1), is_private: false },
+                    )
                     .unwrap();
             }
             provider_rw.commit().unwrap();
@@ -442,15 +446,22 @@ mod tests {
 
         let address_a = Address::ZERO;
         let address_b = Address::repeat_byte(0xff);
+        let address_c = Address::random();
 
         let account_b = RevmAccountInfo { balance: U256::from(2), nonce: 2, ..Default::default() };
+        let account_c = RevmAccountInfo { balance: U256::from(1), nonce: 3, ..Default::default() };
 
         let mut state = State::builder().with_bundle_update().build();
         state.insert_not_existing(address_a);
         state.insert_account_with_storage(
             address_b,
             account_b.clone(),
-            HashMap::from_iter([(U256::from(1), U256::from(1))]),
+            HashMap::from_iter([(U256::from(1), FlaggedStorage::new(1, false))]),
+        );
+        state.insert_account_with_storage(
+            address_c,
+            account_c.clone(),
+            HashMap::from_iter([(U256::from(3), FlaggedStorage::new(1, false))]),
         );
 
         state.commit(HashMap::from_iter([
@@ -464,11 +475,17 @@ mod tests {
                     storage: HashMap::from_iter([
                         (
                             U256::from(0),
-                            EvmStorageSlot { present_value: U256::from(1), ..Default::default() },
+                            EvmStorageSlot {
+                                present_value: FlaggedStorage::new(1, true),
+                                ..Default::default()
+                            },
                         ),
                         (
                             U256::from(1),
-                            EvmStorageSlot { present_value: U256::from(2), ..Default::default() },
+                            EvmStorageSlot {
+                                present_value: FlaggedStorage::new(2, true),
+                                ..Default::default()
+                            },
                         ),
                     ]),
                 },
@@ -482,8 +499,24 @@ mod tests {
                     storage: HashMap::from_iter([(
                         U256::from(1),
                         EvmStorageSlot {
-                            present_value: U256::from(2),
-                            original_value: U256::from(1),
+                            present_value: FlaggedStorage::new(2, false),
+                            original_value: FlaggedStorage::new(1, false),
+                            ..Default::default()
+                        },
+                    )]),
+                },
+            ),
+            (
+                address_c,
+                RevmAccount {
+                    status: AccountStatus::Touched,
+                    info: account_c,
+                    // 0x03 => {private: false, value: 1} => {private: true, value: 2}
+                    storage: HashMap::from_iter([(
+                        U256::from(3),
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new(2, true),
+                            original_value: FlaggedStorage::new(1, false),
                             ..Default::default()
                         },
                     )]),
@@ -507,16 +540,23 @@ mod tests {
 
         assert_eq!(
             storage_cursor.seek_exact(address_a).unwrap(),
-            Some((address_a, StorageEntry { key: B256::ZERO, value: U256::from(1) })),
-            "Slot 0 for account A should be 1"
+            Some((
+                address_a,
+                StorageEntry { key: B256::ZERO, value: U256::from(1), is_private: true }
+            )),
+            "Slot 0 for account A should be a private 1"
         );
         assert_eq!(
             storage_cursor.next_dup().unwrap(),
             Some((
                 address_a,
-                StorageEntry { key: B256::from(U256::from(1).to_be_bytes()), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::from(U256::from(1).to_be_bytes()),
+                    value: U256::from(2),
+                    is_private: true
+                }
             )),
-            "Slot 1 for account A should be 2"
+            "Slot 1 for account A should be a private 2"
         );
         assert_eq!(
             storage_cursor.next_dup().unwrap(),
@@ -528,15 +568,36 @@ mod tests {
             storage_cursor.seek_exact(address_b).unwrap(),
             Some((
                 address_b,
-                StorageEntry { key: B256::from(U256::from(1).to_be_bytes()), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::from(U256::from(1).to_be_bytes()),
+                    value: U256::from(2),
+                    is_private: false
+                }
             )),
-            "Slot 1 for account B should be 2"
+            "Slot 1 for account B should be a public 2"
         );
         assert_eq!(
             storage_cursor.next_dup().unwrap(),
             None,
             "Account B should only have 1 storage slot"
         );
+        assert_eq!(
+            storage_cursor.seek_exact(address_c).unwrap(),
+            Some((
+                address_c,
+                StorageEntry {
+                    key: B256::from(U256::from(3).to_be_bytes()),
+                    value: U256::from(2),
+                    is_private: true
+                }
+            )),
+            "Slot 3 for account C should be a private 2"
+        );
+        assert_eq!(
+            storage_cursor.next_dup().unwrap(),
+            None,
+            "Account C should only have 1 storage slot"
+        );
 
         // Check change set
         let mut changeset_cursor = provider
@@ -547,17 +608,21 @@ mod tests {
             changeset_cursor.seek_exact(BlockNumberAddress((1, address_a))).unwrap(),
             Some((
                 BlockNumberAddress((1, address_a)),
-                StorageEntry { key: B256::ZERO, value: U256::from(0) }
+                StorageEntry { key: B256::ZERO, value: U256::from(0), is_private: false }
             )),
-            "Slot 0 for account A should have changed from 0"
+            "Slot 0 for account A should have changed from a public 0"
         );
         assert_eq!(
             changeset_cursor.next_dup().unwrap(),
             Some((
                 BlockNumberAddress((1, address_a)),
-                StorageEntry { key: B256::from(U256::from(1).to_be_bytes()), value: U256::from(0) }
+                StorageEntry {
+                    key: B256::from(U256::from(1).to_be_bytes()),
+                    value: U256::from(0),
+                    is_private: false
+                }
             )),
-            "Slot 1 for account A should have changed from 0"
+            "Slot 1 for account A should have changed from a public 0"
         );
         assert_eq!(
             changeset_cursor.next_dup().unwrap(),
@@ -569,9 +634,13 @@ mod tests {
             changeset_cursor.seek_exact(BlockNumberAddress((1, address_b))).unwrap(),
             Some((
                 BlockNumberAddress((1, address_b)),
-                StorageEntry { key: B256::from(U256::from(1).to_be_bytes()), value: U256::from(1) }
+                StorageEntry {
+                    key: B256::from(U256::from(1).to_be_bytes()),
+                    value: U256::from(1),
+                    is_private: false
+                }
             )),
-            "Slot 1 for account B should have changed from 1"
+            "Slot 1 for account B should have changed from a public 1"
         );
         assert_eq!(
             changeset_cursor.next_dup().unwrap(),
@@ -579,6 +648,24 @@ mod tests {
             "Account B should only be in the changeset 1 time"
         );
 
+        assert_eq!(
+            changeset_cursor.seek_exact(BlockNumberAddress((1, address_c))).unwrap(),
+            Some((
+                BlockNumberAddress((1, address_c)),
+                StorageEntry {
+                    key: B256::from(U256::from(3).to_be_bytes()),
+                    value: U256::from(1),
+                    is_private: false
+                }
+            )),
+            "Slot 1 for account C should have changed from a public 1"
+        );
+        assert_eq!(
+            changeset_cursor.next_dup().unwrap(),
+            None,
+            "Account C should only be in the changeset 1 time"
+        );
+
         // Delete account A
         let mut state = State::builder().with_bundle_update().build();
         state.insert_account(address_a, RevmAccountInfo::default());
@@ -609,17 +696,21 @@ mod tests {
             changeset_cursor.seek_exact(BlockNumberAddress((2, address_a))).unwrap(),
             Some((
                 BlockNumberAddress((2, address_a)),
-                StorageEntry { key: B256::ZERO, value: U256::from(1) }
+                StorageEntry { key: B256::ZERO, value: U256::from(1), is_private: true }
             )),
-            "Slot 0 for account A should have changed from 1 on deletion"
+            "Slot 0 for account A should have changed from a private 1 on deletion"
         );
         assert_eq!(
             changeset_cursor.next_dup().unwrap(),
             Some((
                 BlockNumberAddress((2, address_a)),
-                StorageEntry { key: B256::from(U256::from(1).to_be_bytes()), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::from(U256::from(1).to_be_bytes()),
+                    value: U256::from(2),
+                    is_private: true
+                }
             )),
-            "Slot 1 for account A should have changed from 2 on deletion"
+            "Slot 1 for account A should have changed from a private 2 on deletion"
         );
         assert_eq!(
             changeset_cursor.next_dup().unwrap(),
@@ -649,11 +740,17 @@ mod tests {
                 storage: HashMap::from_iter([
                     (
                         U256::ZERO,
-                        EvmStorageSlot { present_value: U256::from(1), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(1),
+                            ..Default::default()
+                        },
                     ),
                     (
                         U256::from(1),
-                        EvmStorageSlot { present_value: U256::from(2), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(2),
+                            ..Default::default()
+                        },
                     ),
                 ]),
             },
@@ -670,7 +767,10 @@ mod tests {
         state.insert_account_with_storage(
             address1,
             account_info.clone(),
-            HashMap::from_iter([(U256::ZERO, U256::from(1)), (U256::from(1), U256::from(2))]),
+            HashMap::from_iter([
+                (U256::ZERO, FlaggedStorage::new_from_value(1)),
+                (U256::from(1), FlaggedStorage::new_from_value(2)),
+            ]),
         );
 
         // Block #1: change storage.
@@ -683,8 +783,8 @@ mod tests {
                 storage: HashMap::from_iter([(
                     U256::ZERO,
                     EvmStorageSlot {
-                        original_value: U256::from(1),
-                        present_value: U256::from(2),
+                        original_value: FlaggedStorage::new_from_value(1),
+                        present_value: FlaggedStorage::new_from_value(2),
                         ..Default::default()
                     },
                 )]),
@@ -726,15 +826,24 @@ mod tests {
                 storage: HashMap::from_iter([
                     (
                         U256::ZERO,
-                        EvmStorageSlot { present_value: U256::from(2), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(2),
+                            ..Default::default()
+                        },
                     ),
                     (
                         U256::from(2),
-                        EvmStorageSlot { present_value: U256::from(4), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(4),
+                            ..Default::default()
+                        },
                     ),
                     (
                         U256::from(6),
-                        EvmStorageSlot { present_value: U256::from(6), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(6),
+                            ..Default::default()
+                        },
                     ),
                 ]),
             },
@@ -769,7 +878,10 @@ mod tests {
                 // 0x00 => 0 => 2
                 storage: HashMap::from_iter([(
                     U256::ZERO,
-                    EvmStorageSlot { present_value: U256::from(2), ..Default::default() },
+                    EvmStorageSlot {
+                        present_value: FlaggedStorage::new_from_value(2),
+                        ..Default::default()
+                    },
                 )]),
             },
         )]));
@@ -800,7 +912,10 @@ mod tests {
                 // 0x00 => 0 => 9
                 storage: HashMap::from_iter([(
                     U256::ZERO,
-                    EvmStorageSlot { present_value: U256::from(9), ..Default::default() },
+                    EvmStorageSlot {
+                        present_value: FlaggedStorage::new_from_value(9),
+                        ..Default::default()
+                    },
                 )]),
             },
         )]));
@@ -833,14 +948,14 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((0, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO, is_private: false }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((0, address1)),
-                StorageEntry { key: B256::with_last_byte(1), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(1), value: U256::ZERO, is_private: false }
             )))
         );
 
@@ -850,7 +965,11 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((1, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::from(1) }
+                StorageEntry {
+                    key: B256::with_last_byte(0),
+                    value: U256::from(1),
+                    is_private: false
+                }
             )))
         );
 
@@ -861,14 +980,22 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((2, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::with_last_byte(0),
+                    value: U256::from(2),
+                    is_private: false
+                }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((2, address1)),
-                StorageEntry { key: B256::with_last_byte(1), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::with_last_byte(1),
+                    value: U256::from(2),
+                    is_private: false
+                }
             )))
         );
 
@@ -883,21 +1010,21 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((4, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO, is_private: false }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((4, address1)),
-                StorageEntry { key: B256::with_last_byte(2), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(2), value: U256::ZERO, is_private: false }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((4, address1)),
-                StorageEntry { key: B256::with_last_byte(6), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(6), value: U256::ZERO, is_private: false }
             )))
         );
 
@@ -909,21 +1036,33 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((5, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::with_last_byte(0),
+                    value: U256::from(2),
+                    is_private: false
+                }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((5, address1)),
-                StorageEntry { key: B256::with_last_byte(2), value: U256::from(4) }
+                StorageEntry {
+                    key: B256::with_last_byte(2),
+                    value: U256::from(4),
+                    is_private: false
+                }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((5, address1)),
-                StorageEntry { key: B256::with_last_byte(6), value: U256::from(6) }
+                StorageEntry {
+                    key: B256::with_last_byte(6),
+                    value: U256::from(6),
+                    is_private: false
+                }
             )))
         );
 
@@ -936,7 +1075,7 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((7, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO }
+                StorageEntry { key: B256::with_last_byte(0), value: U256::ZERO, is_private: false }
             )))
         );
         assert_eq!(storage_changes.next(), None);
@@ -963,11 +1102,17 @@ mod tests {
                 storage: HashMap::from_iter([
                     (
                         U256::ZERO,
-                        EvmStorageSlot { present_value: U256::from(1), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(1),
+                            ..Default::default()
+                        },
                     ),
                     (
                         U256::from(1),
-                        EvmStorageSlot { present_value: U256::from(2), ..Default::default() },
+                        EvmStorageSlot {
+                            present_value: FlaggedStorage::new_from_value(2),
+                            ..Default::default()
+                        },
                     ),
                 ]),
             },
@@ -983,7 +1128,10 @@ mod tests {
         state.insert_account_with_storage(
             address1,
             account1.clone(),
-            HashMap::from_iter([(U256::ZERO, U256::from(1)), (U256::from(1), U256::from(2))]),
+            HashMap::from_iter([
+                (U256::ZERO, FlaggedStorage::new_from_value(1)),
+                (U256::from(1), FlaggedStorage::new_from_value(2)),
+            ]),
         );
 
         // Block #1: Destroy, re-create, change storage.
@@ -1013,7 +1161,10 @@ mod tests {
                 // 0x01 => 0 => 5
                 storage: HashMap::from_iter([(
                     U256::from(1),
-                    EvmStorageSlot { present_value: U256::from(5), ..Default::default() },
+                    EvmStorageSlot {
+                        present_value: FlaggedStorage::new_from_value(5),
+                        ..Default::default()
+                    },
                 )]),
             },
         )]));
@@ -1037,14 +1188,22 @@ mod tests {
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((1, address1)),
-                StorageEntry { key: B256::with_last_byte(0), value: U256::from(1) }
+                StorageEntry {
+                    key: B256::with_last_byte(0),
+                    value: U256::from(1),
+                    is_private: false
+                }
             )))
         );
         assert_eq!(
             storage_changes.next(),
             Some(Ok((
                 BlockNumberAddress((1, address1)),
-                StorageEntry { key: B256::with_last_byte(1), value: U256::from(2) }
+                StorageEntry {
+                    key: B256::with_last_byte(1),
+                    value: U256::from(2),
+                    is_private: false
+                }
             )))
         );
         assert_eq!(storage_changes.next(), None);
@@ -1103,7 +1262,7 @@ mod tests {
             for (slot, value) in storage {
                 tx.put::<tables::HashedStorages>(
                     hashed_address,
-                    StorageEntry { key: keccak256(slot), value: *value },
+                    StorageEntry { key: keccak256(slot), value: *value, is_private: false },
                 )
                 .unwrap();
             }
@@ -1156,7 +1315,7 @@ mod tests {
         state.insert_account_with_storage(
             address2,
             account2.0.into(),
-            HashMap::from_iter([(slot2, account2_slot2_old_value)]),
+            HashMap::from_iter([(slot2, FlaggedStorage::new_from_value(account2_slot2_old_value))]),
         );
 
         let account2_slot2_new_value = U256::from(100);
@@ -1168,7 +1327,10 @@ mod tests {
                 info: account2.0.into(),
                 storage: HashMap::from_iter([(
                     slot2,
-                    EvmStorageSlot::new_changed(account2_slot2_old_value, account2_slot2_new_value),
+                    EvmStorageSlot::new_changed(
+                        FlaggedStorage::new_from_value(account2_slot2_old_value),
+                        FlaggedStorage::new_from_value(account2_slot2_new_value),
+                    ),
                 )]),
             },
         )]));
@@ -1236,7 +1398,10 @@ mod tests {
                 info: account1_new.into(),
                 storage: HashMap::from_iter([(
                     slot20,
-                    EvmStorageSlot::new_changed(U256::ZERO, account1_slot20_value),
+                    EvmStorageSlot::new_changed(
+                        FlaggedStorage::ZERO,
+                        FlaggedStorage::new_from_value(account1_slot20_value),
+                    ),
                 )]),
             },
         )]));
@@ -1300,7 +1465,7 @@ mod tests {
                 "51e6784c736ef8548f856909870b38e49ef7a4e3e77e5e945e0d5e6fcaa3037f",
             ]
             .into_iter()
-            .map(|str| (B256::from_str(str).unwrap(), U256::from(1))),
+            .map(|str| (B256::from_str(str).unwrap(), FlaggedStorage::new_from_value(1))),
         );
         let mut state = HashedPostState::default();
         state.storages.insert(hashed_address, init_storage.clone());
@@ -1309,7 +1474,10 @@ mod tests {
         // calculate database storage root and write intermediate storage nodes.
         let (storage_root, _, storage_updates) =
             StorageRoot::from_tx_hashed(tx, hashed_address).calculate(true).unwrap();
-        assert_eq!(storage_root, storage_root_prehashed(init_storage.storage));
+        assert_eq!(
+            storage_root,
+            storage_root_prehashed(FlaggedStorage::collect_value(init_storage.storage))
+        );
         assert!(!storage_updates.is_empty());
         provider_rw
             .write_individual_storage_trie_updates(hashed_address, &storage_updates)
@@ -1323,7 +1491,7 @@ mod tests {
                 "88d233b7380bb1bcdc866f6871c94685848f54cf0ee033b1480310b4ddb75fc9",
             ]
             .into_iter()
-            .map(|str| (B256::from_str(str).unwrap(), U256::from(1))),
+            .map(|str| (B256::from_str(str).unwrap(), FlaggedStorage::new_from_value(1))),
         );
         let mut state = HashedPostState::default();
         state.storages.insert(hashed_address, updated_storage.clone());
@@ -1331,6 +1499,9 @@ mod tests {
 
         // re-calculate database storage root
         let storage_root = StorageRoot::overlay_root(tx, address, updated_storage.clone()).unwrap();
-        assert_eq!(storage_root, storage_root_prehashed(updated_storage.storage));
+        assert_eq!(
+            storage_root,
+            storage_root_prehashed(FlaggedStorage::collect_value(updated_storage.storage))
+        );
     }
 }
diff --git a/crates/storage/storage-api/src/lib.rs b/crates/storage/storage-api/src/lib.rs
index 150d745e3..9a2a5b6f6 100644
--- a/crates/storage/storage-api/src/lib.rs
+++ b/crates/storage/storage-api/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/storage/storage-api/src/noop.rs b/crates/storage/storage-api/src/noop.rs
index e19776c7d..b3064cb21 100644
--- a/crates/storage/storage-api/src/noop.rs
+++ b/crates/storage/storage-api/src/noop.rs
@@ -14,7 +14,7 @@ use alloy_eips::{
 };
 use alloy_primitives::{
     map::{B256HashMap, HashMap},
-    Address, BlockHash, BlockNumber, Bytes, StorageKey, StorageValue, TxHash, TxNumber, B256, U256,
+    Address, BlockHash, BlockNumber, Bytes, StorageKey, TxHash, TxNumber, B256, U256,
 };
 use reth_chainspec::{ChainInfo, ChainSpecProvider, EthChainSpec, MAINNET};
 use reth_db_models::{AccountBeforeTx, StoredBlockBodyIndices};
@@ -29,6 +29,7 @@ use reth_trie::{
     updates::TrieUpdates, AccountProof, HashedPostState, HashedStorage, MultiProof,
     MultiProofTargets, TrieInput,
 };
+use revm::primitives::FlaggedStorage;
 use std::{
     marker::PhantomData,
     ops::{RangeBounds, RangeInclusive},
@@ -461,7 +462,7 @@ impl<C: Send + Sync, N: NodePrimitives> StateProvider for NoopProvider<C, N> {
         &self,
         _account: Address,
         _storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>> {
+    ) -> ProviderResult<Option<FlaggedStorage>> {
         Ok(None)
     }
 
diff --git a/crates/storage/storage-api/src/state.rs b/crates/storage/storage-api/src/state.rs
index dc53319f4..a81a94fec 100644
--- a/crates/storage/storage-api/src/state.rs
+++ b/crates/storage/storage-api/src/state.rs
@@ -4,13 +4,13 @@ use super::{
 };
 use alloy_consensus::constants::KECCAK_EMPTY;
 use alloy_eips::{BlockId, BlockNumberOrTag};
-use alloy_primitives::{Address, BlockHash, BlockNumber, StorageKey, StorageValue, B256, U256};
+use alloy_primitives::{Address, BlockHash, BlockNumber, StorageKey, B256, U256};
 use auto_impl::auto_impl;
 use reth_primitives::Bytecode;
 use reth_storage_errors::provider::ProviderResult;
 use reth_trie::HashedPostState;
 use reth_trie_db::StateCommitment;
-use revm::db::states::BundleState;
+use revm::{db::states::BundleState, primitives::FlaggedStorage};
 
 /// Type alias of boxed [`StateProvider`].
 pub type StateProviderBox = Box<dyn StateProvider>;
@@ -32,7 +32,7 @@ pub trait StateProvider:
         &self,
         account: Address,
         storage_key: StorageKey,
-    ) -> ProviderResult<Option<StorageValue>>;
+    ) -> ProviderResult<Option<FlaggedStorage>>;
 
     /// Get account code by its hash
     fn bytecode_by_hash(&self, code_hash: B256) -> ProviderResult<Option<Bytecode>>;
diff --git a/crates/storage/zstd-compressors/src/lib.rs b/crates/storage/zstd-compressors/src/lib.rs
index d5167120b..0529df02e 100644
--- a/crates/storage/zstd-compressors/src/lib.rs
+++ b/crates/storage/zstd-compressors/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/tasks/src/lib.rs b/crates/tasks/src/lib.rs
index 340e925ec..94b9f32b2 100644
--- a/crates/tasks/src/lib.rs
+++ b/crates/tasks/src/lib.rs
@@ -7,7 +7,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/tokio-util/src/lib.rs b/crates/tokio-util/src/lib.rs
index e476c4063..a739ba694 100644
--- a/crates/tokio-util/src/lib.rs
+++ b/crates/tokio-util/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/tracing/src/lib.rs b/crates/tracing/src/lib.rs
index 6c855e50d..886068e0b 100644
--- a/crates/tracing/src/lib.rs
+++ b/crates/tracing/src/lib.rs
@@ -38,7 +38,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/transaction-pool/Cargo.toml b/crates/transaction-pool/Cargo.toml
index f25860599..d83891ff5 100644
--- a/crates/transaction-pool/Cargo.toml
+++ b/crates/transaction-pool/Cargo.toml
@@ -25,6 +25,7 @@ reth-storage-api.workspace = true
 reth-tasks.workspace = true
 revm-primitives.workspace = true
 revm-interpreter.workspace = true
+reth-tracing.workspace = true
 
 # ethereum
 alloy-eips = { workspace = true, features = ["kzg"] }
diff --git a/crates/transaction-pool/src/lib.rs b/crates/transaction-pool/src/lib.rs
index 0e069291e..9ff8bbdbc 100644
--- a/crates/transaction-pool/src/lib.rs
+++ b/crates/transaction-pool/src/lib.rs
@@ -145,7 +145,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
@@ -158,6 +158,7 @@ use reth_eth_wire_types::HandleMempoolData;
 use reth_execution_types::ChangedAccount;
 use reth_primitives::RecoveredTx;
 use reth_storage_api::StateProviderFactory;
+use reth_tracing::tracing::debug;
 use std::{collections::HashSet, sync::Arc};
 use tokio::sync::mpsc::Receiver;
 use tracing::{instrument, trace};
@@ -354,6 +355,7 @@ where
     ) -> PoolResult<TxHash> {
         let (_, tx) = self.validate(origin, transaction).await;
         let mut results = self.pool.add_transactions(origin, std::iter::once(tx));
+        debug!(target: "txpool", "add_transaction result: {:?}", results);
         results.pop().expect("result length is the same as the input")
     }
 
diff --git a/crates/transaction-pool/src/pool/txpool.rs b/crates/transaction-pool/src/pool/txpool.rs
index a0a1f6a36..bb598104a 100644
--- a/crates/transaction-pool/src/pool/txpool.rs
+++ b/crates/transaction-pool/src/pool/txpool.rs
@@ -36,7 +36,7 @@ use std::{
     ops::Bound::{Excluded, Unbounded},
     sync::Arc,
 };
-use tracing::trace;
+use tracing::{debug, trace};
 
 #[cfg_attr(doc, aquamarine::aquamarine)]
 // TODO: Inlined diagram due to a bug in aquamarine library, should become an include when it's
@@ -922,7 +922,7 @@ impl<T: TransactionOrdering> TxPool<T> {
         // We trace here instead of in structs directly, because the `ParkedPool` type is
         // generic and it would not be possible to distinguish whether a transaction is being
         // added to the `BaseFee` pool, or the `Queued` pool.
-        trace!(target: "txpool", hash=%tx.transaction.hash(), ?pool, "Adding transaction to a subpool");
+        debug!(target: "txpool", hash=%tx.transaction.hash(), ?pool, "Adding transaction to a subpool");
         match pool {
             SubPool::Queued => self.queued_pool.add_transaction(tx),
             SubPool::Pending => {
@@ -1796,7 +1796,8 @@ impl<T: PoolTransaction> AllTransactions<T> {
 
         self.update_size_metrics();
 
-        Ok(InsertOk { transaction, move_to: state.into(), state, replaced_tx, updates })
+        let res = Ok(InsertOk { transaction, move_to: state.into(), state, replaced_tx, updates });
+        res
     }
 
     /// Number of transactions in the entire pool
diff --git a/crates/transaction-pool/src/test_utils/mock.rs b/crates/transaction-pool/src/test_utils/mock.rs
index d174c7b16..c2479d04c 100644
--- a/crates/transaction-pool/src/test_utils/mock.rs
+++ b/crates/transaction-pool/src/test_utils/mock.rs
@@ -9,6 +9,7 @@ use crate::{
 };
 use alloy_consensus::{
     constants::{EIP1559_TX_TYPE_ID, EIP2930_TX_TYPE_ID, EIP4844_TX_TYPE_ID, LEGACY_TX_TYPE_ID},
+    transaction::TxSeismicElements,
     TxEip1559, TxEip2930, TxEip4844, TxLegacy,
 };
 use alloy_eips::{
@@ -773,6 +774,10 @@ impl PoolTransaction for MockTransaction {
             Self::Eip2930 { chain_id, .. } => Some(*chain_id),
         }
     }
+
+    fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        None
+    }
 }
 
 impl EthPoolTransaction for MockTransaction {
diff --git a/crates/transaction-pool/src/traits.rs b/crates/transaction-pool/src/traits.rs
index 4811e9783..924e0600d 100644
--- a/crates/transaction-pool/src/traits.rs
+++ b/crates/transaction-pool/src/traits.rs
@@ -7,6 +7,7 @@ use crate::{
 };
 use alloy_consensus::{
     constants::{EIP1559_TX_TYPE_ID, EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID},
+    transaction::TxSeismicElements,
     Transaction as _, Typed2718,
 };
 use alloy_eips::{
@@ -1131,6 +1132,9 @@ pub trait PoolTransaction:
             Ok(())
         }
     }
+
+    /// Returns the seismic elements of the transaction (Seismic)
+    fn seismic_elements(&self) -> Option<&TxSeismicElements>;
 }
 
 /// Super trait for transactions that can be converted to and from Eth transactions intended for the
@@ -1382,6 +1386,11 @@ impl PoolTransaction for EthPooledTransaction {
     fn chain_id(&self) -> Option<u64> {
         self.transaction.chain_id()
     }
+
+    /// Returns the seismic elements of the transaction (Seismic)
+    fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        self.transaction.seismic_elements()
+    }
 }
 
 impl EthPoolTransaction for EthPooledTransaction {
diff --git a/crates/transaction-pool/src/validate/eth.rs b/crates/transaction-pool/src/validate/eth.rs
index 3c93b384c..7aae4645e 100644
--- a/crates/transaction-pool/src/validate/eth.rs
+++ b/crates/transaction-pool/src/validate/eth.rs
@@ -14,7 +14,7 @@ use crate::{
 use alloy_consensus::{
     constants::{
         EIP1559_TX_TYPE_ID, EIP2930_TX_TYPE_ID, EIP4844_TX_TYPE_ID, EIP7702_TX_TYPE_ID,
-        LEGACY_TX_TYPE_ID,
+        LEGACY_TX_TYPE_ID, SEISMIC_TX_TYPE_ID,
     },
     BlockHeader,
 };
@@ -45,8 +45,8 @@ pub struct EthTransactionValidator<Client, T> {
 
 impl<Client, Tx> EthTransactionValidator<Client, Tx> {
     /// Returns the configured chain spec
-    pub fn chain_spec(&self) -> Arc<ChainSpec> {
-        self.inner.chain_spec.clone()
+    pub fn chain_spec(&self) -> &Arc<ChainSpec> {
+        &self.inner.chain_spec
     }
 
     /// Returns the configured client
@@ -219,6 +219,10 @@ where
                 }
             }
 
+            SEISMIC_TX_TYPE_ID => {
+                // Accept Seismic transactions.
+            }
+
             _ => {
                 return TransactionValidationOutcome::Invalid(
                     transaction,
diff --git a/crates/transaction-pool/src/validate/mod.rs b/crates/transaction-pool/src/validate/mod.rs
index 40f2deeaf..715b429e5 100644
--- a/crates/transaction-pool/src/validate/mod.rs
+++ b/crates/transaction-pool/src/validate/mod.rs
@@ -6,6 +6,7 @@ use crate::{
     traits::{PoolTransaction, TransactionOrigin},
     PriceBumpConfig,
 };
+use alloy_consensus::transaction::TxSeismicElements;
 use alloy_eips::eip4844::BlobTransactionSidecar;
 use alloy_primitives::{Address, TxHash, B256, U256};
 use futures_util::future::Either;
@@ -148,6 +149,11 @@ impl<T: PoolTransaction> ValidTransaction<T> {
     pub fn nonce(&self) -> u64 {
         self.transaction().nonce()
     }
+
+    /// Returns the encryption pubkey of the transaction (Seismic)
+    pub fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        self.transaction().seismic_elements()
+    }
 }
 
 /// Provides support for validating transaction at any given state of the chain
@@ -437,6 +443,11 @@ impl<T: PoolTransaction> ValidPoolTransaction<T> {
 
         false
     }
+
+    /// Returns the seismic elements of the transaction (Seismic)
+    pub fn seismic_elements(&self) -> Option<&TxSeismicElements> {
+        self.transaction.seismic_elements()
+    }
 }
 
 #[cfg(test)]
diff --git a/crates/trie/common/src/account.rs b/crates/trie/common/src/account.rs
index 60dc44d4e..9c2a42334 100644
--- a/crates/trie/common/src/account.rs
+++ b/crates/trie/common/src/account.rs
@@ -5,7 +5,7 @@ use alloy_primitives::{keccak256, B256, U256};
 use alloy_rlp::{RlpDecodable, RlpEncodable};
 use alloy_trie::EMPTY_ROOT_HASH;
 use reth_primitives_traits::Account;
-use revm_primitives::AccountInfo;
+use revm_primitives::{AccountInfo, FlaggedStorage};
 
 /// An Ethereum account as represented in the trie.
 #[derive(Clone, Copy, Debug, PartialEq, Eq, Default, RlpEncodable, RlpDecodable)]
@@ -33,10 +33,11 @@ impl From<GenesisAccount> for TrieAccount {
             .storage
             .map(|storage| {
                 storage_root_unhashed(
-                    storage
-                        .into_iter()
-                        .filter(|(_, value)| !value.is_zero())
-                        .map(|(slot, value)| (slot, U256::from_be_bytes(*value))),
+                    storage.into_iter().filter(|(_, value)| !value.is_zero()).map(
+                        |(slot, value)| {
+                            (slot, FlaggedStorage::new_from_value(U256::from_be_bytes(*value)))
+                        },
+                    ),
                 )
             })
             .unwrap_or(EMPTY_ROOT_HASH);
@@ -117,7 +118,7 @@ mod tests {
 
         let expected_storage_root = storage_root_unhashed(BTreeMap::from([(
             B256::from([0x01; 32]),
-            U256::from_be_bytes(*B256::from([0x02; 32])),
+            FlaggedStorage::from(U256::from_be_bytes(*B256::from([0x02; 32]))),
         )]));
 
         // Check that the fields are properly set.
diff --git a/crates/trie/common/src/lib.rs b/crates/trie/common/src/lib.rs
index 6647de678..3795a8dd9 100644
--- a/crates/trie/common/src/lib.rs
+++ b/crates/trie/common/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
diff --git a/crates/trie/common/src/proofs.rs b/crates/trie/common/src/proofs.rs
index eb3626d90..8455d1e8a 100644
--- a/crates/trie/common/src/proofs.rs
+++ b/crates/trie/common/src/proofs.rs
@@ -13,11 +13,29 @@ use alloy_trie::{
     proof::{verify_proof, ProofNodes, ProofVerificationError},
     TrieMask, EMPTY_ROOT_HASH,
 };
+use derive_more::derive::{Deref, DerefMut, From, Into, IntoIterator};
 use itertools::Itertools;
 use reth_primitives_traits::Account;
 
 /// Proof targets map.
-pub type MultiProofTargets = B256HashMap<B256HashSet>;
+#[derive(Debug, Default, Clone, Deref, DerefMut, From, Into, IntoIterator)]
+pub struct MultiProofTargets(B256HashMap<B256HashSet>);
+
+impl MultiProofTargets {
+    /// Extends the proof targets map with another one.
+    pub fn extend(&mut self, other: Self) {
+        for (address, slots) in other.0 {
+            self.0.entry(address).or_default().extend(slots);
+        }
+    }
+
+    /// Extends the proof targets map with another one by reference.
+    pub fn extend_ref(&mut self, other: &Self) {
+        for (address, slots) in &other.0 {
+            self.0.entry(*address).or_default().extend(slots);
+        }
+    }
+}
 
 /// The state multiproof of target accounts and multiproofs of their storage tries.
 /// Multiproof is effectively a state subtrie that only contains the nodes
diff --git a/crates/trie/common/src/root.rs b/crates/trie/common/src/root.rs
index 982dec988..43869219e 100644
--- a/crates/trie/common/src/root.rs
+++ b/crates/trie/common/src/root.rs
@@ -1,11 +1,12 @@
 //! Common root computation functions.
 
 use crate::TrieAccount;
-use alloy_primitives::{keccak256, Address, B256, U256};
+use alloy_primitives::{keccak256, Address, B256};
 use alloy_rlp::Encodable;
 use alloy_trie::HashBuilder;
 use itertools::Itertools;
 use nybbles::Nibbles;
+use revm_primitives::FlaggedStorage;
 
 /// Hashes and sorts account keys, then proceeds to calculating the root hash of the state
 /// represented as MPT.
@@ -55,14 +56,14 @@ pub fn state_root<A: Into<TrieAccount>>(state: impl IntoIterator<Item = (B256, A
 
 /// Hashes storage keys, sorts them and them calculates the root hash of the storage trie.
 /// See [`storage_root_unsorted`] for more info.
-pub fn storage_root_unhashed(storage: impl IntoIterator<Item = (B256, U256)>) -> B256 {
+pub fn storage_root_unhashed(storage: impl IntoIterator<Item = (B256, FlaggedStorage)>) -> B256 {
     storage_root_unsorted(storage.into_iter().map(|(slot, value)| (keccak256(slot), value)))
 }
 
 /// Sorts and calculates the root hash of account storage trie.
 /// See [`storage_root`] for more info.
-pub fn storage_root_unsorted(storage: impl IntoIterator<Item = (B256, U256)>) -> B256 {
-    storage_root(storage.into_iter().sorted_unstable_by_key(|(key, _)| *key))
+pub fn storage_root_unsorted(storage: impl IntoIterator<Item = (B256, FlaggedStorage)>) -> B256 {
+    storage_root(storage.into_iter().sorted_by_key(|(key, _)| *key))
 }
 
 /// Calculates the root hash of account storage trie.
@@ -70,10 +71,13 @@ pub fn storage_root_unsorted(storage: impl IntoIterator<Item = (B256, U256)>) ->
 /// # Panics
 ///
 /// If the items are not in sorted order.
-pub fn storage_root(storage: impl IntoIterator<Item = (B256, U256)>) -> B256 {
+pub fn storage_root(storage: impl IntoIterator<Item = (B256, FlaggedStorage)>) -> B256 {
     let mut hb = HashBuilder::default();
     for (hashed_slot, value) in storage {
-        hb.add_leaf(Nibbles::unpack(hashed_slot), alloy_rlp::encode_fixed_size(&value).as_ref());
+        hb.add_leaf(
+            Nibbles::unpack(hashed_slot),
+            alloy_rlp::encode_fixed_size(&value.value).as_ref(),
+        );
     }
     hb.root()
 }
diff --git a/crates/trie/db/Cargo.toml b/crates/trie/db/Cargo.toml
index 2fbdf1d57..c6700848b 100644
--- a/crates/trie/db/Cargo.toml
+++ b/crates/trie/db/Cargo.toml
@@ -52,6 +52,8 @@ reth-storage-errors.workspace = true
 reth-trie-common = { workspace = true, features = ["test-utils", "arbitrary"] }
 reth-trie = { workspace = true, features = ["test-utils"] }
 
+revm-primitives.workspace = true
+
 alloy-consensus.workspace = true
 
 # trie
diff --git a/crates/trie/db/src/hashed_cursor.rs b/crates/trie/db/src/hashed_cursor.rs
index 6d0b79e5a..e010bfb45 100644
--- a/crates/trie/db/src/hashed_cursor.rs
+++ b/crates/trie/db/src/hashed_cursor.rs
@@ -1,4 +1,4 @@
-use alloy_primitives::{B256, U256};
+use alloy_primitives::B256;
 use reth_db::tables;
 use reth_db_api::{
     cursor::{DbCursorRO, DbDupCursorRO},
@@ -6,6 +6,7 @@ use reth_db_api::{
 };
 use reth_primitives::Account;
 use reth_trie::hashed_cursor::{HashedCursor, HashedCursorFactory, HashedStorageCursor};
+use revm::primitives::FlaggedStorage;
 
 /// A struct wrapping database transaction that implements [`HashedCursorFactory`].
 #[derive(Debug)]
@@ -93,17 +94,17 @@ impl<C> HashedCursor for DatabaseHashedStorageCursor<C>
 where
     C: DbCursorRO<tables::HashedStorages> + DbDupCursorRO<tables::HashedStorages>,
 {
-    type Value = U256;
+    type Value = FlaggedStorage;
 
     fn seek(
         &mut self,
         subkey: B256,
     ) -> Result<Option<(B256, Self::Value)>, reth_db::DatabaseError> {
-        Ok(self.cursor.seek_by_key_subkey(self.hashed_address, subkey)?.map(|e| (e.key, e.value)))
+        Ok(self.cursor.seek_by_key_subkey(self.hashed_address, subkey)?.map(|e| (e.key, e.into())))
     }
 
     fn next(&mut self) -> Result<Option<(B256, Self::Value)>, reth_db::DatabaseError> {
-        Ok(self.cursor.next_dup_val()?.map(|e| (e.key, e.value)))
+        Ok(self.cursor.next_dup_val()?.map(|e| (e.key, e.into())))
     }
 }
 
diff --git a/crates/trie/db/src/proof.rs b/crates/trie/db/src/proof.rs
index d7263a943..137e661b0 100644
--- a/crates/trie/db/src/proof.rs
+++ b/crates/trie/db/src/proof.rs
@@ -1,16 +1,13 @@
 use crate::{DatabaseHashedCursorFactory, DatabaseTrieCursorFactory};
-use alloy_primitives::{
-    keccak256,
-    map::{B256HashMap, B256HashSet, HashMap},
-    Address, B256,
-};
+use alloy_primitives::{keccak256, map::HashMap, Address, B256};
 use reth_db_api::transaction::DbTx;
 use reth_execution_errors::StateProofError;
 use reth_trie::{
     hashed_cursor::HashedPostStateCursorFactory,
     proof::{Proof, StorageProof},
     trie_cursor::InMemoryTrieCursorFactory,
-    AccountProof, HashedPostStateSorted, HashedStorage, MultiProof, StorageMultiProof, TrieInput,
+    AccountProof, HashedPostStateSorted, HashedStorage, MultiProof, MultiProofTargets,
+    StorageMultiProof, TrieInput,
 };
 
 /// Extends [`Proof`] with operations specific for working with a database transaction.
@@ -30,7 +27,7 @@ pub trait DatabaseProof<'a, TX> {
     fn overlay_multiproof(
         tx: &'a TX,
         input: TrieInput,
-        targets: B256HashMap<B256HashSet>,
+        targets: MultiProofTargets,
     ) -> Result<MultiProof, StateProofError>;
 }
 
@@ -66,7 +63,7 @@ impl<'a, TX: DbTx> DatabaseProof<'a, TX>
     fn overlay_multiproof(
         tx: &'a TX,
         input: TrieInput,
-        targets: B256HashMap<B256HashSet>,
+        targets: MultiProofTargets,
     ) -> Result<MultiProof, StateProofError> {
         let nodes_sorted = input.nodes.into_sorted();
         let state_sorted = input.state.into_sorted();
diff --git a/crates/trie/db/src/state.rs b/crates/trie/db/src/state.rs
index 992335896..a8358fb95 100644
--- a/crates/trie/db/src/state.rs
+++ b/crates/trie/db/src/state.rs
@@ -1,7 +1,7 @@
 use crate::{DatabaseHashedCursorFactory, DatabaseTrieCursorFactory, PrefixSetLoader};
 use alloy_primitives::{
     map::{AddressHashMap, B256HashMap},
-    Address, BlockNumber, B256, U256,
+    Address, BlockNumber, B256,
 };
 use reth_db::tables;
 use reth_db_api::{
@@ -16,6 +16,7 @@ use reth_trie::{
     updates::TrieUpdates, HashedPostState, HashedStorage, KeccakKeyHasher, KeyHasher, StateRoot,
     StateRootProgress, TrieInput,
 };
+use revm::primitives::FlaggedStorage;
 use std::{collections::HashMap, ops::RangeInclusive};
 use tracing::debug;
 
@@ -230,14 +231,14 @@ impl<TX: DbTx> DatabaseHashedPostState<TX> for HashedPostState {
         }
 
         // Iterate over storage changesets and record value before first occurring storage change.
-        let mut storages = AddressHashMap::<B256HashMap<U256>>::default();
+        let mut storages = AddressHashMap::<B256HashMap<FlaggedStorage>>::default();
         let mut storage_changesets_cursor = tx.cursor_read::<tables::StorageChangeSets>()?;
         for entry in
             storage_changesets_cursor.walk_range(BlockNumberAddress((from, Address::ZERO))..)?
         {
             let (BlockNumberAddress((_, address)), storage) = entry?;
             let account_storage = storages.entry(address).or_default();
-            account_storage.entry(storage.key).or_insert(storage.value);
+            account_storage.entry(storage.key).or_insert(storage.into());
         }
 
         let hashed_accounts =
@@ -285,8 +286,20 @@ mod tests {
         let bundle_state = BundleState::builder(2..=2)
             .state_present_account_info(address1, account1)
             .state_present_account_info(address2, account2)
-            .state_storage(address1, HashMap::from_iter([(slot1, (U256::ZERO, U256::from(10)))]))
-            .state_storage(address2, HashMap::from_iter([(slot2, (U256::ZERO, U256::from(20)))]))
+            .state_storage(
+                address1,
+                HashMap::from_iter([(
+                    slot1,
+                    (FlaggedStorage::ZERO, FlaggedStorage::new_from_value(10)),
+                )]),
+            )
+            .state_storage(
+                address2,
+                HashMap::from_iter([(
+                    slot2,
+                    (FlaggedStorage::ZERO, FlaggedStorage::new_from_value(20)),
+                )]),
+            )
             .build();
         assert_eq!(bundle_state.reverts.len(), 1);
 
diff --git a/crates/trie/db/src/storage.rs b/crates/trie/db/src/storage.rs
index 3e40b298f..00d6294d7 100644
--- a/crates/trie/db/src/storage.rs
+++ b/crates/trie/db/src/storage.rs
@@ -89,7 +89,7 @@ impl<TX: DbTx> DatabaseHashedStorage<TX> for HashedStorage {
             if storage_address == address {
                 let hashed_slot = keccak256(storage_change.key);
                 if let hash_map::Entry::Vacant(entry) = storage.storage.entry(hashed_slot) {
-                    entry.insert(storage_change.value);
+                    entry.insert(storage_change.into());
                 }
             }
         }
diff --git a/crates/trie/db/tests/fuzz_in_memory_nodes.rs b/crates/trie/db/tests/fuzz_in_memory_nodes.rs
index e293b0caa..db3d679b1 100644
--- a/crates/trie/db/tests/fuzz_in_memory_nodes.rs
+++ b/crates/trie/db/tests/fuzz_in_memory_nodes.rs
@@ -16,6 +16,7 @@ use reth_trie::{
     HashedPostState, HashedStorage, StateRoot, StorageRoot,
 };
 use reth_trie_db::{DatabaseStateRoot, DatabaseStorageRoot, DatabaseTrieCursorFactory};
+use revm_primitives::FlaggedStorage;
 use std::collections::BTreeMap;
 
 proptest! {
@@ -85,7 +86,7 @@ proptest! {
         // Insert init state into database
         for (hashed_slot, value) in init_storage.clone() {
             hashed_storage_cursor
-                .upsert(hashed_address, StorageEntry { key: hashed_slot, value })
+                .upsert(hashed_address, StorageEntry { key: hashed_slot, value, is_private: false })
                 .unwrap();
         }
 
@@ -102,9 +103,9 @@ proptest! {
             let mut hashed_storage = HashedStorage::new(is_deleted);
             for (hashed_slot, value) in storage_update.clone() {
                 hashed_storage_cursor
-                    .upsert(hashed_address, StorageEntry { key: hashed_slot, value })
+                    .upsert(hashed_address, StorageEntry { key: hashed_slot, value: value, is_private: false })
                     .unwrap();
-                hashed_storage.storage.insert(hashed_slot, value);
+                hashed_storage.storage.insert(hashed_slot, FlaggedStorage::new_from_value(value));
             }
 
             // Compute root with in-memory trie nodes overlay
diff --git a/crates/trie/db/tests/post_state.rs b/crates/trie/db/tests/post_state.rs
index ce6f10d76..0ecdd718f 100644
--- a/crates/trie/db/tests/post_state.rs
+++ b/crates/trie/db/tests/post_state.rs
@@ -13,6 +13,7 @@ use reth_trie::{
     HashedPostState, HashedStorage,
 };
 use reth_trie_db::DatabaseHashedCursorFactory;
+use revm_primitives::FlaggedStorage;
 use std::collections::BTreeMap;
 
 fn assert_account_cursor_order(
@@ -34,7 +35,7 @@ fn assert_account_cursor_order(
 
 fn assert_storage_cursor_order(
     factory: &impl HashedCursorFactory,
-    expected: impl Iterator<Item = (B256, BTreeMap<B256, U256>)>,
+    expected: impl Iterator<Item = (B256, BTreeMap<B256, FlaggedStorage>)>,
 ) {
     for (account, storage) in expected {
         let mut cursor = factory.hashed_storage_cursor(account).unwrap();
@@ -228,8 +229,11 @@ fn storage_is_empty() {
     db.update(|tx| {
         for (slot, value) in &db_storage {
             // insert zero value accounts to the database
-            tx.put::<tables::HashedStorages>(address, StorageEntry { key: *slot, value: *value })
-                .unwrap();
+            tx.put::<tables::HashedStorages>(
+                address,
+                StorageEntry { key: *slot, value: *value, is_private: false },
+            )
+            .unwrap();
         }
     })
     .unwrap();
@@ -264,7 +268,7 @@ fn storage_is_empty() {
     {
         let wiped = true;
         let mut hashed_storage = HashedStorage::new(wiped);
-        hashed_storage.storage.insert(B256::random(), U256::ZERO);
+        hashed_storage.storage.insert(B256::random(), FlaggedStorage::ZERO);
 
         let mut hashed_post_state = HashedPostState::default();
         hashed_post_state.storages.insert(address, hashed_storage);
@@ -281,7 +285,7 @@ fn storage_is_empty() {
     {
         let wiped = true;
         let mut hashed_storage = HashedStorage::new(wiped);
-        hashed_storage.storage.insert(B256::random(), U256::from(1));
+        hashed_storage.storage.insert(B256::random(), FlaggedStorage::new_from_value(1));
 
         let mut hashed_post_state = HashedPostState::default();
         hashed_post_state.storages.insert(address, hashed_storage);
@@ -298,18 +302,22 @@ fn storage_is_empty() {
 #[test]
 fn storage_cursor_correct_order() {
     let address = B256::random();
-    let db_storage =
-        (1..11).map(|key| (B256::with_last_byte(key), U256::from(key))).collect::<BTreeMap<_, _>>();
+    let db_storage = (1..11)
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
+        .collect::<BTreeMap<_, _>>();
     let post_state_storage = (11..21)
-        .map(|key| (B256::with_last_byte(key), U256::from(key)))
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
         .collect::<BTreeMap<_, _>>();
 
     let db = create_test_rw_db();
     db.update(|tx| {
         for (slot, value) in &db_storage {
             // insert zero value accounts to the database
-            tx.put::<tables::HashedStorages>(address, StorageEntry { key: *slot, value: *value })
-                .unwrap();
+            tx.put::<tables::HashedStorages>(
+                address,
+                StorageEntry { key: *slot, value: value.value, is_private: value.is_private },
+            )
+            .unwrap();
         }
     })
     .unwrap();
@@ -334,11 +342,19 @@ fn storage_cursor_correct_order() {
 #[test]
 fn zero_value_storage_entries_are_discarded() {
     let address = B256::random();
-    let db_storage =
-        (0..10).map(|key| (B256::with_last_byte(key), U256::from(key))).collect::<BTreeMap<_, _>>(); // every even number is changed to zero value
+    let db_storage = (0..10)
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
+        .collect::<BTreeMap<_, _>>(); // every even number is changed to zero value
     let post_state_storage = (0..10)
         .map(|key| {
-            (B256::with_last_byte(key), if key % 2 == 0 { U256::ZERO } else { U256::from(key) })
+            (
+                B256::with_last_byte(key),
+                if key % 2 == 0 {
+                    FlaggedStorage::ZERO
+                } else {
+                    FlaggedStorage::new_from_value(key)
+                },
+            )
         })
         .collect::<BTreeMap<_, _>>();
 
@@ -346,7 +362,11 @@ fn zero_value_storage_entries_are_discarded() {
     db.update(|tx| {
         for (slot, value) in db_storage {
             // insert zero value accounts to the database
-            tx.put::<tables::HashedStorages>(address, StorageEntry { key: slot, value }).unwrap();
+            tx.put::<tables::HashedStorages>(
+                address,
+                StorageEntry { key: slot, value: value.value, is_private: value.is_private },
+            )
+            .unwrap();
         }
     })
     .unwrap();
@@ -365,7 +385,7 @@ fn zero_value_storage_entries_are_discarded() {
     let factory = HashedPostStateCursorFactory::new(DatabaseHashedCursorFactory::new(&tx), &sorted);
     let expected = std::iter::once((
         address,
-        post_state_storage.into_iter().filter(|(_, value)| *value > U256::ZERO).collect(),
+        post_state_storage.into_iter().filter(|(_, value)| value.value > U256::ZERO).collect(),
     ));
     assert_storage_cursor_order(&factory, expected);
 }
@@ -373,17 +393,22 @@ fn zero_value_storage_entries_are_discarded() {
 #[test]
 fn wiped_storage_is_discarded() {
     let address = B256::random();
-    let db_storage =
-        (1..11).map(|key| (B256::with_last_byte(key), U256::from(key))).collect::<BTreeMap<_, _>>();
+    let db_storage = (1..11)
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
+        .collect::<BTreeMap<_, _>>();
     let post_state_storage = (11..21)
-        .map(|key| (B256::with_last_byte(key), U256::from(key)))
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
         .collect::<BTreeMap<_, _>>();
 
     let db = create_test_rw_db();
     db.update(|tx| {
         for (slot, value) in db_storage {
             // insert zero value accounts to the database
-            tx.put::<tables::HashedStorages>(address, StorageEntry { key: slot, value }).unwrap();
+            tx.put::<tables::HashedStorages>(
+                address,
+                StorageEntry { key: slot, value: value.value, is_private: value.is_private },
+            )
+            .unwrap();
         }
     })
     .unwrap();
@@ -407,8 +432,9 @@ fn wiped_storage_is_discarded() {
 #[test]
 fn post_state_storages_take_precedence() {
     let address = B256::random();
-    let storage =
-        (1..10).map(|key| (B256::with_last_byte(key), U256::from(key))).collect::<BTreeMap<_, _>>();
+    let storage = (1..10)
+        .map(|key| (B256::with_last_byte(key), FlaggedStorage::new_from_value(key)))
+        .collect::<BTreeMap<_, _>>();
 
     let db = create_test_rw_db();
     db.update(|tx| {
@@ -416,7 +442,7 @@ fn post_state_storages_take_precedence() {
             // insert zero value accounts to the database
             tx.put::<tables::HashedStorages>(
                 address,
-                StorageEntry { key: *slot, value: U256::ZERO },
+                StorageEntry { key: *slot, value: U256::ZERO, is_private: false },
             )
             .unwrap();
         }
@@ -443,15 +469,15 @@ fn post_state_storages_take_precedence() {
 fn fuzz_hashed_storage_cursor() {
     proptest!(ProptestConfig::with_cases(10),
         |(
-            db_storages: BTreeMap<B256, BTreeMap<B256, U256>>,
-            post_state_storages: BTreeMap<B256, (bool, BTreeMap<B256, U256>)>
+            db_storages: BTreeMap<B256, BTreeMap<B256, FlaggedStorage>>,
+            post_state_storages: BTreeMap<B256, (bool, BTreeMap<B256, FlaggedStorage>)>
         )|
     {
         let db = create_test_rw_db();
         db.update(|tx| {
             for (address, storage) in &db_storages {
                 for (slot, value) in storage {
-                    let entry = StorageEntry { key: *slot, value: *value };
+                    let entry = StorageEntry { key: *slot, value: value.value, is_private: value.is_private };
                     tx.put::<tables::HashedStorages>(*address, entry).unwrap();
                 }
             }
diff --git a/crates/trie/db/tests/trie.rs b/crates/trie/db/tests/trie.rs
index 4c614d83b..eee9a3bc9 100644
--- a/crates/trie/db/tests/trie.rs
+++ b/crates/trie/db/tests/trie.rs
@@ -41,7 +41,7 @@ fn insert_storage(tx: &impl DbTxMut, hashed_address: B256, storage: &BTreeMap<B2
     for (k, v) in storage {
         tx.put::<tables::HashedStorages>(
             hashed_address,
-            StorageEntry { key: keccak256(k), value: *v },
+            StorageEntry { key: keccak256(k), value: *v, is_private: false },
         )
         .unwrap();
     }
@@ -57,7 +57,9 @@ fn incremental_vs_full_root(inputs: &[&str], modified: &str) {
     let data = inputs.iter().map(|x| B256::from_str(x).unwrap());
     let value = U256::from(0);
     for key in data {
-        hashed_storage_cursor.upsert(hashed_address, StorageEntry { key, value }).unwrap();
+        hashed_storage_cursor
+            .upsert(hashed_address, StorageEntry { key, value, is_private: false })
+            .unwrap();
     }
 
     // Generate the intermediate nodes on the receiving end of the channel
@@ -71,7 +73,7 @@ fn incremental_vs_full_root(inputs: &[&str], modified: &str) {
         hashed_storage_cursor.delete_current().unwrap();
     }
     hashed_storage_cursor
-        .upsert(hashed_address, StorageEntry { key: modified_key, value })
+        .upsert(hashed_address, StorageEntry { key: modified_key, value, is_private: false })
         .unwrap();
 
     // 2. Calculate full merkle root
@@ -108,8 +110,7 @@ fn branch_node_child_changes() {
 
 #[test]
 fn arbitrary_storage_root() {
-    proptest!(ProptestConfig::with_cases(10), |(item in arb::<(Address, std::collections::BTreeMap<B256, U256>)>())| {
-        let (address, storage) = item;
+    proptest!(ProptestConfig::with_cases(10), |(item in arb::<(Address, std::collections::BTreeMap<B256, U256>)>())| { let (address, storage) = item;
 
         let hashed_address = keccak256(address);
         let factory = create_test_provider_factory();
@@ -117,7 +118,7 @@ fn arbitrary_storage_root() {
         for (key, value) in &storage {
             tx.tx_ref().put::<tables::HashedStorages>(
                 hashed_address,
-                StorageEntry { key: keccak256(key), value: *value },
+                StorageEntry { key: keccak256(key), value: *value, is_private: false },
             )
             .unwrap();
         }
@@ -313,7 +314,9 @@ fn storage_root_regression() {
     let mut hashed_storage_cursor =
         tx.tx_ref().cursor_dup_write::<tables::HashedStorages>().unwrap();
     for (hashed_slot, value) in storage.clone() {
-        hashed_storage_cursor.upsert(key3, StorageEntry { key: hashed_slot, value }).unwrap();
+        hashed_storage_cursor
+            .upsert(key3, StorageEntry { key: hashed_slot, value, is_private: false })
+            .unwrap();
     }
     tx.commit().unwrap();
     let tx = factory.provider_rw().unwrap();
@@ -380,7 +383,9 @@ fn account_and_storage_trie() {
         {
             hashed_storage_cursor.delete_current().unwrap();
         }
-        hashed_storage_cursor.upsert(key3, StorageEntry { key: hashed_slot, value }).unwrap();
+        hashed_storage_cursor
+            .upsert(key3, StorageEntry { key: hashed_slot, value, is_private: false })
+            .unwrap();
     }
     let account3_storage_root = StorageRoot::from_tx(tx.tx_ref(), address3).root().unwrap();
     hash_builder
@@ -703,7 +708,9 @@ fn extension_node_storage_trie<N: ProviderNodeTypes>(
         hex!("30af8f0000000000000000000000000000000000000000000000000000000000"),
         hex!("3100000000000000000000000000000000000000000000000000000000000000"),
     ] {
-        hashed_storage.upsert(hashed_address, StorageEntry { key: B256::new(key), value }).unwrap();
+        hashed_storage
+            .upsert(hashed_address, StorageEntry { key: B256::new(key), value, is_private: false })
+            .unwrap();
         hb.add_leaf(Nibbles::unpack(key), &alloy_rlp::encode_fixed_size(&value));
     }
 
diff --git a/crates/trie/db/tests/witness.rs b/crates/trie/db/tests/witness.rs
index 385f6269f..f325f067a 100644
--- a/crates/trie/db/tests/witness.rs
+++ b/crates/trie/db/tests/witness.rs
@@ -13,6 +13,7 @@ use reth_primitives::{Account, StorageEntry};
 use reth_provider::{test_utils::create_test_provider_factory, HashingWriter};
 use reth_trie::{proof::Proof, witness::TrieWitness, HashedPostState, HashedStorage, StateRoot};
 use reth_trie_db::{DatabaseProof, DatabaseStateRoot, DatabaseTrieWitness};
+use revm::primitives::FlaggedStorage;
 
 #[test]
 fn includes_empty_node_preimage() {
@@ -39,7 +40,9 @@ fn includes_empty_node_preimage() {
 
     let state_root = StateRoot::from_tx(provider.tx_ref()).root().unwrap();
     let multiproof = Proof::from_tx(provider.tx_ref())
-        .multiproof(HashMap::from_iter([(hashed_address, HashSet::from_iter([hashed_slot]))]))
+        .multiproof(
+            HashMap::from_iter([(hashed_address, HashSet::from_iter([hashed_slot]))]).into(),
+        )
         .unwrap();
 
     let witness = TrieWitness::from_tx(provider.tx_ref())
@@ -47,7 +50,7 @@ fn includes_empty_node_preimage() {
             accounts: HashMap::from_iter([(hashed_address, Some(Account::default()))]),
             storages: HashMap::from_iter([(
                 hashed_address,
-                HashedStorage::from_iter(false, [(hashed_slot, U256::from(1))]),
+                HashedStorage::from_iter(false, [(hashed_slot, FlaggedStorage::new_from_value(1))]),
             )]),
         })
         .unwrap();
@@ -72,12 +75,17 @@ fn includes_nodes_for_destroyed_storage_nodes() {
     // Insert account and slot into database
     provider.insert_account_for_hashing([(address, Some(Account::default()))]).unwrap();
     provider
-        .insert_storage_for_hashing([(address, [StorageEntry { key: slot, value: U256::from(1) }])])
+        .insert_storage_for_hashing([(
+            address,
+            [StorageEntry { key: slot, value: U256::from(1), is_private: false }],
+        )])
         .unwrap();
 
     let state_root = StateRoot::from_tx(provider.tx_ref()).root().unwrap();
     let multiproof = Proof::from_tx(provider.tx_ref())
-        .multiproof(HashMap::from_iter([(hashed_address, HashSet::from_iter([hashed_slot]))]))
+        .multiproof(
+            HashMap::from_iter([(hashed_address, HashSet::from_iter([hashed_slot]))]).into(),
+        )
         .unwrap();
 
     let witness =
@@ -114,18 +122,27 @@ fn correctly_decodes_branch_node_values() {
     let mut hashed_storage_cursor =
         provider.tx_ref().cursor_dup_write::<tables::HashedStorages>().unwrap();
     hashed_storage_cursor
-        .upsert(hashed_address, StorageEntry { key: hashed_slot1, value: U256::from(1) })
+        .upsert(
+            hashed_address,
+            StorageEntry { key: hashed_slot1, value: U256::from(1), is_private: false },
+        )
         .unwrap();
     hashed_storage_cursor
-        .upsert(hashed_address, StorageEntry { key: hashed_slot2, value: U256::from(1) })
+        .upsert(
+            hashed_address,
+            StorageEntry { key: hashed_slot2, value: U256::from(1), is_private: false },
+        )
         .unwrap();
 
     let state_root = StateRoot::from_tx(provider.tx_ref()).root().unwrap();
     let multiproof = Proof::from_tx(provider.tx_ref())
-        .multiproof(HashMap::from_iter([(
-            hashed_address,
-            HashSet::from_iter([hashed_slot1, hashed_slot2]),
-        )]))
+        .multiproof(
+            HashMap::from_iter([(
+                hashed_address,
+                HashSet::from_iter([hashed_slot1, hashed_slot2]),
+            )])
+            .into(),
+        )
         .unwrap();
 
     let witness = TrieWitness::from_tx(provider.tx_ref())
@@ -135,7 +152,8 @@ fn correctly_decodes_branch_node_values() {
                 hashed_address,
                 HashedStorage::from_iter(
                     false,
-                    [hashed_slot1, hashed_slot2].map(|hashed_slot| (hashed_slot, U256::from(2))),
+                    [hashed_slot1, hashed_slot2]
+                        .map(|hashed_slot| (hashed_slot, FlaggedStorage::new_from_value(2))),
                 ),
             )]),
         })
diff --git a/crates/trie/parallel/Cargo.toml b/crates/trie/parallel/Cargo.toml
index 1b3e2d59b..950c0e8ec 100644
--- a/crates/trie/parallel/Cargo.toml
+++ b/crates/trie/parallel/Cargo.toml
@@ -43,6 +43,7 @@ metrics = { workspace = true, optional = true }
 reth-primitives = { workspace = true, features = ["test-utils", "arbitrary"] }
 reth-provider = { workspace = true, features = ["test-utils"] }
 reth-trie = { workspace = true, features = ["test-utils"] }
+revm-primitives.workspace = true
 
 # misc
 rand.workspace = true
diff --git a/crates/trie/parallel/benches/root.rs b/crates/trie/parallel/benches/root.rs
index a9300efa9..947ea6db7 100644
--- a/crates/trie/parallel/benches/root.rs
+++ b/crates/trie/parallel/benches/root.rs
@@ -13,6 +13,7 @@ use reth_trie::{
 };
 use reth_trie_db::{DatabaseHashedCursorFactory, DatabaseStateRoot};
 use reth_trie_parallel::root::ParallelStateRoot;
+use revm_primitives::FlaggedStorage;
 use std::collections::HashMap;
 
 pub fn calculate_state_root(c: &mut Criterion) {
@@ -83,7 +84,7 @@ fn generate_test_data(size: usize) -> (HashedPostState, HashedPostState) {
             arb::<Account>().prop_filter("non empty account", |a| !a.is_empty()),
             hash_map(
                 any::<B256>(),
-                any::<U256>().prop_filter("non zero value", |v| !v.is_zero()),
+                any::<FlaggedStorage>().prop_filter("non zero value", |v| !v.is_zero()),
                 storage_size,
             ),
         ),
@@ -107,7 +108,9 @@ fn generate_test_data(size: usize) -> (HashedPostState, HashedPostState) {
                 address,
                 slots_to_update
                     .into_iter()
-                    .map(|slot| (slot, any::<U256>().new_tree(&mut runner).unwrap().current()))
+                    .map(|slot| {
+                        (slot, any::<FlaggedStorage>().new_tree(&mut runner).unwrap().current())
+                    })
                     .collect::<HashMap<_, _>>(),
             )
         })
diff --git a/crates/trie/parallel/src/lib.rs b/crates/trie/parallel/src/lib.rs
index 5be2a6583..7e6c6be6c 100644
--- a/crates/trie/parallel/src/lib.rs
+++ b/crates/trie/parallel/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
diff --git a/crates/trie/parallel/src/proof.rs b/crates/trie/parallel/src/proof.rs
index cabd9c7e0..bfacd99e9 100644
--- a/crates/trie/parallel/src/proof.rs
+++ b/crates/trie/parallel/src/proof.rs
@@ -311,9 +311,11 @@ mod tests {
                 .insert_storage_for_hashing(state.iter().map(|(address, (_, storage))| {
                     (
                         *address,
-                        storage
-                            .iter()
-                            .map(|(slot, value)| StorageEntry { key: *slot, value: *value }),
+                        storage.iter().map(|(slot, value)| StorageEntry {
+                            key: *slot,
+                            value: *value,
+                            is_private: false,
+                        }),
                     )
                 }))
                 .unwrap();
diff --git a/crates/trie/parallel/src/root.rs b/crates/trie/parallel/src/root.rs
index 2aace02ed..6dd534034 100644
--- a/crates/trie/parallel/src/root.rs
+++ b/crates/trie/parallel/src/root.rs
@@ -258,6 +258,7 @@ mod tests {
     use reth_primitives::{Account, StorageEntry};
     use reth_provider::{test_utils::create_test_provider_factory, HashingWriter};
     use reth_trie::{test_utils, HashedPostState, HashedStorage};
+    use revm_primitives::FlaggedStorage;
 
     #[tokio::test]
     async fn random_parallel_root() {
@@ -295,9 +296,11 @@ mod tests {
                 .insert_storage_for_hashing(state.iter().map(|(address, (_, storage))| {
                     (
                         *address,
-                        storage
-                            .iter()
-                            .map(|(slot, value)| StorageEntry { key: *slot, value: *value }),
+                        storage.iter().map(|(slot, value)| StorageEntry {
+                            key: *slot,
+                            value: *value,
+                            is_private: false,
+                        }),
                     )
                 }))
                 .unwrap();
@@ -331,7 +334,7 @@ mod tests {
                         .entry(hashed_address)
                         .or_insert_with(HashedStorage::default)
                         .storage
-                        .insert(hashed_slot, *value);
+                        .insert(hashed_slot, FlaggedStorage::from(*value));
                 }
             }
         }
diff --git a/crates/trie/sparse/Cargo.toml b/crates/trie/sparse/Cargo.toml
index 205451ef7..43dfb3b56 100644
--- a/crates/trie/sparse/Cargo.toml
+++ b/crates/trie/sparse/Cargo.toml
@@ -31,6 +31,7 @@ reth-primitives-traits = { workspace = true, features = ["arbitrary"] }
 reth-trie = { workspace = true, features = ["test-utils"] }
 reth-trie-common = { workspace = true, features = ["test-utils", "arbitrary"] }
 reth-testing-utils.workspace = true
+revm-primitives.workspace = true
 
 arbitrary.workspace = true
 assert_matches.workspace = true
diff --git a/crates/trie/sparse/benches/root.rs b/crates/trie/sparse/benches/root.rs
index c9f5d655d..b9d2737b9 100644
--- a/crates/trie/sparse/benches/root.rs
+++ b/crates/trie/sparse/benches/root.rs
@@ -14,6 +14,7 @@ use reth_trie::{
 };
 use reth_trie_common::{HashBuilder, Nibbles};
 use reth_trie_sparse::SparseTrie;
+use revm_primitives::FlaggedStorage;
 
 pub fn calculate_root_from_leaves(c: &mut Criterion) {
     let mut group = c.benchmark_group("calculate root from leaves");
@@ -26,7 +27,7 @@ pub fn calculate_root_from_leaves(c: &mut Criterion) {
         group.bench_function(BenchmarkId::new("hash builder", size), |b| {
             b.iter_with_setup(HashBuilder::default, |mut hb| {
                 for (key, value) in state.iter().sorted_by_key(|(key, _)| *key) {
-                    hb.add_leaf(Nibbles::unpack(key), &alloy_rlp::encode_fixed_size(value));
+                    hb.add_leaf(Nibbles::unpack(key), &alloy_rlp::encode_fixed_size(&value.value));
                 }
                 hb.root();
             })
@@ -39,7 +40,7 @@ pub fn calculate_root_from_leaves(c: &mut Criterion) {
                     sparse
                         .update_leaf(
                             Nibbles::unpack(key),
-                            alloy_rlp::encode_fixed_size(value).to_vec(),
+                            alloy_rlp::encode_fixed_size(&value.value).to_vec(),
                         )
                         .unwrap();
                 }
@@ -80,7 +81,7 @@ pub fn calculate_root_from_leaves_repeated(c: &mut Criterion) {
                             for (key, value) in init_state.iter().sorted_by_key(|(key, _)| *key) {
                                 hb.add_leaf(
                                     Nibbles::unpack(key),
-                                    &alloy_rlp::encode_fixed_size(value),
+                                    &alloy_rlp::encode_fixed_size(&value.value),
                                 );
                             }
                             hb.root();
@@ -138,7 +139,7 @@ pub fn calculate_root_from_leaves_repeated(c: &mut Criterion) {
                                         TrieElement::Leaf(hashed_slot, value) => {
                                             hb.add_leaf(
                                                 Nibbles::unpack(hashed_slot),
-                                                alloy_rlp::encode_fixed_size(&value).as_ref(),
+                                                alloy_rlp::encode_fixed_size(&value.value).as_ref(),
                                             );
                                         }
                                     }
@@ -166,7 +167,7 @@ pub fn calculate_root_from_leaves_repeated(c: &mut Criterion) {
                                 sparse
                                     .update_leaf(
                                         Nibbles::unpack(key),
-                                        alloy_rlp::encode_fixed_size(value).to_vec(),
+                                        alloy_rlp::encode_fixed_size(&value.value).to_vec(),
                                     )
                                     .unwrap();
                             }
@@ -179,7 +180,7 @@ pub fn calculate_root_from_leaves_repeated(c: &mut Criterion) {
                                     sparse
                                         .update_leaf(
                                             Nibbles::unpack(key),
-                                            alloy_rlp::encode_fixed_size(value).to_vec(),
+                                            alloy_rlp::encode_fixed_size(&value.value).to_vec(),
                                         )
                                         .unwrap();
                                 }
@@ -193,9 +194,9 @@ pub fn calculate_root_from_leaves_repeated(c: &mut Criterion) {
     }
 }
 
-fn generate_test_data(size: usize) -> B256HashMap<U256> {
+fn generate_test_data(size: usize) -> B256HashMap<FlaggedStorage> {
     let mut runner = TestRunner::new(ProptestConfig::default());
-    proptest::collection::hash_map(any::<B256>(), any::<U256>(), size)
+    proptest::collection::hash_map(any::<B256>(), any::<FlaggedStorage>(), size)
         .new_tree(&mut runner)
         .unwrap()
         .current()
diff --git a/crates/trie/sparse/src/state.rs b/crates/trie/sparse/src/state.rs
index 1dad2a137..5112e64a2 100644
--- a/crates/trie/sparse/src/state.rs
+++ b/crates/trie/sparse/src/state.rs
@@ -15,7 +15,8 @@ use reth_primitives_traits::Account;
 use reth_tracing::tracing::trace;
 use reth_trie_common::{
     updates::{StorageTrieUpdates, TrieUpdates},
-    MultiProof, Nibbles, TrieAccount, TrieNode, EMPTY_ROOT_HASH, TRIE_ACCOUNT_RLP_MAX_SIZE,
+    MultiProof, MultiProofTargets, Nibbles, TrieAccount, TrieNode, EMPTY_ROOT_HASH,
+    TRIE_ACCOUNT_RLP_MAX_SIZE,
 };
 use std::{fmt, iter::Peekable};
 
@@ -206,7 +207,7 @@ impl<F: BlindedProviderFactory> SparseStateTrie<F> {
     /// NOTE: This method does not extensively validate the proof.
     pub fn reveal_multiproof(
         &mut self,
-        targets: B256HashMap<B256HashSet>,
+        targets: MultiProofTargets,
         multiproof: MultiProof,
     ) -> SparseStateTrieResult<()> {
         let account_subtree = multiproof.account_subtree.into_nodes_sorted();
@@ -559,7 +560,8 @@ mod tests {
                 HashMap::from_iter([
                     (address_1, HashSet::from_iter([slot_1, slot_2])),
                     (address_2, HashSet::from_iter([slot_1, slot_2])),
-                ]),
+                ])
+                .into(),
                 MultiProof {
                     account_subtree: proof_nodes,
                     branch_node_hash_masks: HashMap::from_iter([(
diff --git a/crates/trie/trie/benches/hash_post_state.rs b/crates/trie/trie/benches/hash_post_state.rs
index da47d01e1..ea72d9797 100644
--- a/crates/trie/trie/benches/hash_post_state.rs
+++ b/crates/trie/trie/benches/hash_post_state.rs
@@ -3,7 +3,10 @@ use alloy_primitives::{keccak256, map::HashMap, Address, B256, U256};
 use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
 use proptest::{prelude::*, strategy::ValueTree, test_runner::TestRunner};
 use reth_trie::{HashedPostState, HashedStorage, KeccakKeyHasher};
-use revm::db::{states::BundleBuilder, BundleAccount};
+use revm::{
+    db::{states::BundleBuilder, BundleAccount},
+    primitives::FlaggedStorage,
+};
 
 pub fn hash_post_state(c: &mut Criterion) {
     let mut group = c.benchmark_group("Hash Post State");
@@ -53,8 +56,8 @@ fn generate_test_data(size: usize) -> HashMap<Address, BundleAccount> {
         hash_map(
             any::<U256>(), // slot
             (
-                any::<U256>(), // old value
-                any::<U256>(), // new value
+                any::<FlaggedStorage>(), // old value
+                any::<FlaggedStorage>(), // new value
             ),
             storage_size,
         ),
diff --git a/crates/trie/trie/src/hashed_cursor/mod.rs b/crates/trie/trie/src/hashed_cursor/mod.rs
index 1101f5078..b68ce5592 100644
--- a/crates/trie/trie/src/hashed_cursor/mod.rs
+++ b/crates/trie/trie/src/hashed_cursor/mod.rs
@@ -1,10 +1,11 @@
-use alloy_primitives::{B256, U256};
+use alloy_primitives::B256;
 use reth_primitives::Account;
 use reth_storage_errors::db::DatabaseError;
 
 /// Implementation of hashed state cursor traits for the post state.
 mod post_state;
 pub use post_state::*;
+use revm::primitives::FlaggedStorage;
 
 /// Implementation of noop hashed state cursor.
 pub mod noop;
@@ -14,7 +15,7 @@ pub trait HashedCursorFactory {
     /// The hashed account cursor type.
     type AccountCursor: HashedCursor<Value = Account>;
     /// The hashed storage cursor type.
-    type StorageCursor: HashedStorageCursor<Value = U256>;
+    type StorageCursor: HashedStorageCursor<Value = FlaggedStorage>;
 
     /// Returns a cursor for iterating over all hashed accounts in the state.
     fn hashed_account_cursor(&self) -> Result<Self::AccountCursor, DatabaseError>;
diff --git a/crates/trie/trie/src/hashed_cursor/noop.rs b/crates/trie/trie/src/hashed_cursor/noop.rs
index a21e1026b..afc826e28 100644
--- a/crates/trie/trie/src/hashed_cursor/noop.rs
+++ b/crates/trie/trie/src/hashed_cursor/noop.rs
@@ -1,7 +1,8 @@
 use super::{HashedCursor, HashedCursorFactory, HashedStorageCursor};
-use alloy_primitives::{B256, U256};
+use alloy_primitives::B256;
 use reth_primitives::Account;
 use reth_storage_errors::db::DatabaseError;
+use revm::primitives::FlaggedStorage;
 
 /// Noop hashed cursor factory.
 #[derive(Default, Debug)]
@@ -47,7 +48,7 @@ impl HashedCursor for NoopHashedAccountCursor {
 pub struct NoopHashedStorageCursor;
 
 impl HashedCursor for NoopHashedStorageCursor {
-    type Value = U256;
+    type Value = FlaggedStorage;
 
     fn seek(&mut self, _key: B256) -> Result<Option<(B256, Self::Value)>, DatabaseError> {
         Ok(None)
diff --git a/crates/trie/trie/src/hashed_cursor/post_state.rs b/crates/trie/trie/src/hashed_cursor/post_state.rs
index a4ab1fa52..7e095593d 100644
--- a/crates/trie/trie/src/hashed_cursor/post_state.rs
+++ b/crates/trie/trie/src/hashed_cursor/post_state.rs
@@ -3,9 +3,10 @@ use crate::{
     forward_cursor::ForwardInMemoryCursor, HashedAccountsSorted, HashedPostStateSorted,
     HashedStorageSorted,
 };
-use alloy_primitives::{map::B256HashSet, B256, U256};
+use alloy_primitives::{map::B256HashSet, B256};
 use reth_primitives::Account;
 use reth_storage_errors::db::DatabaseError;
+use revm::primitives::FlaggedStorage;
 
 /// The hashed cursor factory for the post state.
 #[derive(Clone, Debug)]
@@ -180,7 +181,7 @@ pub struct HashedPostStateStorageCursor<'a, C> {
     /// The database cursor.
     cursor: C,
     /// Forward-only in-memory cursor over non zero-valued account storage slots.
-    post_state_cursor: Option<ForwardInMemoryCursor<'a, B256, U256>>,
+    post_state_cursor: Option<ForwardInMemoryCursor<'a, B256, FlaggedStorage>>,
     /// Reference to the collection of storage slot keys that were cleared.
     cleared_slots: Option<&'a B256HashSet>,
     /// Flag indicating whether database storage was wiped.
@@ -192,7 +193,7 @@ pub struct HashedPostStateStorageCursor<'a, C> {
 
 impl<'a, C> HashedPostStateStorageCursor<'a, C>
 where
-    C: HashedStorageCursor<Value = U256>,
+    C: HashedStorageCursor<Value = FlaggedStorage>,
 {
     /// Create new instance of [`HashedPostStateStorageCursor`] for the given hashed address.
     pub fn new(cursor: C, post_state_storage: Option<&'a HashedStorageSorted>) -> Self {
@@ -210,7 +211,10 @@ where
     }
 
     /// Find the storage entry in post state or database that's greater or equal to provided subkey.
-    fn seek_inner(&mut self, subkey: B256) -> Result<Option<(B256, U256)>, DatabaseError> {
+    fn seek_inner(
+        &mut self,
+        subkey: B256,
+    ) -> Result<Option<(B256, FlaggedStorage)>, DatabaseError> {
         // Attempt to find the account's storage in post state.
         let post_state_entry = self.post_state_cursor.as_mut().and_then(|c| c.seek(&subkey));
 
@@ -232,7 +236,10 @@ where
     }
 
     /// Find the storage entry that is right after current cursor position.
-    fn next_inner(&mut self, last_slot: B256) -> Result<Option<(B256, U256)>, DatabaseError> {
+    fn next_inner(
+        &mut self,
+        last_slot: B256,
+    ) -> Result<Option<(B256, FlaggedStorage)>, DatabaseError> {
         // Attempt to find the account's storage in post state.
         let post_state_entry =
             self.post_state_cursor.as_mut().and_then(|c| c.first_after(&last_slot));
@@ -261,9 +268,9 @@ where
     /// Given the next post state and database entries, return the smallest of the two.
     /// If the storage keys are the same, the post state entry is given precedence.
     fn compare_entries(
-        post_state_item: Option<(B256, U256)>,
-        db_item: Option<(B256, U256)>,
-    ) -> Option<(B256, U256)> {
+        post_state_item: Option<(B256, FlaggedStorage)>,
+        db_item: Option<(B256, FlaggedStorage)>,
+    ) -> Option<(B256, FlaggedStorage)> {
         if let Some((post_state_entry, db_entry)) = post_state_item.zip(db_item) {
             // If both are not empty, return the smallest of the two
             // Post state is given precedence if keys are equal
@@ -277,9 +284,9 @@ where
 
 impl<C> HashedCursor for HashedPostStateStorageCursor<'_, C>
 where
-    C: HashedStorageCursor<Value = U256>,
+    C: HashedStorageCursor<Value = FlaggedStorage>,
 {
-    type Value = U256;
+    type Value = FlaggedStorage;
 
     /// Seek the next account storage entry for a given hashed key pair.
     fn seek(&mut self, subkey: B256) -> Result<Option<(B256, Self::Value)>, DatabaseError> {
@@ -305,7 +312,7 @@ where
 
 impl<C> HashedStorageCursor for HashedPostStateStorageCursor<'_, C>
 where
-    C: HashedStorageCursor<Value = U256>,
+    C: HashedStorageCursor<Value = FlaggedStorage>,
 {
     /// Returns `true` if the account has no storage entries.
     ///
diff --git a/crates/trie/trie/src/lib.rs b/crates/trie/trie/src/lib.rs
index 1e7eeb9b5..a1d2da3ae 100644
--- a/crates/trie/trie/src/lib.rs
+++ b/crates/trie/trie/src/lib.rs
@@ -9,7 +9,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
diff --git a/crates/trie/trie/src/proof/blinded.rs b/crates/trie/trie/src/proof/blinded.rs
index 33a1a43b5..eb713c05a 100644
--- a/crates/trie/trie/src/proof/blinded.rs
+++ b/crates/trie/trie/src/proof/blinded.rs
@@ -91,7 +91,7 @@ where
         let proof =
             Proof::new(self.trie_cursor_factory.clone(), self.hashed_cursor_factory.clone())
                 .with_prefix_sets_mut(self.prefix_sets.as_ref().clone())
-                .multiproof(targets)
+                .multiproof(targets.into())
                 .map_err(|error| SparseTrieErrorKind::Other(Box::new(error)))?;
 
         Ok(proof.account_subtree.into_inner().remove(path))
diff --git a/crates/trie/trie/src/proof/mod.rs b/crates/trie/trie/src/proof/mod.rs
index 1414d4a34..1c2a73839 100644
--- a/crates/trie/trie/src/proof/mod.rs
+++ b/crates/trie/trie/src/proof/mod.rs
@@ -14,7 +14,8 @@ use alloy_primitives::{
 use alloy_rlp::{BufMut, Encodable};
 use reth_execution_errors::trie::StateProofError;
 use reth_trie_common::{
-    proof::ProofRetainer, AccountProof, MultiProof, StorageMultiProof, TrieAccount,
+    proof::ProofRetainer, AccountProof, MultiProof, MultiProofTargets, StorageMultiProof,
+    TrieAccount,
 };
 
 mod blinded;
@@ -93,17 +94,17 @@ where
         slots: &[B256],
     ) -> Result<AccountProof, StateProofError> {
         Ok(self
-            .multiproof(HashMap::from_iter([(
-                keccak256(address),
-                slots.iter().map(keccak256).collect(),
-            )]))?
+            .multiproof(
+                HashMap::from_iter([(keccak256(address), slots.iter().map(keccak256).collect())])
+                    .into(),
+            )?
             .account_proof(address, slots)?)
     }
 
     /// Generate a state multiproof according to specified targets.
     pub fn multiproof(
         mut self,
-        mut targets: B256HashMap<B256HashSet>,
+        mut targets: MultiProofTargets,
     ) -> Result<MultiProof, StateProofError> {
         let hashed_account_cursor = self.hashed_cursor_factory.hashed_account_cursor()?;
         let trie_cursor = self.trie_cursor_factory.account_trie_cursor()?;
@@ -292,7 +293,7 @@ where
                 TrieElement::Leaf(hashed_slot, value) => {
                     hash_builder.add_leaf(
                         Nibbles::unpack(hashed_slot),
-                        alloy_rlp::encode_fixed_size(&value).as_ref(),
+                        alloy_rlp::encode_fixed_size(&value.value).as_ref(),
                     );
                 }
             }
diff --git a/crates/trie/trie/src/state.rs b/crates/trie/trie/src/state.rs
index 510b914ce..0fee81b86 100644
--- a/crates/trie/trie/src/state.rs
+++ b/crates/trie/trie/src/state.rs
@@ -11,7 +11,10 @@ use itertools::Itertools;
 use rayon::prelude::{IntoParallelIterator, ParallelIterator};
 use reth_primitives::Account;
 use reth_trie_common::KeyHasher;
-use revm::db::{states::CacheAccount, AccountStatus, BundleAccount};
+use revm::{
+    db::{states::CacheAccount, AccountStatus, BundleAccount},
+    primitives::FlaggedStorage,
+};
 use std::borrow::Cow;
 
 /// Representation of in-memory hashed state.
@@ -210,7 +213,7 @@ pub struct HashedStorage {
     /// Flag indicating whether the storage was wiped or not.
     pub wiped: bool,
     /// Mapping of hashed storage slot to storage value.
-    pub storage: B256HashMap<U256>,
+    pub storage: B256HashMap<FlaggedStorage>,
 }
 
 impl HashedStorage {
@@ -220,18 +223,18 @@ impl HashedStorage {
     }
 
     /// Create new hashed storage from iterator.
-    pub fn from_iter(wiped: bool, iter: impl IntoIterator<Item = (B256, U256)>) -> Self {
+    pub fn from_iter(wiped: bool, iter: impl IntoIterator<Item = (B256, FlaggedStorage)>) -> Self {
         Self { wiped, storage: HashMap::from_iter(iter) }
     }
 
     /// Create new hashed storage from account status and plain storage.
     pub fn from_plain_storage<'a>(
         status: AccountStatus,
-        storage: impl IntoIterator<Item = (&'a U256, &'a U256)>,
+        storage: impl IntoIterator<Item = (&'a U256, &'a FlaggedStorage)>,
     ) -> Self {
         Self::from_iter(
             status.was_destroyed(),
-            storage.into_iter().map(|(key, value)| (keccak256(B256::from(*key)), *value)),
+            storage.into_iter().map(|(key, value)| (keccak256(B256::from(*key)), value.clone())),
         )
     }
 
@@ -328,7 +331,7 @@ impl HashedAccountsSorted {
 #[derive(Clone, Eq, PartialEq, Debug)]
 pub struct HashedStorageSorted {
     /// Sorted hashed storage slots with non-zero value.
-    pub(crate) non_zero_valued_slots: Vec<(B256, U256)>,
+    pub(crate) non_zero_valued_slots: Vec<(B256, FlaggedStorage)>,
     /// Slots that have been zero valued.
     pub(crate) zero_valued_slots: B256HashSet,
     /// Flag indicating whether the storage was wiped or not.
@@ -342,11 +345,15 @@ impl HashedStorageSorted {
     }
 
     /// Returns a sorted iterator over updated storage slots.
-    pub fn storage_slots_sorted(&self) -> impl Iterator<Item = (B256, U256)> {
+    pub fn storage_slots_sorted(&self) -> impl Iterator<Item = (B256, FlaggedStorage)> {
         self.non_zero_valued_slots
             .iter()
             .map(|(hashed_slot, value)| (*hashed_slot, *value))
-            .chain(self.zero_valued_slots.iter().map(|hashed_slot| (*hashed_slot, U256::ZERO)))
+            .chain(
+                self.zero_valued_slots
+                    .iter()
+                    .map(|hashed_slot| (*hashed_slot, FlaggedStorage::ZERO)),
+            )
             .sorted_by_key(|entry| *entry.0)
     }
 }
@@ -371,7 +378,7 @@ mod tests {
         let hashed_slot2 = B256::with_last_byte(65);
 
         // Initialize post state storage
-        let original_slot_value = U256::from(123);
+        let original_slot_value = FlaggedStorage::new(123, true);
         let mut hashed_state = HashedPostState::default().with_storages([(
             hashed_address,
             HashedStorage::from_iter(
@@ -381,7 +388,7 @@ mod tests {
         )]);
 
         // Update single slot value
-        let updated_slot_value = U256::from(321);
+        let updated_slot_value = FlaggedStorage::new_from_tuple((321, false));
         let extension = HashedPostState::default().with_storages([(
             hashed_address,
             HashedStorage::from_iter(false, [(hashed_slot, updated_slot_value)]),
@@ -454,7 +461,7 @@ mod tests {
         let mut storage = StorageWithOriginalValues::default();
         storage.insert(
             U256::from(1),
-            StorageSlot { present_value: U256::from(4), ..Default::default() },
+            StorageSlot { present_value: FlaggedStorage::new_from_value(4), ..Default::default() },
         );
 
         // Create a `BundleAccount` struct to represent the account and its storage.
@@ -496,7 +503,7 @@ mod tests {
         };
 
         let mut storage = PlainStorage::default();
-        storage.insert(U256::from(1), U256::from(35636));
+        storage.insert(U256::from(1), FlaggedStorage::new_from_value(35636));
 
         // Create a `CacheAccount` with the mock account info.
         let account = CacheAccount {
diff --git a/crates/trie/trie/src/trie.rs b/crates/trie/trie/src/trie.rs
index 953b8d31f..bf7fa4c6b 100644
--- a/crates/trie/trie/src/trie.rs
+++ b/crates/trie/trie/src/trie.rs
@@ -423,7 +423,7 @@ where
                     tracker.inc_leaf();
                     hash_builder.add_leaf(
                         Nibbles::unpack(hashed_slot),
-                        alloy_rlp::encode_fixed_size(&value).as_ref(),
+                        alloy_rlp::encode_fixed_size(&value.value).as_ref(),
                     );
                 }
             }
diff --git a/crates/trie/trie/src/witness.rs b/crates/trie/trie/src/witness.rs
index f48815d9b..fbc695d71 100644
--- a/crates/trie/trie/src/witness.rs
+++ b/crates/trie/trie/src/witness.rs
@@ -15,7 +15,7 @@ use reth_execution_errors::{
     SparseStateTrieError, SparseStateTrieErrorKind, SparseTrieError, SparseTrieErrorKind,
     StateProofError, TrieWitnessError,
 };
-use reth_trie_common::Nibbles;
+use reth_trie_common::{MultiProofTargets, Nibbles};
 use reth_trie_sparse::{
     blinded::{BlindedProvider, BlindedProviderFactory},
     SparseStateTrie,
@@ -134,7 +134,7 @@ where
                 let maybe_leaf_value = storage
                     .and_then(|s| s.storage.get(&hashed_slot))
                     .filter(|v| !v.is_zero())
-                    .map(|v| alloy_rlp::encode_fixed_size(v).to_vec());
+                    .map(|v| alloy_rlp::encode_fixed_size(&v.value).to_vec());
 
                 if let Some(value) = maybe_leaf_value {
                     storage_trie
@@ -171,8 +171,8 @@ where
     fn get_proof_targets(
         &self,
         state: &HashedPostState,
-    ) -> Result<B256HashMap<B256HashSet>, StateProofError> {
-        let mut proof_targets = B256HashMap::default();
+    ) -> Result<MultiProofTargets, StateProofError> {
+        let mut proof_targets = MultiProofTargets::default();
         for hashed_address in state.accounts.keys() {
             proof_targets.insert(*hashed_address, B256HashSet::default());
         }
diff --git a/deny.toml b/deny.toml
index 8d0807f9d..0f8a11860 100644
--- a/deny.toml
+++ b/deny.toml
@@ -89,8 +89,8 @@ unknown-registry = "warn"
 unknown-git = "deny"
 allow-git = [
     # TODO: Please avoid adding new entries to this list.
-    "https://github.com/alloy-rs/alloy",
+    "https://github.com/SeismicSystems/seismic-alloy",
     "https://github.com/foundry-rs/block-explorers",
-    "https://github.com/bluealloy/revm",
-    "https://github.com/paradigmxyz/revm-inspectors",
+    "https://github.com/SeismicSystems/seismic-revm",
+    "https://github.com/SeismicSystems/seismic-revm-inspectors",
 ]
diff --git a/docker-build.sh b/docker-build.sh
new file mode 100755
index 000000000..49691b0f3
--- /dev/null
+++ b/docker-build.sh
@@ -0,0 +1,2 @@
+#/bin/sh
+DOCKER_BUILDKIT=1 docker build -t seismic-reth --ssh default=$SSH_AUTH_SOCK .
diff --git a/docs/repo/ci.md b/docs/repo/ci.md
index 863a18f9c..86e6921fe 100644
--- a/docs/repo/ci.md
+++ b/docs/repo/ci.md
@@ -9,6 +9,7 @@ The CI runs a couple of workflows:
 - **[bench]**: Runs benchmarks
 - **[sync]**: Runs sync tests
 - **[stage]**: Runs all `stage run` commands
+- **[seismic]**: Runs all Seismic-specific CI
 
 ### Docs
 
@@ -34,20 +35,21 @@ The CI runs a couple of workflows:
 - **[lint-actions]**: Lints GitHub Actions workflows
 - **[label-pr]**: Automatically labels PRs
 
-[unit]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/unit.yml
-[integration]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/integration.yml
-[bench]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/bench.yml
-[sync]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/sync.yml
-[stage]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/stage.yml
-[book]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/book.yml
-[deny]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/deny.yml
-[release]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/release.yml
-[release-dist]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/release-dist.yml
-[dependencies]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/dependencies.yml
-[stale]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/stale.yml
-[docker]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/docker.yml
-[kurtosis]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/kurtosis.yml
-[hive]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/hive.yml
-[lint]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/lint.yml
-[lint-actions]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/lint-actions.yml
-[label-pr]: https://github.com/paradigmxyz/reth/blob/main/.github/workflows/label-pr.yml
+[unit]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/unit.yml
+[integration]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/integration.yml
+[bench]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/bench.yml
+[sync]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/sync.yml
+[stage]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/stage.yml
+[book]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/book.yml
+[deny]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/deny.yml
+[release]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/release.yml
+[release-dist]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/release-dist.yml
+[dependencies]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/dependencies.yml
+[stale]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/stale.yml
+[docker]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/docker.yml
+[kurtosis]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/kurtosis.yml
+[hive]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/hive.yml
+[lint]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/lint.yml
+[lint-actions]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/lint-actions.yml
+[label-pr]: https://github.com/SeismicSystems/seismic-reth/blob/main/.github/workflows/label-pr.yml
+[seismic]: https://github.com/SeismicSystems/seismic-reth/blob/seismic/.github/workflows/seismic.yml
\ No newline at end of file
diff --git a/docs/repo/layout.md b/docs/repo/layout.md
index dcb475e02..f55f70f50 100644
--- a/docs/repo/layout.md
+++ b/docs/repo/layout.md
@@ -4,26 +4,26 @@ This repository contains several Rust crates that implement the different buildi
 
 Generally reth is composed of a few components, with supporting crates. The main components can be defined as:
 
-- [Project Layout](#project-layout)
-  - [Documentation](#documentation)
-  - [Binaries](#binaries)
-  - [Storage](#storage)
-  - [Networking](#networking)
-    - [Common](#common)
-    - [Discovery](#discovery)
-    - [Protocol](#protocol)
-    - [Downloaders](#downloaders)
-  - [Consensus](#consensus)
-  - [Execution](#execution)
-  - [Sync](#sync)
-  - [RPC](#rpc)
-    - [Transports](#transports)
-    - [Common](#common-1)
-    - [Utilities Crates](#utilities-crates)
-  - [Payloads](#payloads)
-  - [Primitives](#primitives)
-  - [Optimism](#optimism)
-  - [Misc](#misc)
+-   [Project Layout](#project-layout)
+    -   [Documentation](#documentation)
+    -   [Binaries](#binaries)
+    -   [Storage](#storage)
+    -   [Networking](#networking)
+        -   [Common](#common)
+        -   [Discovery](#discovery)
+        -   [Protocol](#protocol)
+        -   [Downloaders](#downloaders)
+    -   [Consensus](#consensus)
+    -   [Execution](#execution)
+    -   [Sync](#sync)
+    -   [RPC](#rpc)
+        -   [Transports](#transports)
+        -   [Common](#common-1)
+        -   [Utilities Crates](#utilities-crates)
+    -   [Payloads](#payloads)
+    -   [Primitives](#primitives)
+    -   [Optimism](#optimism)
+    -   [Misc](#misc)
 
 The supporting crates are split into two categories: [primitives](#primitives) and [miscellaneous](#misc).
 
@@ -39,12 +39,11 @@ All binaries are stored in [`bin`](../../bin).
 
 These crates are related to the database.
 
-- [`storage/codecs`](../../crates/storage/codecs): Different storage codecs.
-- [`storage/libmdbx-rs`](../../crates/storage/libmdbx-rs): Rust bindings for [libmdbx](https://libmdbx.dqdkfa.ru). A fork of an earlier Apache-licensed version of [libmdbx-rs][libmdbx-rs].
-- [`storage/db`](../../crates/storage/db): Strongly typed Database abstractions (transactions, cursors, tables) over lower level database backends.
-  - Implemented backends: mdbx
-- [`storage/provider`](../../crates/storage/provider): Traits which provide a higher level api over the database to access the Ethereum state and historical data (transactions, blocks etc.)
-
+-   [`storage/codecs`](../../crates/storage/codecs): Different storage codecs.
+-   [`storage/libmdbx-rs`](../../crates/storage/libmdbx-rs): Rust bindings for [libmdbx](https://libmdbx.dqdkfa.ru). A fork of an earlier Apache-licensed version of [libmdbx-rs][libmdbx-rs].
+-   [`storage/db`](../../crates/storage/db): Strongly typed Database abstractions (transactions, cursors, tables) over lower level database backends.
+    -   Implemented backends: mdbx
+-   [`storage/provider`](../../crates/storage/provider): Traits which provide a higher level api over the database to access the Ethereum state and historical data (transactions, blocks etc.)
 
 ### Networking
 
@@ -52,53 +51,53 @@ These crates are related to networking (P2P).
 
 The networking component mainly lives in [`net/network`](../../crates/net/network), which handles:
 
-- Message egress/ingress
-- Peer management
-- Session management
+-   Message egress/ingress
+-   Peer management
+-   Session management
 
 #### Common
 
-- [`net/banlist`](../../crates/net/banlist): A simple peer banlist that can be used to ban peers or IP addresses.
-  - Contains: Peer banlist.
-- [`net/network-api`](../../crates/net/network-api): Contains traits that define the networking component as a whole. Other components that interface with the network stack only need to depend on this crate for the relevant types.
-- [`net/nat`](../../crates/net/nat): A small helper crate that resolves the external IP of the running node using various methods (such as a manually provided IP, using UPnP etc.)
+-   [`net/banlist`](../../crates/net/banlist): A simple peer banlist that can be used to ban peers or IP addresses.
+    -   Contains: Peer banlist.
+-   [`net/network-api`](../../crates/net/network-api): Contains traits that define the networking component as a whole. Other components that interface with the network stack only need to depend on this crate for the relevant types.
+-   [`net/nat`](../../crates/net/nat): A small helper crate that resolves the external IP of the running node using various methods (such as a manually provided IP, using UPnP etc.)
 
 #### Discovery
 
-- [`net/discv4`](../../crates/net/discv4): An implementation of the [discv4][discv4] protocol
-- [`net/dns`](../../crates/net/dns): An implementation of node discovery via DNS ([EIP-1459][eip-1459])
+-   [`net/discv4`](../../crates/net/discv4): An implementation of the [discv4][discv4] protocol
+-   [`net/dns`](../../crates/net/dns): An implementation of node discovery via DNS ([EIP-1459][eip-1459])
 
 #### Protocol
 
-- [`net/eth-wire`](../../crates/net/eth-wire): Implements the `eth` wire protocol and the ``RLPx`` networking stack.
-- [`net/ecies`](../../crates/net/ecies): Implementation of the Elliptic Curve Integrated Encryption Scheme used in the ``RLPx`` handshake.
+-   [`net/eth-wire`](../../crates/net/eth-wire): Implements the `eth` wire protocol and the `RLPx` networking stack.
+-   [`net/ecies`](../../crates/net/ecies): Implementation of the Elliptic Curve Integrated Encryption Scheme used in the `RLPx` handshake.
 
 #### Downloaders
 
-- [`net/downloaders`](../../crates/net/downloaders): Traits defining block body and header downloaders, as well as P2P implementations of both.
+-   [`net/downloaders`](../../crates/net/downloaders): Traits defining block body and header downloaders, as well as P2P implementations of both.
 
 ### Consensus
 
 Different consensus mechanisms.
 
-- [`consensus/common`](../../crates/consensus/common): Common consensus functions and traits (e.g. fee calculation)
-- [`consensus/beacon`](../../crates/consensus/beacon): Consensus mechanism that handles messages from a beacon node ("eth2")
+-   [`consensus/common`](../../crates/consensus/common): Common consensus functions and traits (e.g. fee calculation)
+-   [`consensus/beacon`](../../crates/consensus/beacon): Consensus mechanism that handles messages from a beacon node ("eth2")
 
 ### Execution
 
 Crates related to transaction execution.
 
-- [`revm`](../../crates/revm): Revm utils and implementations specific to reth.
-- [`evm`](../../crates/evm): Traits for configuring an EVM specifics.
-- [`execution-types`](../../crates/evm/execution-types): Commonly used types for (EVM) block execution.
-- [`execution-errors`](../../crates/evm/execution-errors): Commonly used error types used when doing block execution.
+-   [`revm`](../../crates/revm): Revm utils and implementations specific to reth.
+-   [`evm`](../../crates/evm): Traits for configuring an EVM specifics.
+-   [`execution-types`](../../crates/evm/execution-types): Commonly used types for (EVM) block execution.
+-   [`execution-errors`](../../crates/evm/execution-errors): Commonly used error types used when doing block execution.
 
 ### Sync
 
 These crates implement the main syncing drivers of reth.
 
-- [`blockchain-tree`](../../crates/blockchain-tree): A tree-like structure for handling multiple chains of unfinalized blocks. This is the main component during live sync (i.e. syncing at the tip)
-- [`stages`](../../crates/stages): A pipelined sync, including implementation of various stages. This is used during initial sync and is faster than the tree-like structure for longer sync ranges.
+-   [`blockchain-tree`](../../crates/blockchain-tree): A tree-like structure for handling multiple chains of unfinalized blocks. This is the main component during live sync (i.e. syncing at the tip)
+-   [`stages`](../../crates/stages): A pipelined sync, including implementation of various stages. This is used during initial sync and is faster than the tree-like structure for longer sync ranges.
 
 ### RPC
 
@@ -106,17 +105,17 @@ Crates related to the RPC component (including IPC transport)
 
 The RPC component mainly lives in [`rpc/rpc`](../../crates/rpc/rpc), which implements the following namespaces:
 
-- `admin_`
-- `debug_` (includes Geth-style tracing APIs)
-- `eth_`
-- `net_`
-- `trace_` (OpenEthereum-style tracing APIs)
-- `txpool_`
-- `web3_`
+-   `admin_`
+-   `debug_` (includes Geth-style tracing APIs)
+-   `eth_`
+-   `net_`
+-   `trace_` (OpenEthereum-style tracing APIs)
+-   `txpool_`
+-   `web3_`
 
 These RPC interface is defined in [`rpc/rpc-api`](../../crates/rpc/rpc-api).
 
-The engine API ([`engine_`][engine-spec]) lives in [`rpc/rpc-engine-api`](../../crates/rpc/rpc-engine-api) (this is *not* an interface crate despite the confusing name).
+The engine API ([`engine_`][engine-spec]) lives in [`rpc/rpc-engine-api`](../../crates/rpc/rpc-engine-api) (this is _not_ an interface crate despite the confusing name).
 
 There is also a crate to easily configure an RPC server: [`rpc/rpc-builder`](../../crates/rpc/rpc-builder).
 
@@ -128,47 +127,51 @@ The IPC transport lives in [`rpc/ipc`](../../crates/rpc/ipc).
 
 #### Common
 
-- [`rpc/rpc-api`](../../crates/rpc/rpc-api): RPC traits
-  - Supported transports: HTTP, WS, IPC
-  - Supported namespaces: `eth_`, `engine_`, `debug_`
-- [`rpc/rpc-eth-api`](../../crates/rpc/rpc-eth-api/): Reth RPC 'eth' namespace API (including interface and implementation), this crate is re-exported by `rpc/rpc-api`
-- [`rpc/rpc-eth-types`](../../crates/rpc/rpc-eth-types/): Types `supporting the implementation` of 'eth' namespace RPC server API
-- [`rpc/rpc-server-types`](../../crates/rpc/rpc-server-types/): RPC server types and constants
+-   [`rpc/rpc-api`](../../crates/rpc/rpc-api): RPC traits
+    -   Supported transports: HTTP, WS, IPC
+    -   Supported namespaces: `eth_`, `engine_`, `debug_`
+-   [`rpc/rpc-eth-api`](../../crates/rpc/rpc-eth-api/): Reth RPC 'eth' namespace API (including interface and implementation), this crate is re-exported by `rpc/rpc-api`
+-   [`rpc/rpc-eth-types`](../../crates/rpc/rpc-eth-types/): Types `supporting the implementation` of 'eth' namespace RPC server API
+-   [`rpc/rpc-server-types`](../../crates/rpc/rpc-server-types/): RPC server types and constants
 
 #### Utilities Crates
 
-- [`rpc/rpc-types-compat`](../../crates/rpc/rpc-types-compat): This crate various helper functions to convert between reth primitive types and rpc types.
-- [`rpc/layer`](../../crates/rpc/rpc-layer/): Some RPC middleware layers (e.g. `AuthValidator`, `JwtAuthValidator`)
-- [`rpc/rpc-testing-util`](../../crates/rpc/rpc-testing-util/): Reth RPC testing helpers
+-   [`rpc/rpc-types-compat`](../../crates/rpc/rpc-types-compat): This crate various helper functions to convert between reth primitive types and rpc types.
+-   [`rpc/layer`](../../crates/rpc/rpc-layer/): Some RPC middleware layers (e.g. `AuthValidator`, `JwtAuthValidator`)
+-   [`rpc/rpc-testing-util`](../../crates/rpc/rpc-testing-util/): Reth RPC testing helpers
 
 ### Payloads
 
 Crates related to building and validating payloads (blocks).
 
-- [`transaction-pool`](../../crates/transaction-pool): An in-memory pending transactions pool.
-- [`payload/builder`](../../crates/payload/builder): Abstractions for payload building and a payload builder service that works with multiple kinds of payload resolvers.
-- [`payload/basic`](../../crates/payload/basic): A basic payload generator.
+-   [`transaction-pool`](../../crates/transaction-pool): An in-memory pending transactions pool.
+-   [`payload/builder`](../../crates/payload/builder): Abstractions for payload building and a payload builder service that works with multiple kinds of payload resolvers.
+-   [`payload/basic`](../../crates/payload/basic): A basic payload generator.
 
 ### Primitives
 
 These crates define primitive types or algorithms.
 
-- [`primitives`](../../crates/primitives): Commonly used types in Reth.
-- [`primitives-traits`](../../crates/primitives-traits/): Common abstracted types in reth.
-- [`trie`](../../crates/trie): An implementation of a Merkle Patricia Trie used for various roots (e.g. the state root) in Ethereum.
+-   [`primitives`](../../crates/primitives): Commonly used types in Reth.
+-   [`primitives-traits`](../../crates/primitives-traits/): Common abstracted types in reth.
+-   [`trie`](../../crates/trie): An implementation of a Merkle Patricia Trie used for various roots (e.g. the state root) in Ethereum.
 
 ### Optimism
 
 Crates related to the Optimism rollup live in [optimism](../../crates/optimism/).
 
+### Seismic
+
+-
+
 ### Misc
 
 Small utility crates.
 
-- [`tasks`](../../crates/tasks): An executor-agnostic task abstraction, used to spawn tasks on different async executors. Supports blocking tasks and handles panics gracefully. A tokio implementation is provided by default.
-- [`metrics/common`](../../crates/metrics/src/common): Common metrics types (e.g. metered channels)
-- [`metrics/metrics-derive`](https://github.com/rkrasiuk/metrics-derive): A derive-style API for creating metrics
-- [`tracing`](../../crates/tracing): A small utility crate to install a uniform [`tracing`][tracing] subscriber
+-   [`tasks`](../../crates/tasks): An executor-agnostic task abstraction, used to spawn tasks on different async executors. Supports blocking tasks and handles panics gracefully. A tokio implementation is provided by default.
+-   [`metrics/common`](../../crates/metrics/src/common): Common metrics types (e.g. metered channels)
+-   [`metrics/metrics-derive`](https://github.com/rkrasiuk/metrics-derive): A derive-style API for creating metrics
+-   [`tracing`](../../crates/tracing): A small utility crate to install a uniform [`tracing`][tracing] subscriber
 
 [libmdbx-rs]: https://crates.io/crates/libmdbx
 [discv4]: https://github.com/ethereum/devp2p/blob/master/discv4.md
diff --git a/examples/custom-beacon-withdrawals/src/main.rs b/examples/custom-beacon-withdrawals/src/main.rs
index 26109db1e..46e739e52 100644
--- a/examples/custom-beacon-withdrawals/src/main.rs
+++ b/examples/custom-beacon-withdrawals/src/main.rs
@@ -15,7 +15,9 @@ use reth::{
     providers::ProviderError,
     revm::{
         interpreter::Host,
-        primitives::{address, Address, Bytes, Env, EnvWithHandlerCfg, TransactTo, TxEnv, U256},
+        primitives::{
+            address, Address, Bytes, Env, EnvWithHandlerCfg, RngMode, TransactTo, TxEnv, U256,
+        },
         Database, DatabaseCommit, Evm, State,
     },
 };
@@ -248,6 +250,7 @@ fn fill_tx_env_with_system_contract_call(
     contract: Address,
     data: Bytes,
 ) {
+    let tx_hash = env.tx.tx_hash;
     env.tx = TxEnv {
         caller,
         transact_to: TransactTo::Call(contract),
@@ -269,8 +272,10 @@ fn fill_tx_env_with_system_contract_call(
         blob_hashes: Vec::new(),
         max_fee_per_blob_gas: None,
         authorization_list: None,
+        tx_hash,
         #[cfg(feature = "optimism")]
         optimism: OptimismFields::default(),
+        rng_mode: RngMode::Execution,
     };
 
     // ensure the block gas limit is >= the tx
diff --git a/examples/custom-evm/Cargo.toml b/examples/custom-evm/Cargo.toml
index e763a932e..a8787d7be 100644
--- a/examples/custom-evm/Cargo.toml
+++ b/examples/custom-evm/Cargo.toml
@@ -14,6 +14,7 @@ reth-node-core.workspace = true
 reth-primitives.workspace = true
 reth-node-ethereum = { workspace = true, features = ["test-utils"] }
 reth-tracing.workspace = true
+reth-enclave.workspace = true
 alloy-genesis.workspace = true
 alloy-primitives.workspace = true
 alloy-consensus.workspace = true
diff --git a/examples/custom-evm/src/main.rs b/examples/custom-evm/src/main.rs
index 8990ba225..e33d4e20a 100644
--- a/examples/custom-evm/src/main.rs
+++ b/examples/custom-evm/src/main.rs
@@ -2,7 +2,7 @@
 
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 
-use alloy_consensus::Header;
+use alloy_consensus::{transaction::TxSeismicElements, Header};
 use alloy_genesis::Genesis;
 use alloy_primitives::{address, Address, Bytes, U256};
 use reth::{
@@ -15,7 +15,9 @@ use reth::{
         handler::register::EvmHandler,
         inspector_handle_register,
         precompile::{Precompile, PrecompileOutput, PrecompileSpecId},
-        primitives::{BlockEnv, CfgEnvWithHandlerCfg, Env, PrecompileResult, TxEnv},
+        primitives::{
+            BlockEnv, CfgEnvWithHandlerCfg, EVMResultGeneric, Env, PrecompileResult, TxEnv,
+        },
         ContextPrecompiles, Database, Evm, EvmBuilder, GetInspector,
     },
     rpc::types::engine::PayloadAttributes,
@@ -23,6 +25,7 @@ use reth::{
     transaction_pool::{PoolTransaction, TransactionPool},
 };
 use reth_chainspec::{Chain, ChainSpec};
+use reth_enclave::{EnclaveError, SchnorrkelKeypair};
 use reth_evm_ethereum::EthEvmConfig;
 use reth_node_api::{
     ConfigureEvm, ConfigureEvmEnv, FullNodeTypes, NextBlockEnvAttributes, NodeTypes,
@@ -46,7 +49,7 @@ pub struct MyEvmConfig {
 }
 
 impl MyEvmConfig {
-    pub const fn new(chain_spec: Arc<ChainSpec>) -> Self {
+    pub fn new(chain_spec: Arc<ChainSpec>) -> Self {
         Self { inner: EthEvmConfig::new(chain_spec) }
     }
 }
@@ -88,8 +91,36 @@ impl ConfigureEvmEnv for MyEvmConfig {
 
     type Error = Infallible;
 
-    fn fill_tx_env(&self, tx_env: &mut TxEnv, transaction: &TransactionSigned, sender: Address) {
-        self.inner.fill_tx_env(tx_env, transaction, sender);
+    /// seismic feature encrypt the transaction
+    fn encrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        unimplemented!()
+    }
+
+    /// seismic feature decrypt the transaction
+    fn decrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        unimplemented!()
+    }
+
+    /// Get current eph_rng_keypair
+    fn get_eph_rng_keypair(&self) -> EVMResultGeneric<SchnorrkelKeypair, EnclaveError> {
+        unimplemented!()
+    }
+
+    fn fill_tx_env(
+        &self,
+        tx_env: &mut TxEnv,
+        transaction: &TransactionSigned,
+        sender: Address,
+    ) -> EVMResultGeneric<(), reth_enclave::EnclaveError> {
+        self.inner.fill_tx_env(tx_env, transaction, sender)
     }
 
     fn fill_tx_env_system_contract_call(
diff --git a/examples/stateful-precompile/Cargo.toml b/examples/stateful-precompile/Cargo.toml
index 478886d06..92d6ecc8c 100644
--- a/examples/stateful-precompile/Cargo.toml
+++ b/examples/stateful-precompile/Cargo.toml
@@ -13,6 +13,7 @@ reth-node-core.workspace = true
 reth-primitives.workspace = true
 reth-node-ethereum = { workspace = true, features = ["test-utils"] }
 reth-tracing.workspace = true
+reth-enclave.workspace = true
 alloy-genesis.workspace = true
 alloy-primitives.workspace = true
 alloy-consensus.workspace = true
diff --git a/examples/stateful-precompile/src/main.rs b/examples/stateful-precompile/src/main.rs
index 03ed1fa69..1bcabba02 100644
--- a/examples/stateful-precompile/src/main.rs
+++ b/examples/stateful-precompile/src/main.rs
@@ -2,7 +2,7 @@
 
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
 
-use alloy_consensus::Header;
+use alloy_consensus::{transaction::TxSeismicElements, Header};
 use alloy_genesis::Genesis;
 use alloy_primitives::{Address, Bytes, U256};
 use parking_lot::RwLock;
@@ -14,14 +14,15 @@ use reth::{
         inspector_handle_register,
         precompile::{Precompile, PrecompileSpecId},
         primitives::{
-            BlockEnv, CfgEnvWithHandlerCfg, Env, PrecompileResult, SpecId, StatefulPrecompileMut,
-            TxEnv,
+            BlockEnv, CfgEnvWithHandlerCfg, EVMResultGeneric, Env, PrecompileResult, SpecId,
+            StatefulPrecompileMut, TxEnv,
         },
         ContextPrecompile, ContextPrecompiles, Database, Evm, EvmBuilder, GetInspector,
     },
     tasks::TaskManager,
 };
 use reth_chainspec::{Chain, ChainSpec};
+use reth_enclave::{EnclaveError, SchnorrkelKeypair};
 use reth_node_api::{ConfigureEvm, ConfigureEvmEnv, FullNodeTypes, NodeTypes};
 use reth_node_core::{args::RpcServerArgs, node_config::NodeConfig};
 use reth_node_ethereum::{
@@ -151,7 +152,35 @@ impl ConfigureEvmEnv for MyEvmConfig {
     type Transaction = TransactionSigned;
     type Error = Infallible;
 
-    fn fill_tx_env(&self, tx_env: &mut TxEnv, transaction: &TransactionSigned, sender: Address) {
+    /// seismic feature encrypt the transaction
+    fn encrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        unimplemented!()
+    }
+
+    /// seismic feature decrypt the transaction
+    fn decrypt(
+        &self,
+        _data: &Bytes,
+        _seismic_elements: &TxSeismicElements,
+    ) -> EVMResultGeneric<Bytes, EnclaveError> {
+        unimplemented!()
+    }
+
+    /// Get current eph_rng_keypair
+    fn get_eph_rng_keypair(&self) -> EVMResultGeneric<SchnorrkelKeypair, EnclaveError> {
+        unimplemented!()
+    }
+
+    fn fill_tx_env(
+        &self,
+        tx_env: &mut TxEnv,
+        transaction: &TransactionSigned,
+        sender: Address,
+    ) -> EVMResultGeneric<(), EnclaveError> {
         self.inner.fill_tx_env(tx_env, transaction, sender)
     }
 
diff --git a/network_params.yaml b/network_params.yaml
new file mode 100644
index 000000000..15e69b6a9
--- /dev/null
+++ b/network_params.yaml
@@ -0,0 +1,11 @@
+participants:
+  - el_type: reth
+    el_image: seismic-reth
+    el_extra_params: ["--enclave.mock-server"]
+    cl_type: lighthouse
+    cl_image: sigp/lighthouse:v6.0.0
+additional_services: ["tx_spammer"]
+tx_spammer_params:
+  image: seismic-spammer
+  tx_spammer_extra_args: []
+global_log_level: debug
diff --git a/package.json b/package.json
new file mode 100644
index 000000000..e7b58b80d
--- /dev/null
+++ b/package.json
@@ -0,0 +1,10 @@
+{
+  "workspaces": [
+    "testing/viem-tests",
+    "testing/seismic-tests"
+  ],
+  "private": true,
+  "scripts": {
+    "viem:test": "bun run --cwd testing/viem-tests test"
+  }
+}
diff --git a/seismic-features.md b/seismic-features.md
new file mode 100644
index 000000000..3e9c59a02
--- /dev/null
+++ b/seismic-features.md
@@ -0,0 +1,275 @@
+This documentation highlights the differences and new features introduced, with a focus on the modifications that make Reth shielded. We recommend familiarizing yourself with the standard Reth documentation alongside this guide.
+
+---
+
+### Table of Contents
+
+1. Overall Changes
+2. Shielded Storage
+    - 2.1 Shielded Storage Flag
+    - 2.2 State Root Calculation
+    - 2.3 `eth_storageAt` RPC Modification
+    - 2.4 Storage Hashing Parallelization
+3. Shielded Transactions
+    - 3.1 Shielded Transaction Flow
+    - 3.2 TEE Client and Arguments
+    - 3.3 `TxSeismic` Transaction Type
+    - 3.4 `ConfigureEvmEnv` and `EthEvmConfig` Changes
+    - 3.5 RPC Method Changes
+4. Support for `seismic-revm`'s `Mercury` Specification
+    - 4.1 Seismic Chain Spec
+5. RPC Modifications
+    - 5.1 Summary of Modified Endpoints
+6. Backup Mechanism
+7. Performance Testing
+8. Testing
+    - 8.1 Running Tests
+    - 8.2 Modifications of Existing Tests
+    - 8.3 Ethereum Package Testing
+9. Future Considerations
+    - 9.1 Witness Auditing
+    - 9.2 State Root Inclusion of `is_private` Flag
+    - 9.3 RPC Method Enhancements
+
+---
+
+### 1. Overall Changes
+
+We have introduced several changes to make Reth encrypted, enabling shielded storage and transactions. The key modifications include:
+
+-   **Shielded Storage**: Added an `is_private` flag to storage values, changing the storage value type from `U256` to `FlaggedStorage`.
+-   **Shielded Transaction**: Providing a new transaction type `TxSeismic` that extends the existing transaction and supports shielded input.
+
+---
+
+### 2. Shielded Storage
+
+#### 2.1 Shielded Storage Flag
+
+Previously, storage values were of type `U256`. With the encryption enhancements, we've introduced a new type called `FlaggedStorage`, which includes an `is_private` flag to indicate whether a storage value is confidential.
+
+-   **Implementation**: This change aligns with modifications in `seismic-revm` ([Pull Request #9](https://github.com/SeismicSystems/seismic-revm/pull/9)) and requires the use of REVM inspectors ([Pull Request #1](https://github.com/SeismicSystems/seismic-revm-inspectors/pull/1)).
+
+#### 2.2 State Root Calculation
+
+-   **Modification**: The `is_private` flag is **not** encoded during the state root calculation. This decision is reflected in the code [here](https://github.com/SeismicSystems/seismic-reth/pull/4/commits/5a69f1ea359d4e95dd6a825e604548b0e11579#diff-a69280a7601140010b48c98e07c58431efd9e6f45180dcfcd2e0d423e4588a98R162).
+-   **Consideration**: We may want to include the `is_private` flag as part of the state since a storage slot can transition from public to private. This is an open point for future development.
+
+#### 2.3 `eth_storageAt` RPC Modification
+
+-   **Behavior**: Modified the `eth_storageAt` RPC method to handle private storage.
+    -   If `is_private` is `true`, the RPC call returns `0`.
+-   **Rationale**:
+    -   **Prevent Information Leakage**: Since storage can transition from private to public, exposing the storage type could leak information through enumeration.
+    -   **Potentially Misleading Data**: Returning `0` might be misleading if there is a value being stored. Developers should be aware of this behavior.
+-   **Code Reference**: [Commit](https://github.com/SeismicSystems/seismic-reth/pull/4/commits/f26de3b8ff74a4b23de0df548c8b629c2479d907)
+-   **Impact**: For a complete set of code paths affected, refer to all places where `encode_fixed_size()` is called.
+
+#### 2.4 Storage Hashing Parallelization
+
+-   **Modification**: We include the `is_private` flag along with `addr_key` as the key instead of combining it with the value during parallelization of the `StorageHashingStage`.
+-   **Code Reference**: `seismic-reth/crates/stages/stages/src/stages/hashing_storage.rs:106`
+
+---
+
+### 3. Shielded Transactions
+
+The inputs of a shielded transaction are encrypted and can only be decrypted with a secret key from a secure enclave. Encryption and decryption logic happens outside of Seismic Reth and inside the [cryptography server](https://github.com/SeismicSystems/teeservice). We added modifications to support the communications with the cryptography server and shielded transaction processing.
+
+#### 3.1 Transaction Flow Overview
+
+##### _eth_sendRawTransaction_ Flow
+
+1. **Client-side Encryption**:
+
+    - Client generates an ephemeral key pair
+    - Uses ephemeral private key + network's public key to generate shared secret via ECDH
+    - Encrypts transaction calldata using shared secret
+    - Includes ephemeral public key in transaction as `encryption_pubkey`
+    - Can submit transaction in two ways:
+        - Raw transaction bytes (message_version = 0)
+        - EIP-712 typed data (message_version = 2)
+
+2. **Network Processing**:
+    - Seismic Reth receives encrypted transaction
+    - Uses network private key + transaction's `encryption_pubkey` to regenerate shared secret
+    - Decrypts calldata before EVM execution
+    - Processes transaction normally after decryption
+
+##### _eth_call_ Flow
+
+1. **Client-side Encryption**:
+
+    - Client generates an ephemeral key pair
+    - Uses ephemeral private key + network's public key to generate shared secret via ECDH
+    - Encrypts transaction calldata using shared secret
+    - Includes ephemeral public key in transaction as `encryption_pubkey`
+    - Can submit transaction in two ways:
+        - Raw transaction bytes (message_version = 0)
+        - EIP-712 typed data (message_version = 2)
+
+2. **Network Processing**:
+
+    - Seismic Reth receives encrypted transaction
+    - Uses network private key + transaction's `encryption_pubkey` to regenerate shared secret
+    - Decrypts calldata before EVM execution
+    - Simulates transaction normally after decryption
+    - Encrypts simulation output using the shared secret
+
+3. **Client-side Decryption**:
+    - Uses ephemeral private key + network's public key to generate shared secret via ECDH
+    - Decrypts simulation output using shared secret
+
+#### 3.2 Cryptography Client and Arguments
+
+-   **Functionality**: Decryption occurs when the EVM initializes with the corresponding transaction, ensuring that the input data remains confidential until execution. Encryption and decryption logic lives in an external cryptography server so that sensitive information can be separated from Seismic Reth.
+-   **Addition**: Implemented a client for the cryptography server and arguments to interact with a server for decryption and encryption tasks.
+
+#### 3.3 `TxSeismic` Transaction Type
+
+-   **Definition**: Introduced `TxSeismic`, which defines fields for seismic transactions. In this transaction type, only the `input` field is encrypted.
+
+The `TxSeismic` transaction type contains the following fields:
+
+-   `chain_id`: Chain identifier for replay attack protection (EIP-155)
+-   `nonce`: Number of transactions sent by the sender (Tn)
+-   `gas_price`: Amount of Wei to be paid per unit of gas for computation costs (Tp). Uses u128 since max Ethereum circulation of ~120M ETH is well within bounds
+-   `gas_limit`: Maximum amount of gas allowed for transaction execution (Tg). Must be paid upfront and cannot be increased
+-   `to`: 160-bit recipient address for message calls, or empty (∅) for contract creation (Tt)
+-   `value`: Amount of Wei to transfer to recipient or endow to new contract (Tv)
+-   `encryption_pubkey`: 33-byte public key used to encrypt transaction output
+-   `message_version`: Version number of the message format to support EIP-712 `TypedData`
+-   `input`: Variable length byte array containing encrypted input
+
+#### 3.4 `ConfigureEvmEnv` and `EthEvmConfig` Changes
+
+Extended `ConfigureEvmEnv` trait and `EthEvmConfig` implementation to integrate encryption/decryption capabilities. The `fill_tx_env` method was modified to handle `TxSeismic` transactions by performing input decryption prior to EVM execution, enabling shielded transaction processing.
+
+#### 3.5 RPC Method Changes
+
+-   **Modified Methods**
+
+    -   `eth_sendTransaction`
+    -   `eth_sendRawTransaction`
+    -   `eth_call`
+    -   `eth_estimateGas`
+
+    to support shielded transactions
+
+### 4. Support for `seismic-revm`'s `Mercury` Specification
+
+#### 4.1 Seismic Chain Spec
+
+If chain spec is `SEISMIC_MAINNET` (chain id is 5123) or `SEISMIC_DEV` (chain id is 5124), the `Mercury` spec of EVM is used.
+
+#### 4.2 `rng_mode` Initialization
+
+Depending
+
+### 5. RPC Modifications
+
+#### 5.1 Summary of Modified Endpoints
+
+We have modified several RPC endpoints to support shielded features:
+
+-   **Modified _eth_ RPC Methods**:
+
+    -   **`eth_storageAt`**:
+        -   Returns `0` for private storage slots.
+        -   **Modification Location**: [Code Reference](https://github.com/SeismicSystems/seismic-reth/pull/4/commits/f26de3b8ff74a4b23de0df548c8b629c2479d907)
+    -   **`eth_sendTransaction`**:
+        -   Accepts `TxSeismic` transaction type and input encryption
+    -   **`eth_sendRawTransaction`**:
+        -   Accepts both raw seismic transactions (`Bytes`) and EIP-712 typed data with signatures (`TypedDataRequest`)
+    -   **`eth_call`**:
+        -   Accepts three types of shielded transaction format:
+            -   `TransactionRequest`: Standard transaction call request with additional fields. Since this format of request is unsigned, `msg.sender` is overridden to `None`
+            -   `TypedData`: EIP-712 signed typed message with signature
+            -   `Bytes`: Raw signed seismic transaction bytes
+    -   **`eth_estimateGas`**:
+        -   Accepts three types of shielded transaction format:
+            -   `TransactionRequest`: Standard transaction call request with additional fields. Since this format of request is unsigned, `msg.sender` is overridden to `None`
+
+-   **SeismicAPI RPC Endpoints**
+
+    -   **`seismic_getTeePublicKey`**:
+        -   Returns the network public key for client-side encryption when constructing shielded input
+
+---
+
+### 6. Backup Mechanism
+
+-   **Feature**: Seismic Reth saves the database state every time it reaches a certain canonical block production, controlled by the `DEFAULT_BACKUP_THRESHOLD` parameter.
+-   **Consideration**: This feature requires further specification depending on how the consensus layer interacts with Seismic Reth for accurate block counting.
+-   **Purpose**: Enables state snapshots at defined intervals, which can be crucial for recovery.
+
+---
+
+### 7. Performance Testing
+
+We conducted end-to-end tests for the above changes. The performance metrics are as follows:
+
+| **Block Time with HTTP Request** | **0 Calls**   | **1400 Calls** | **5200 Calls** |
+| -------------------------------- | ------------- | -------------- | -------------- |
+| **1400 Normal Transactions**     | 2.018 seconds | 5.273 seconds  | 10.257 seconds |
+| **1400 Encrypted Transactions**  | 6.601 seconds | 11.523 seconds | 21.790 seconds |
+
+-   **Observation**: The HTTP call latency contributes approximately **40%** of the total latency.
+-   **Note**: These tests include end-to-end scenarios, demonstrating the overhead introduced by the encryption and decryption processes.
+
+---
+
+### 8. Testing
+
+#### 8.1 Running Tests
+
+To ensure the integrity of the shielded enhancements, you can run end-to-end tests using the following command:
+
+```bash
+cargo nextest run --workspace
+```
+
+#### 8.1 Modifications of existing tests
+
+**Note**: We ignore certain tests by default in `nextest.toml`:
+
+-   `providers::static_file::tests::test_header_truncation`
+-   `providers::static_file::tests::test_tx_based_truncation`
+-   `eth::core::tests`
+
+For shielded transaction,
+
+For shielded storage, we've modified:
+
+-   `reth-provider writer::tests::write_to_db_storage` to verify that the `is_private` flag is committed to the database from the EVM execution outcome.
+-   `reth-trie state::tests::hashed_state_wiped_extension` to ensure that the `is_private` flag is propagated from `hashedStorages` to `postHashedStorages`.
+
+Because we have a decryption call for `TxSeismic` call, `#[tokio::test(flavor = "multi_thread")]` replaces `#[tokio::test]` to provide runtime async support.
+
+#### 8.2 Integration Testing
+
+See the `crates/seismic/node/tests/integration.rs` examples of integration testing using seismic transactions.
+
+#### 8.3 Ethereum Package Testing
+
+We added a `TxSeismic` spammer for Ethereum Package testing. For specific instruction see this [PR](https://github.com/SeismicSystems/seismic-reth/pull/49)
+
+---
+
+### 9. Future Considerations
+
+There are several areas that require attention and potential future development:
+
+1. **Witness Auditing**:
+
+    - **Action**: The `witness()` function needs to be audited to ensure it correctly handles private data.
+    - **Importance**: To prevent potential leaks or mishandling of confidential information.
+
+2. **State Root Inclusion of `is_private` Flag**:
+
+    - **Consideration**: Including the `is_private` flag in the state root calculation may be necessary to accurately represent the state where storage slots can transition between public and private.
+
+3. **RPC Method Enhancements**:
+    - **Encrypted Events and Data**: Future improvements may include supporting encrypted events, enabling the emission of shielded data without compromising confidentiality.
+    - **_eth_simulate_v1_**: support endpoint for shielded transactions
+    - **_debug\_\*_ _trace\_\*_**: support endpoints for shielded data with redaction
diff --git a/testing/ef-tests/src/lib.rs b/testing/ef-tests/src/lib.rs
index ca5e47d2d..0305f943c 100644
--- a/testing/ef-tests/src/lib.rs
+++ b/testing/ef-tests/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 
diff --git a/testing/ef-tests/src/models.rs b/testing/ef-tests/src/models.rs
index 7f6c0cdae..420b400ce 100644
--- a/testing/ef-tests/src/models.rs
+++ b/testing/ef-tests/src/models.rs
@@ -180,11 +180,11 @@ impl State {
                 let storage_key = B256::from_slice(&k.to_be_bytes::<32>());
                 tx.put::<tables::PlainStorageState>(
                     address,
-                    StorageEntry { key: storage_key, value: *v },
+                    StorageEntry { key: storage_key, value: *v, ..Default::default() },
                 )?;
                 tx.put::<tables::HashedStorages>(
                     hashed_address,
-                    StorageEntry { key: keccak256(storage_key), value: *v },
+                    StorageEntry { key: keccak256(storage_key), value: *v, ..Default::default() },
                 )?;
             }
         }
diff --git a/testing/seismic-tests/.gitignore b/testing/seismic-tests/.gitignore
new file mode 100644
index 000000000..9b1ee42e8
--- /dev/null
+++ b/testing/seismic-tests/.gitignore
@@ -0,0 +1,175 @@
+# Based on https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore
+
+# Logs
+
+logs
+_.log
+npm-debug.log_
+yarn-debug.log*
+yarn-error.log*
+lerna-debug.log*
+.pnpm-debug.log*
+
+# Caches
+
+.cache
+
+# Diagnostic reports (https://nodejs.org/api/report.html)
+
+report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json
+
+# Runtime data
+
+pids
+_.pid
+_.seed
+*.pid.lock
+
+# Directory for instrumented libs generated by jscoverage/JSCover
+
+lib-cov
+
+# Coverage directory used by tools like istanbul
+
+coverage
+*.lcov
+
+# nyc test coverage
+
+.nyc_output
+
+# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
+
+.grunt
+
+# Bower dependency directory (https://bower.io/)
+
+bower_components
+
+# node-waf configuration
+
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+
+build/Release
+
+# Dependency directories
+
+node_modules/
+jspm_packages/
+
+# Snowpack dependency directory (https://snowpack.dev/)
+
+web_modules/
+
+# TypeScript cache
+
+*.tsbuildinfo
+
+# Optional npm cache directory
+
+.npm
+
+# Optional eslint cache
+
+.eslintcache
+
+# Optional stylelint cache
+
+.stylelintcache
+
+# Microbundle cache
+
+.rpt2_cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
+
+# Optional REPL history
+
+.node_repl_history
+
+# Output of 'npm pack'
+
+*.tgz
+
+# Yarn Integrity file
+
+.yarn-integrity
+
+# dotenv environment variable files
+
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+
+# parcel-bundler cache (https://parceljs.org/)
+
+.parcel-cache
+
+# Next.js build output
+
+.next
+out
+
+# Nuxt.js build / generate output
+
+.nuxt
+dist
+
+# Gatsby files
+
+# Comment in the public line in if your project uses Gatsby and not Next.js
+
+# https://nextjs.org/blog/next-9-1#public-directory-support
+
+# public
+
+# vuepress build output
+
+.vuepress/dist
+
+# vuepress v2.x temp and cache directory
+
+.temp
+
+# Docusaurus cache and generated files
+
+.docusaurus
+
+# Serverless directories
+
+.serverless/
+
+# FuseBox cache
+
+.fusebox/
+
+# DynamoDB Local files
+
+.dynamodb/
+
+# TernJS port file
+
+.tern-port
+
+# Stores VSCode versions used for testing VSCode extensions
+
+.vscode-test
+
+# yarn v2
+
+.yarn/cache
+.yarn/unplugged
+.yarn/build-state.yml
+.yarn/install-state.gz
+.pnp.*
+
+# IntelliJ based IDEs
+.idea
+
+# Finder (MacOS) folder config
+.DS_Store
diff --git a/testing/seismic-tests/README.md b/testing/seismic-tests/README.md
new file mode 100644
index 000000000..a925597f6
--- /dev/null
+++ b/testing/seismic-tests/README.md
@@ -0,0 +1,15 @@
+# seismic-reth-tests
+
+To install dependencies:
+
+```bash
+bun install
+```
+
+To run:
+
+```bash
+bun run index.ts
+```
+
+This project was created using `bun init` in bun v1.1.20. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.
diff --git a/testing/seismic-tests/bun.lockb b/testing/seismic-tests/bun.lockb
new file mode 100755
index 000000000..418a29500
Binary files /dev/null and b/testing/seismic-tests/bun.lockb differ
diff --git a/testing/seismic-tests/client.ts b/testing/seismic-tests/client.ts
new file mode 100644
index 000000000..e69de29bb
diff --git a/testing/seismic-tests/package.json b/testing/seismic-tests/package.json
new file mode 100644
index 000000000..3e624a2be
--- /dev/null
+++ b/testing/seismic-tests/package.json
@@ -0,0 +1,15 @@
+{
+  "name": "seismic-reth-tests",
+  "module": "index.ts",
+  "type": "module",
+  "devDependencies": {
+    "@types/bun": "latest"
+  },
+  "peerDependencies": {
+    "typescript": "^5.0.0"
+  },
+  "dependencies": {
+    "viem": "^2.21.21",
+    "terminate": "^2.6.1"
+  }
+}
\ No newline at end of file
diff --git a/testing/seismic-tests/process.ts b/testing/seismic-tests/process.ts
new file mode 100644
index 000000000..3e94d20d1
--- /dev/null
+++ b/testing/seismic-tests/process.ts
@@ -0,0 +1,39 @@
+import terminate from "terminate/promise";
+import { spawn, ChildProcess } from "child_process";
+
+type RunProcessOptions = {
+  args?: readonly string[];
+  waitMs?: number;
+  cwd?: string;
+};
+
+export const runProcess = async (
+  command: string,
+  options: RunProcessOptions = {},
+): Promise<ChildProcess> => {
+  const { args = [], waitMs = 100, cwd } = options;
+  const process = spawn(command, args, {
+    cwd,
+    stdio: "inherit",
+  });
+  await new Promise((resolve) => {
+    process.on("spawn", () => setTimeout(resolve, waitMs));
+  });
+  return process;
+};
+
+export const killProcess = async (process: ChildProcess) => {
+  const description = process.spawnargs.join(" ");
+  if (!process.pid) {
+    console.warn(`Cannot kill '${description}': has no pid`);
+    return;
+  }
+  try {
+    await terminate(process.pid);
+    console.log(`Terminated process '${description}'`);
+  } catch (error) {
+    console.error(
+      `Process[${process.pid}] failed to terminate '${description}': ${error}`,
+    );
+  }
+};
\ No newline at end of file
diff --git a/testing/seismic-tests/seismicReth.ts b/testing/seismic-tests/seismicReth.ts
new file mode 100644
index 000000000..82218fcc0
--- /dev/null
+++ b/testing/seismic-tests/seismicReth.ts
@@ -0,0 +1,33 @@
+import { promises as fs } from "fs";
+import { killProcess, runProcess } from "./process";
+import type { ServerProcess } from "./server";
+import { sleep } from "bun";
+
+type SeismicOptions = {
+  port?: number;
+  silent?: boolean;
+  waitMs?: number;
+};
+
+export type SeismicProcess = ServerProcess & { url: string };
+
+export const runSeismicReth = async (
+  options: SeismicOptions = {},
+): Promise<SeismicProcess> => {
+  const { port = 8545, silent = true, waitMs = 2_000 } = options;
+  const silentArg = silent ? ["--silent"] : [];
+
+  const process = await runProcess("seismic-reth", {
+    args: ["node", "--http", "--port", port.toString(), ...silentArg],
+  });
+
+  await sleep(waitMs);
+
+  // Check if process is running by verifying the URL is accessible, etc.
+  try {
+    return { process, url: `http://127.0.0.1:${port}` };
+  } catch (e) {
+    await killProcess(process);
+    throw new Error(`Failed to start seismic-reth: ${e}`);
+  }
+};
diff --git a/testing/seismic-tests/seismicTransaction.test.ts b/testing/seismic-tests/seismicTransaction.test.ts
new file mode 100644
index 000000000..4b8b0e7e0
--- /dev/null
+++ b/testing/seismic-tests/seismicTransaction.test.ts
@@ -0,0 +1,74 @@
+import { describe, test, expect, afterAll } from "bun:test"
+import { createPublicClient, http, createWalletClient, defineChain} from "viem"
+import { privateKeyToAccount } from "viem/accounts"
+import { runSeismicReth } from "./seismicReth"
+import { killProcess } from "./process"
+const TEST_ADDRESS = '0x5615deb798bb3e4dfa0139dfa1b3d433cc23b72f'
+const TEST_PRIVATE_KEY = '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
+
+const account = privateKeyToAccount(TEST_PRIVATE_KEY)
+
+// TODO: move into seismic-viem
+const seismicDevnet = defineChain({
+  name: 'seismic',
+  id: 12345,
+  nativeCurrency: {
+    name: 'Ether',
+    symbol: 'ETH',
+    decimals: 18
+  },
+  rpcUrls: {
+    default: {
+      http: ['http://localhost:8545'],
+    },
+  }
+})
+
+const seismicRethProcess = await runSeismicReth({ silent: true })
+
+const exitProcess = async (code: 0 | 1) => {
+  await killProcess(seismicRethProcess.process);
+  process.exit(code)
+}
+
+
+const walletClient = createWalletClient({
+  account,
+  chain: seismicDevnet,
+  transport: http()
+})
+
+describe('Seismic Transaction', () => {
+  test('node detects and parses seismic transaction', async () => {
+    const response = await walletClient.request({
+      // @ts-ignore
+      method: "seismic_sendTransaction",
+      params: [
+        {
+          from: walletClient.account.address,
+          to: TEST_ADDRESS,
+          // @ts-ignore
+          input: "0x123456",
+          transaction_type: 74,
+          gas: "0x33450",
+          // @ts-ignore
+          secretData: [
+            {
+              index: 4,
+              preimage: BigInt(10),
+              preimage_type: 'uint256',
+              salt: "0x" + BigInt(0).toString(16).padStart(64, '0')
+            }
+          ]
+        }
+      ]
+    });
+
+    expect(response).toBeDefined();
+    console.log('Seismic transaction response:', response);
+  });
+});
+
+afterAll(async () => {
+  await exitProcess(0)
+})
\ No newline at end of file
diff --git a/testing/seismic-tests/server.ts b/testing/seismic-tests/server.ts
new file mode 100644
index 000000000..ec1329baa
--- /dev/null
+++ b/testing/seismic-tests/server.ts
@@ -0,0 +1,3 @@
+import { ChildProcess } from "child_process";
+
+export type ServerProcess = { process: ChildProcess; url: string };
\ No newline at end of file
diff --git a/testing/seismic-tests/tsconfig.json b/testing/seismic-tests/tsconfig.json
new file mode 100644
index 000000000..1c427d238
--- /dev/null
+++ b/testing/seismic-tests/tsconfig.json
@@ -0,0 +1,31 @@
+{
+  "compilerOptions": {
+    // "baseUrl": "./",
+    // "paths": {
+    //   "seismic/*": ["node_modules/seismic/*"]
+    // },
+    // Enable latest features
+    "lib": ["ESNext", "DOM"],
+    "target": "ESNext",
+    "module": "ESNext",
+    "moduleDetection": "force",
+    "jsx": "react-jsx",
+    "allowJs": true,
+
+    // Bundler mode
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "verbatimModuleSyntax": true,
+    "noEmit": true,
+
+    // Best practices
+    "strict": true,
+    "skipLibCheck": true,
+    "noFallthroughCasesInSwitch": true,
+
+    // Some stricter flags (disabled by default)
+    "noUnusedLocals": false,
+    "noUnusedParameters": false,
+    "noPropertyAccessFromIndexSignature": false
+  }
+}
diff --git a/testing/testing-utils/src/generators.rs b/testing/testing-utils/src/generators.rs
index 28ba171bd..5e0a7a968 100644
--- a/testing/testing-utils/src/generators.rs
+++ b/testing/testing-utils/src/generators.rs
@@ -292,7 +292,17 @@ where
 {
     let mut state: BTreeMap<_, _> = accounts
         .into_iter()
-        .map(|(addr, (acc, st))| (addr, (acc, st.into_iter().map(|e| (e.key, e.value)).collect())))
+        .map(|(addr, (acc, st))| {
+            (
+                addr,
+                (
+                    acc,
+                    st.into_iter()
+                        .map(|e| (e.key, (e.value, e.is_private)))
+                        .collect::<BTreeMap<_, _>>(),
+                ),
+            )
+        })
         .collect();
 
     let valid_addresses = state.keys().copied().collect::<Vec<_>>();
@@ -316,21 +326,33 @@ where
         prev_from.balance = prev_from.balance.wrapping_sub(transfer);
 
         // deposit in receiving account and update storage
-        let (prev_to, storage): &mut (Account, BTreeMap<B256, U256>) = state.get_mut(&to).unwrap();
+        let (prev_to, storage): &mut (Account, BTreeMap<B256, (U256, bool)>) =
+            state.get_mut(&to).unwrap();
 
         let mut old_entries: Vec<_> = new_entries
             .into_iter()
             .filter_map(|entry| {
                 let old = if entry.value.is_zero() {
                     let old = storage.remove(&entry.key);
-                    if matches!(old, Some(U256::ZERO)) {
-                        return None
+                    if matches!(old, Some((U256::ZERO, false))) {
+                        return None;
                     }
                     old
                 } else {
-                    storage.insert(entry.key, entry.value)
+                    storage.insert(entry.key, (entry.value, entry.is_private))
                 };
-                Some(StorageEntry { value: old.unwrap_or(U256::ZERO), ..entry })
+                match old {
+                    Some((old_value, old_is_private)) => {
+                        return Some(StorageEntry {
+                            value: old_value,
+                            is_private: old_is_private,
+                            ..entry
+                        });
+                    }
+                    None => {
+                        return Some(StorageEntry { value: U256::ZERO, is_private: false, ..entry });
+                    }
+                }
             })
             .collect();
         old_entries.sort_by_key(|entry| entry.key);
@@ -390,7 +412,7 @@ pub fn random_storage_entry<R: Rng>(rng: &mut R, key_range: Range<u64>) -> Stora
     });
     let value = U256::from(rng.gen::<u64>());
 
-    StorageEntry { key, value }
+    StorageEntry { key, value, ..Default::default() }
 }
 
 /// Generate random Externally Owned Account (EOA account without contract).
diff --git a/testing/testing-utils/src/lib.rs b/testing/testing-utils/src/lib.rs
index c593d3064..8a574899c 100644
--- a/testing/testing-utils/src/lib.rs
+++ b/testing/testing-utils/src/lib.rs
@@ -3,7 +3,7 @@
 #![doc(
     html_logo_url = "https://raw.githubusercontent.com/paradigmxyz/reth/main/assets/reth-docs.png",
     html_favicon_url = "https://avatars0.githubusercontent.com/u/97369466?s=256",
-    issue_tracker_base_url = "https://github.com/paradigmxyz/reth/issues/"
+    issue_tracker_base_url = "https://github.com/SeismicSystems/seismic-reth/issues/"
 )]
 #![cfg_attr(docsrs, feature(doc_cfg, doc_auto_cfg))]
 #![cfg_attr(not(test), warn(unused_crate_dependencies))]
diff --git a/testing/viem-tests/.gitignore b/testing/viem-tests/.gitignore
new file mode 100644
index 000000000..a14702c40
--- /dev/null
+++ b/testing/viem-tests/.gitignore
@@ -0,0 +1,34 @@
+# dependencies (bun install)
+node_modules
+
+# output
+out
+dist
+*.tgz
+
+# code coverage
+coverage
+*.lcov
+
+# logs
+logs
+_.log
+report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json
+
+# dotenv environment variable files
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+
+# caches
+.eslintcache
+.cache
+*.tsbuildinfo
+
+# IntelliJ based IDEs
+.idea
+
+# Finder (MacOS) folder config
+.DS_Store
diff --git a/testing/viem-tests/README.md b/testing/viem-tests/README.md
new file mode 100644
index 000000000..4c4785748
--- /dev/null
+++ b/testing/viem-tests/README.md
@@ -0,0 +1,13 @@
+# Seismic Viem tests
+
+To install dependencies:
+
+```bash
+bun install
+```
+
+To run tests:
+
+```bash
+bun test
+```
diff --git a/testing/viem-tests/package.json b/testing/viem-tests/package.json
new file mode 100644
index 000000000..97c9974fe
--- /dev/null
+++ b/testing/viem-tests/package.json
@@ -0,0 +1,21 @@
+{
+  "name": "client-tests",
+  "private": true,
+  "scripts": {
+    "test": "bun test"
+  },
+  "module": "index.ts",
+  "type": "module",
+  "devDependencies": {
+    "@types/bun": "latest"
+  },
+  "peerDependencies": {
+    "typescript": "^5"
+  },
+  "dependencies": {
+    "viem": "2.x",
+    "seismic-viem": "latest",
+    "seismic-viem-tests": "latest"
+  }
+}
+
diff --git a/testing/viem-tests/tsconfig.json b/testing/viem-tests/tsconfig.json
new file mode 100644
index 000000000..238655f2c
--- /dev/null
+++ b/testing/viem-tests/tsconfig.json
@@ -0,0 +1,27 @@
+{
+  "compilerOptions": {
+    // Enable latest features
+    "lib": ["ESNext", "DOM"],
+    "target": "ESNext",
+    "module": "ESNext",
+    "moduleDetection": "force",
+    "jsx": "react-jsx",
+    "allowJs": true,
+
+    // Bundler mode
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "verbatimModuleSyntax": true,
+    "noEmit": true,
+
+    // Best practices
+    "strict": true,
+    "skipLibCheck": true,
+    "noFallthroughCasesInSwitch": true,
+
+    // Some stricter flags (disabled by default)
+    "noUnusedLocals": false,
+    "noUnusedParameters": false,
+    "noPropertyAccessFromIndexSignature": false
+  }
+}
diff --git a/testing/viem-tests/viem.test.ts b/testing/viem-tests/viem.test.ts
new file mode 100644
index 000000000..af41ecb22
--- /dev/null
+++ b/testing/viem-tests/viem.test.ts
@@ -0,0 +1,140 @@
+import type { Chain, Hex } from "viem"
+import { localSeismicDevnet, sanvil } from "seismic-viem"
+import { generatePrivateKey, privateKeyToAccount } from "viem/accounts"
+import { beforeAll, afterAll, describe, test } from "bun:test"
+import {
+  setupNode,
+  testAesKeygen,
+  testAesGcm,
+  testEcdh,
+  testHkdfHex,
+  testHkdfString,
+  testRng,
+  testRngWithPers,
+  testSecp256k1,
+  testSeismicCallTypedData,
+  testSeismicTx,
+  testSeismicTxEncoding,
+  testSeismicTxTypedData,
+  testWsConnection,
+  buildNode,
+} from "seismic-viem-tests"
+
+const TIMEOUT_MS = 20_000
+const chain = localSeismicDevnet
+const port = 8545
+
+const TEST_ACCOUNT_PRIVATE_KEY =
+  '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
+const account = privateKeyToAccount(TEST_ACCOUNT_PRIVATE_KEY)
+const encryptionSk = '0x311d54d3bf8359c70827122a44a7b4458733adce3c51c6b59d9acfce85e07505'
+const encryptionPubkey = '0x028e76821eb4d77fd30223ca971c49738eb5b5b71eabe93f96b348fdce788ae5a0'
+
+let url: string
+let wsUrl: string
+let exitProcess: () => void
+let pcParams: { chain: Chain, url: string }
+
+beforeAll(async () => {
+  await buildNode(chain)
+  const node = await setupNode(chain, { port, ws: true })
+  pcParams = { chain, url: node.url }
+  exitProcess = node.exitProcess
+  url = node.url
+  wsUrl = `ws://localhost:${port}`
+})
+
+describe("Seismic Contract", async () => {
+  test(
+    "deploy & call contracts with seismic tx",
+    () => testSeismicTx({ chain, url, account }),
+    {
+      timeout: TIMEOUT_MS,
+    }
+  )
+})
+
+describe("Seismic Transaction Encoding", async () => {
+  test(
+    "node detects and parses seismic transaction",
+    () =>
+      testSeismicTxEncoding({
+        chain,
+        account,
+        url,
+        encryptionSk,
+        encryptionPubkey,
+      }),
+    {
+      timeout: TIMEOUT_MS,
+    }
+  )
+})
+
+describe("Typed Data", async () => {
+  test(
+    "client can sign a seismic typed message",
+    () =>
+      testSeismicCallTypedData({
+        chain,
+        account,
+        url,
+        encryptionSk,
+        encryptionPubkey,
+      }),
+    { timeout: TIMEOUT_MS }
+  )
+
+  test(
+    "client can sign via eth_signTypedData",
+    () =>
+      testSeismicTxTypedData({
+        account,
+        chain,
+        url,
+        encryptionSk,
+        encryptionPubkey,
+      }),
+    { timeout: TIMEOUT_MS }
+  )
+})
+
+describe("AES", async () => {
+  test("generates AES key correctly", testAesKeygen)
+})
+
+describe("Websocket Connection", () => {
+  test(
+    "should connect to the ws",
+    async () => {
+      await testWsConnection({
+        chain,
+        wsUrl,
+      })
+    },
+    { timeout: TIMEOUT_MS }
+  )
+})
+
+describe("Seismic Precompiles", async () => {
+  test("RNG(1)", () => testRng({ chain, url }, 1), { timeout: TIMEOUT_MS })
+  test("RNG(8)", () => testRng({ chain, url }, 8), { timeout: TIMEOUT_MS })
+  test("RNG(16)", () => testRng({ chain, url }, 16), { timeout: TIMEOUT_MS })
+  test("RNG(32)", () => testRng({ chain, url }, 32), { timeout: TIMEOUT_MS })
+  test("RNG(32, pers)", () => testRngWithPers({ chain, url }, 32), {
+    timeout: TIMEOUT_MS,
+  })
+  test("ECDH", () => testEcdh({ chain, url }), { timeout: TIMEOUT_MS })
+  test("HKDF(string)", () => testHkdfString({ chain, url }), {
+    timeout: TIMEOUT_MS,
+  })
+  test("HKDF(hex)", () => testHkdfHex({ chain, url }), { timeout: TIMEOUT_MS })
+  test("AES-GCM", () => testAesGcm({ chain, url }), { timeout: TIMEOUT_MS })
+  test("secp256k1", () => testSecp256k1({ chain, url }), {
+    timeout: TIMEOUT_MS,
+  })
+})
+
+afterAll(() => {
+  exitProcess()
+})
